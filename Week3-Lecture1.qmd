---
author: Dr Wei Miao
date: "`r (lubridate::ymd('20221006')+lubridate::dweeks(2))|> format('%a, %b %d %Y')`"
institute: UCL School of Management
title: "Class 4 Data Wrangling with R"
df-print: kable
colorlinks: true
code-line-numbers: true
format:
  html: 
    toc: true
    number-sections: true
    page-layout: full
    toc-depth: 2
    code-line-numbers: true
    code-copy: hover
  beamer: 
    toc: false
    toc-title: ""
    slide-level: 2
    section-titles: true
    theme: Frankfurt
    colortheme: beaver
    fonttheme: structurebold
    navigation: horizontal
    tbl-colwidths: auto
    fontsize: 9pt
knitr:
  opts_chunk:
    echo: true
    warning: true
    message: true
    error: true
execute: 
  freeze: auto
---

# Quarto and Markdown

## Conventional Typesetting

As business analysts, we often need to communicate our thoughts (text, math, codes, and findings) to colleagues, clients, or future selves.

Problems with conventional [WYSIWYG](https://en.wikipedia.org/wiki/WYSIWYG) tools such as Microsoft Word:

-   too much focus on formatting
-   difficult to format as the complexity of content increases

```{r, echo=FALSE,out.width="75%",fig.align = 'center'}
pacman::p_load(knitr,tufte)
include_graphics(path = "images/class3_WordMovingPicture.jpg")
```

## The Hardcore Solution: Latex

> \[...\] it is better to leave document design to document designers, and to let authors get on with writing documents

`r quote_footer("- LaTeX Official Website")`

```{r, echo=FALSE,out.width="50%", fig.align='center'}
include_graphics(path = "images/class3_WordVersusLatex.png")
```

## Problems with LaTex

-   Complex syntax and high learning cost
-   The content can not be read as-is
-   Inconvenient when collaborating with co-authors

```{r, echo=FALSE,out.width="70%", fig.align='center'}
  include_graphics(path = "images/class3_LatexScreenshot.png")
```

-   Another student benefit provided by UCL: free access to [overleaf](https://www.overleaf.com/edu/ucl), a very powerful LaTex editor made for collaboration.

## The "Compromised" Solution: Markdown

::: {.callout-note icon="false"}
### Markdown

Markdown is a lightweight **markup language** for creating formatted text using a **plain-text**[^1] editor.

-   A Markdown file comes with the extension of `.md`.
:::

[^1]: **Plain text file means you can edit the file with any text editor such as Notepad or TextEdit.**

> A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions.

`r quote_footer("- John Gruber")`

## Implementations of Markdown

-   There are multiple variants of the language
    -   Strict (original version)
    -   Github
    -   Reddit
    -   Stack Exchange
    -   R
-   Each variant has its own features that may not be compatible with others.
    -   Analogous to the difference between British and American English

## What is R Markdown

R Markdown is a member of the Markdown family. You can use a single R Markdown file to both

-   execute and save R code
-   generate high quality reports that can be shared with an audience

A R Markdown file is a **plain text file** that has the extension `.Rmd`.

## Internal Workflow in R

```{r, echo=FALSE,out.width="100%", fig.align='center'}
  include_graphics(path = "images/class3_RMarkdownWorkflow.png")
```

1.  R Markdown feeds the .Rmd file to `knitr`
2.  `knitr` executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output.
3.  The .md markdown file generated by `knitr` is then processed by `Pandoc`, which is responsible for creating the finished format (e.g., PDF, html, notebook, etc.).

This may sound complicated, but R Markdown makes it extremely simple by encapsulating all of the above processing into a single click of "knit" button.

## Installation of R Markdown Packages

Use `pacman::p_load()` to manage R packages

-   put the packages names in the parenthesis, separated by commas
-   if the package is not yet installed, `pacman::p_load` will first install it and then load it
-   if the package is already installed, `pacman::p_load` will simply load the package

```{r}
# `knitr`: convert R code to Markdown
pacman::p_load(knitr)

# `rmarkdown`: convert markdown to PDF, html, etc.
pacman::p_load(rmarkdown)

# `bookdown`: further enhancement for better aesthetics
pacman::p_load(bookdown,kableExtra)
```

### Or in one step:

```{r}
pacman::p_load(knitr,rmarkdown,bookdown,kableExtra)
```

## A Closer look at the Interface

```{r, echo=FALSE,out.width="85%",fig.align = 'center'}
include_graphics(path = "images/class3_RMarkdownScreenshot.png")
```

1.  An YAML header surrounded by **3** endashes
2.  R code chunks surrounded by **3** backquotes
3.  Text with Markdown syntax

## Code Chunks

-   R code chunk (run data analytics code)

```{r, echo=FALSE,out.width="80%", fig.align='center'}
  include_graphics(path = "images/class3_RCodeChunk.png")
```

## Code Chunks: How to Insert

You can quickly insert chunks like these into your file with

-   the keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I)
-   the Add Chunk icon (green +C icon) in the editor toolbar

When you knit your .qmd file, R Markdown will run each code chunk and embed the results beneath the code chunk in your final report.

## Code Chunks: Options

**You can set up the options of output**

1.  globally in the setup code chunk
2.  locally in each code chunk using `#|` (with a space)

**Common options include:**

-   `include = false`: no code, no result
    -   R Markdown still runs the code in the chunk, and the results can be used by other chunks.
-   `echo = false`: no code, with result
    -   This is a useful way to embed figures.
-   `message = false`: no message
-   `warning = false`: no warnings
-   `error = true`: if there is an error, continue

## Inline Code

Code results can be inserted inline by wrapping the code with `` `r ` ``.

For example, try `` `r inline_expr("1+1")` ``

-   you will just get a single number `r 1+1`

```{r, echo=FALSE,out.width="100%", fig.align='center'}
  include_graphics(path = "images/class3_inlinecode.png")
```

-   very useful when you want the numbers in your report to be dynamic; you can use a variable to represent that value

## Text with Markdown Syntax

Now, let's look at how to write the "Markdown" language to format the text.

::: columns
::: {.column witdh="45%"}
-   Headers
-   Lists
-   Links
-   Images
-   Block quotes
-   [Latex equations](https://www.docx2latex.com/tutorials/Mathematical-equations-LaTeX.html/) ([Mathpix](https://mathpix.com))
-   Horizontal rules
:::

::: {.column width="5%"}
Â 
:::

::: {.column width="45%"}
-   Tables
-   Footnotes
-   Italicized text
-   Bold text
-   Superscripts
-   Subscripts
:::
:::

\

Let's move on to the **R Markdown Reference Guide** to see the most used R Markdown syntax.

For a systematic training, please refer to [**R Markdown: The Definitive Guide**](https://bookdown.org/yihui/rmarkdown/)
