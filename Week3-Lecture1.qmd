---
author: Dr Wei Miao
date: "`r (lubridate::ymd('20221006')+lubridate::dweeks(2))|> format('%a, %b %d %Y')`"
institute: UCL School of Management
title: "Class 5 Data Wrangling with R (Part II)"
df-print: kable
colorlinks: true
code-line-numbers: true
format:
  html: 
    toc: true
    number-sections: true
    page-layout: full
    toc-depth: 2
    code-line-numbers: true
    code-copy: hover
  beamer: 
    toc: false
    toc-title: ""
    slide-level: 2
    section-titles: true
    theme: Frankfurt
    colortheme: beaver
    fonttheme: structurebold
    navigation: horizontal
    tbl-colwidths: auto
    fontsize: 9pt
knitr:
  opts_chunk:
    echo: true
    warning: true
    message: true
    error: true
execute: 
  freeze: auto
editor_options: 
  chunk_output_type: inline
---

# Data Wrangling

## More Convenient Package Management Using `pacman`

```{r}
pacman::p_load(dplyr,ggplot2)
```

-   Please install `pacman` on your RStudio

-   `pacman`'s functionality

    -   Load all packages stated in the parantheses, seperated by commas

    -   If the package is not downloaded yet, download it, and then load it

-   R tip: if you want to use a function without loading the whole package, you can use two colons to call the function: `pacakge::function`

## Recap: filter()

-   **`filter(dataset, criteria)`**: pick observations by their values

![](images/filter.png){fig-align="center" width="300"}

-   **`arrange(dataset,variable)`**: reorder the rows

-   **`mutate(dataset, newvariable = )`**: create new variables with functions of existing variables

![](images/mutate.png){fig-align="center" width="300"}

-   pipe operator: `%>%`

## Select Variables: `select`

-   `select()` can select variables into a smaller dataset.

```{r}
# Select two columns: hp and cyl
mtcars%>%
  select(hp, cyl) %>%
  head()
```

## Aggregation by Groups: `group_by`

-   `group_by()` allows us to aggregate data by group and compute statistics for each group

```{r}
#| eval: false
# group by cyl
mtcars %>%
  group_by(cyl) 
```

-   Although nothing seemingly happens to the dataset, internally, the dataset is already grouped based on the specified variable(s).

![](images/group_by.png){fig-align="center" width="300"}

## Aggregation by Groups: `group_by() + summarise()`

-   `summarise()` creates a new data frame after aggregating data. The final dataset

    -   has one row for each pair of grouping variables (for each `cyl` value)

    -   contains one column for each grouping variable (`cyl`)

    -   contains one column for each new summarised variable (`avg_mp`)

```{r}
# compute the average mpg for each cyl group
mtcars %>%
  group_by(cyl) %>% # group by cyl
  summarise(avg_mp = mean(mpg)) %>% # compute the average mpg
  ungroup()
```

## Aggregation by Groups: `group_by() + summarise()`

-   We can have multiple group variables for `group_by`

```{r}
#| eval: false
# compute the average mpg for each cyl,vs group
mtcars %>%
  group_by(cyl,vs) %>% # group by cyl
  summarise(avg_mp = mean(mpg)) %>% # compute the average mpg
  ungroup()
```

## Aggregation by Groups: `group_by() + mutate()`

-   Try the following code by replacing `summarise()` with `mutate()`, what do you get now?

::: {.content-visible when-format="beamer"}
```{r}
#| eval: false
#| 
# compute the average mpg for each cyl,vs group
mtcars %>%
  group_by(cyl,vs) %>% # group by cyl
  mutate(avg_mp = mean(mpg)) %>% # compute the average mpg
  ungroup()
```
:::

::: {.content-visible when-format="html"}
```{r}
#| eval: true
# compute the average mpg for each cyl,vs group
mtcars %>%
  group_by(cyl,vs) %>% # group by cyl
  mutate(avg_mp = mean(mpg)) %>% # compute the average mpg
  ungroup()
```
:::

-   A new column is added to the original dataset, the value of which is from group-by aggregation.

## Consolidate Multiple Databases

-   When consolidating databases, we usually have 4 types of dataset joining/merging/consolidation

![](images/class4_DataJoin.png){fig-align="center" width="250"}

## left_join

-   `left_join` keeps everything from the left data frame and matches as much as it can from the right data frame.

    -   All IDs **in the left data frame** will be retained
    -   If a match can be found, value from the right data frame will be filled in
    -   If a match cannot be found, a missing value will be filled in

```{r}
#| eval: false
# Method 1 without pipe operator
left_join(df_left, df_right, by = 'ID')
# Method 2 with pipe operator
df_left %>%
  left_join(df_right, by = 'ID')
```

![](images/left_join.png){fig-align="center" width="200"}

## inner_join

-   `inner_join` only keeps the observations that appear in both data frames
    -   Only common IDs **in both data frames** will be retained

    -   If a match can be found, values will be filled in from both data frames

```{r}
#| eval: false
# Method 1 without pipe operator
inner_join(df_left, df_right, by = 'ID')
# Method 2 with pipe operator
df_left %>%
  inner_join(df_right, by = 'ID')
# Method 3: order of data frames should not matter. Why?
df_right %>%
  inner_join(df_left, by = 'ID')
```

![](images/inner_join.png){fig-align="center" width="200"}

## full_join

-   `full_join` keeps all observations from both data frames
    -   All IDs **in either data frames** will be retained

    -   If a match can be found, values will be filled in from both data frames

```{r}
#| eval: false
# Method 1 without pipe operator
full_join(df_left, df_right, by = 'ID')
# Method 2 with pipe operator
df_left %>%
  full_join(df_right, by = 'ID')
# Method 3: order of data frames should not matter. Why?
df_right %>%
  full_join(df_left, by = 'ID')
```

![](images/full_join.png){fig-align="center" width="200"}

# Data Cleaning

## Variable Types

-   Non-metric

    -   Categorical (gender, region, brand, religion)

    -   Ordinal (Business Week rankings, NCAA rankings)

-   Metric

    -   Continuous (age, height, sales, rainfall)

-   Different types of variables are handled in different ways in statistics

    -   Can talk about an average age, but not an average color

    -   Some statistical techniques only work with one type of variable

-   The same variable can be

## Missing Values 

-   In R, missing values are represented by the symbol `NA` (i.e., *not available*).

-   Most statistical models cannot handle missing values, so we need to deal with them in R.

    -   Few missing values: remove them from analysis.

    -   Many missing values: need to replace them with appropriate values: mean/median/[imputation](https://www.r-bloggers.com/2021/04/handling-missing-values-in-r/)

## Outliers

-   In statistics, an outlier is a data point that differs significantly from other observations.

    -   Few outliers: remove them from analysis

    -   Many outliers: [winsorize](https://en.wikipedia.org/wiki/Winsorizing) data

    -   **If the distribution of a variable is not normal distribution, we often log transform variables to mitigate outlier issues**

# Descriptive Analytics

## Two Major Tasks of Descriptive Analytics

1.  **Describe data depending on your business purpose**

    -   "How much do our customers spend each month on average?"

    -   "What percentage of our customers are unprofitable?"

    -   "What is the difference between the retention rates of men and women?"

2.  **Make statistical inferences from data**

    -   "Based on our sample, does the difference between the spendings of men and women indicate that men and women respond differently in the customer base at large?"

    -   "Based on our sample, can we conclude that customers who sign up for online banking are more profitable than customers who do not?"

    -   "Based on our test mailing, can we conclude that ad-copy A works better than ad-copy B?"

-   You can think of descriptive analytics as **creating a dashboard** to display the key information you would like to know for your business.

## Summary Statistics

-   In descriptive analytics, **summary statistics** are used to summarize a set of observations, in order to communicate the largest amount of information as simply as possible.

-   There are two main types of summary statistics used in evaluation: **measures of central tendency** and **measures of dispersion**.
    -   Measures of central tendency provide different versions of the average, including the mean, the median, 25 percentile, 75 percentile, the mode, etc.

    -   Measures of dispersion provide information about how much variation there is in the data, including the range and the standard deviation.

-   It's good to include summary statistics table in your dissertation before any statistical analysis!
    -   Commonly reported summary statistics include *mean*, *standard deviation*, *number of observations*, *min*, *25 percentile*, *median*, *75 percentile*, and *max*.

    -   Then describe the distribution of the variable, dispersion of the variable, etc.

## Summary Statistics with R

-   In R, a nice package to report summary statistics is `modelsummary`. `datasummary_skim()` is a shortcut to conduct basic summary statistics

-   For more features, refer to the package tutorial [here](https://vincentarelbundock.github.io/modelsummary/articles/datasummary.html), especially `datasummary()` function.

    -   `datasummary_skim()` is a special case of more general `datasummary()`, which outputs a pre-determined set of summary statistics

::: {.content-visible when-format="beamer"}
```{r}
#| eval: false
pacman::p_load(modelsummary)
mtcars %>% 
  datasummary_skim()
```
:::

::: {.content-visible when-format="'html'"}
```{r}
pacman::p_load(modelsummary)
mtcars %>%
  datasummary_skim()
```
:::

## Correlation Matrix

-   Correlation matrix helps us understand the co-movement of any two variables in the data

-   `datasummary_correlation()` reports the pairwise correlation coefficient

-   In general, in a statistical model, variables of high correlation should not be included together, which leads instability

::: {.content-visible when-format="beamer"}
```{r}
#| eval: false
mtcars %>%
  datasummary_correlation()
```
:::

::: {.content-visible when-format=""}
```{r}
#| eval: true
mtcars %>%
  datasummary_correlation()
```
:::

# Preliminary Customer Analysis

-   Spend 30 min-ish to work on the case study in a group.

-   There are 7 questions in total. At the end of the discussion, each group selects a group leader to answer one question

-   To show your codes, join the Zoom link under "Module Overview" on Moodle.

-   The group that did not answer correctly needs to do a performance next week!
