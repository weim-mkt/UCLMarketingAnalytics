---
title: "Apple Case Study"
author: "Wei Miao"
institute: UCL School of Management
df-print: kable
colorlinks: true
code-line-numbers: true
format:
  html: 
    toc: true
    number-sections: true
    page-layout: full
    toc-depth: 2
    code-line-numbers: true
    code-copy: hover
    number-depth: 1
knitr:
  opts_chunk:
    echo: true
    warning: true
    message: true
    error: true
---

# Pre-class exercise from last week

## Question 1

Create a sequence of {1,1,2,2,3,3,3}.

```{r}

# write your code here


```

## Question 2

Create a geometric sequence {2,4,8,16,32} using seq().

hint: this is a geometric sequence. We have learned that with seq() we can generate an arithmetic sequence. Therefore, the key to solving the question is how you can link a geometric sequence with a arithmetic sequence.

```{r}
# write your code here

```

## Question 3

Create a vector of 10 numbers from 1 to 10, and extract the 2nd, 4th, and 6th elements.

```{r}
# create a vector of 10 numbers from 1 to 10

x <- 

# extract the 2nd, 4th, and 6th elements


```

## Question 4

Create a vector of 5 numbers from 1 to 5, and check if 3 is in the vector.

```{r}

# create a vector of 5 numbers from 1 to 5

x <- 

# check if 3 is in the vector

```

## Question 5

Now the interest rate is 0.1, and you have 1000 pounds in your bank account. Calculate the amount in your bank account after 1 year, 2 years, and 3 years, respectively.

```{r}

# write your code here

interest_rate <- 


  
```

# Apple Case

Based on the information in the case, we first translate the necessary background information into the following R objects.

::: callout-tip
### Assigning Operations

-   When assigning values to variables, the operation will NOT print the values of the new variable

-   If you would like to check the variable is created with the correct value, you can

    -   check its value in the RStudio Environment on the right hand side

    -   in a new line, type the variable name: this is to ask R to print out the value of the object
:::

```{r}

# assign the information you found in the case study to the variables below

# retail price of iphone 16 in pounds
price <- 599
    
# sales quantity in million units
quantity <-

# cost of goods sold in percentage
COGS <- 

# Research and Development costs in million pounds
RD_costs <- 

# endorsement fee in million pounds
endorsement_fee <-  

# sales increase percentage due to endorsement
endorsement_sales_increase <- 

```

### Question 2

**Compute the contribution margin per unit**

```{r}
# Create a variable called contribution_margin from price and COGS
# Use variables but not the raw numbers. --- Why?

# Following the definition of contribution margin per unit: price - cost

contribution_margin <-
```

### Question 3

**Based on the information at hand, should Tom approve the influencer marketing plan?**

To decide whether Tom should approve the marketing plan, we need to conduct break-even analyses.

The first step is to compute the break-even quantity, as shown in the following code.

```{r}
# numerator is the marketing expense
# denominator is the "extra profit", or the contribution margin, from selling one more unit

BEQ <-

BEQ

```

**Break even quantity** is the **incremental quantity sales** needed in order to neither lose money nor make money from the marketing campaign, hence the name "break-even". This is like the safe line the campaign must reach.

::: callout-tip
## Sales

In this module (and in practice), when we talk about sales, we mean the **quantity sales**, the number of units sold. For instance, in the case study, the original sales without influencer marketing is `r quantity` million units.

The total **money** made is often called **revenue or revenue sales.** For instance, in the case study, the original revenue is `r price * quantity` million pounds.
:::

The next step is to compare BEQ with the estimated incremental sales from the campaign.

BEQ is ?? million units, which is smaller than incremental sales is ?? million units. It means, to not lose any money, the influencer marketing campaign needs to bring in additional ?? million units, but in reality, the company can actually sell better at ?? million, so it's profitable to continue with the influencer marketing campaign.

Therefore, based on the above reasoning, Tom should approve the influencer marketing campaign.

### Question 4

1.  Compute the sequence of monthly cash flows

-   First, we compute the incremental sales percentage for each month, relative to the base sales. This is a 12-element vector, each element representing the incremental sales percentage.

```{r}
incremental.sales.percentage_1stmonth <- 0.003

# use rep() to replicate the same value for 11 times
incremental.sales.percentage_next11months <-
```

```{r}
# check the values are correct
incremental.sales.percentage_1stmonth

incremental.sales.percentage_next11months
```

```{r}
# use c() to combine the 2 vectors into a 12-month vector
vector_incremental.sales.percentage_12months <- c(incremental.sales.percentage_1stmonth, incremental.sales.percentage_next11months)

vector_incremental.sales.percentage_12months

```

-   Next, we time the incremental sales percentage with quantity, to get the incremental sales in terms of units each month.

```{r}

# remember that, R is vectorized; so each element of percentage vector is multiplied with quantity, to get a quantity vector

vector_incremental.sales.units_12months <- vector_incremental.sales.percentage_12months * quantity

vector_incremental.sales.units_12months

```

-   Lastly, we multiply the incremental quantity sales with the contribution margin per unit, to get the total contribution margins (incremental profits) for each month, i.e., the CF

```{r}
vector_CF <- vector_incremental.sales.units_12months * contribution_margin

vector_CF
```

2.  Compute the sequence of discount factors for **each month**

```{r}
# divide annual wacc to get monthly wacc
k <- 0.1 / 12

# discount factor is 1 over k
discount_factor <- 1 / (1 + k)

# Generate a geometric sequence vector of discounted CFs for 12 months

vector_discount_factor <- discount_factor^c(1:12)

vector_discount_factor
```

3.  Compute the NPV

-   Multiply CF vector with discount factor vector, to get the discounted CF vector

```{r}

vector_discounted.CF <- vector_CF * vector_discount_factor

vector_discounted.CF


```

-   use function `sum()` to get the sum of all elements in a vector. That is, the sum of discounted cash flows in all 12 months.

```{r}
sum(vector_discounted.CF)
```

-   We need to subtract the endorsement fee, which is the marketing expense, to get the next present value

```{r}
NPV <- sum(vector_discounted.CF) - endorsement_fee
NPV
```