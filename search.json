[
  {
    "objectID": "R-RStudioSetup.html",
    "href": "R-RStudioSetup.html",
    "title": "RStudio Setup",
    "section": "",
    "text": "In this guide, I will walk you through the recommended setup for RStudio. Please follow the steps below to configure your RStudio settings. For the settings that are not mentioned here, you can keep the default settings or adjust them according to your preference.",
    "crumbs": [
      "R Tutorials",
      "RStudio Setup"
    ]
  },
  {
    "objectID": "R-RStudioSetup.html#basic",
    "href": "R-RStudioSetup.html#basic",
    "title": "RStudio Setup",
    "section": "1.1 Basic",
    "text": "1.1 Basic\n\nUntick Restore most recently opened project at startup: This will prevent RStudio from opening the last project you worked on when you open RStudio.\nUntick Restore previously open source documents at startup: This will prevent RStudio from opening the last script you worked on when you open RStudio.\nUntick Restore .RData into workspace at startup: This will prevent RStudio from loading the last workspace when you open RStudio.\nTick Always save history (even when not saving .RData): This will save the history of your R commands even if you do not save the workspace.\n\n\n\n\nGeneral-Basic",
    "crumbs": [
      "R Tutorials",
      "RStudio Setup"
    ]
  },
  {
    "objectID": "R-RStudioSetup.html#editing",
    "href": "R-RStudioSetup.html#editing",
    "title": "RStudio Setup",
    "section": "2.1 Editing",
    "text": "2.1 Editing\n\nTick and untick the options here based on the screenshot below.\n\n\n\n\nCode",
    "crumbs": [
      "R Tutorials",
      "RStudio Setup"
    ]
  },
  {
    "objectID": "R-RStudioSetup.html#display",
    "href": "R-RStudioSetup.html#display",
    "title": "RStudio Setup",
    "section": "2.2 Display",
    "text": "2.2 Display\n\nTick and untick the options here based on the screenshot below. This section controls how your code is displayed in RStudio.\n\n\n\n\nCode",
    "crumbs": [
      "R Tutorials",
      "RStudio Setup"
    ]
  },
  {
    "objectID": "R-RStudioSetup.html#completion",
    "href": "R-RStudioSetup.html#completion",
    "title": "RStudio Setup",
    "section": "2.3 Completion",
    "text": "2.3 Completion\n\nTick and untick the options here based on the screenshot below. This section controls the code completion settings in RStudio.\n\n\n\n\nCode",
    "crumbs": [
      "R Tutorials",
      "RStudio Setup"
    ]
  },
  {
    "objectID": "R-RStudioSetup.html#basic-1",
    "href": "R-RStudioSetup.html#basic-1",
    "title": "RStudio Setup",
    "section": "4.1 Basic",
    "text": "4.1 Basic\n\nTick and untick the options here based on the screenshot below. This section controls the R Markdown settings in RStudio.\n\n\n\n\nCode",
    "crumbs": [
      "R Tutorials",
      "RStudio Setup"
    ]
  },
  {
    "objectID": "R-RStudioSetup.html#visual",
    "href": "R-RStudioSetup.html#visual",
    "title": "RStudio Setup",
    "section": "4.2 Visual",
    "text": "4.2 Visual\n\nTick and untick the options here based on the screenshot below. This section controls the visual settings in RStudio.\n\n\n\n\nCode",
    "crumbs": [
      "R Tutorials",
      "RStudio Setup"
    ]
  },
  {
    "objectID": "R-Exercise.html",
    "href": "R-Exercise.html",
    "title": "Weekly R Exercise",
    "section": "",
    "text": "1 Induction Week\n\nQuestion 1Answer\n\n\nCreate a sequence of {1,1,2,2,3,3,3}.\n\n\n\n\nCode\n# solution 1\n\nc(1, 1, 2, 2, 3, 3, 3)\n\n\n[1] 1 1 2 2 3 3 3\n\n\nCode\n# solution 2\n\nc(rep(1, 2), rep(2, 2), rep(3, 3))\n\n\n[1] 1 1 2 2 3 3 3\n\n\n\n\n\n\nQuestion 2Answer\n\n\nCreate a geometric sequence {2,4,8,16,32} using seq().\n\n\nWe can see that the sequence is a geometric sequence with a common ratio of 2.\n\nThe seq() function generates a sequence from 1 to 5 with a step of 1.\n\n\n\nCode\n# solution\n\nseq(1, 5, 1) # this generates a sequence from 1 to 5 with a step of 1\n\n\n[1] 1 2 3 4 5\n\n\n\nThe ^ operator calculates the power of 2 raised to the power of the sequence generated by seq(). Remember that R is vectorized, so the ^ operator will apply to each element in the sequence.\n\n\n\nCode\n# solution\n\n2^seq(1, 5, 1) # this generates a geometric sequence {2^1, 2^2, 2^3, 2^4, 2^5}\n\n\n[1]  2  4  8 16 32\n\n\n\n\n\n\nQuestion 3Answer\n\n\nCreate a vector of 10 numbers from 1 to 10, and extract the 2nd, 4th, and 6th elements.\n\n\n\n\nCode\n# solution\n\nx &lt;- 1:10 # create a vector of 10 numbers from 1 to 10\n\nx[c(2, 4, 6)] # use [] to extract the 2nd, 4th, and 6th elements\n\n\n[1] 2 4 6\n\n\n\n\n\n\nQuestion 4Answer\n\n\nCreate a vector of 5 numbers from 1 to 5, and check if 3 is in the vector.\n\n\n\n\nCode\n# solution\n\nx &lt;- 1:5 # create a vector of 5 numbers from 1 to 5\n\n3 %in% x # check if 3 is in the vector\n\n\n[1] TRUE\n\n\n\n\n\n\nQuestion 5Answer\n\n\nNow the interest rate is 0.1, and you have 1000 pounds in your bank account. Calculate the amount in your bank account after 1 year, 2 years, and 3 years, respectively.\n\n\nFirst, set the interest rate to 0.1 and the initial amount to 1000.\nThen, calculate the amount in your bank account after 1 year, 2 years, and 3 years, respectively.\nSince the interest is compounded annually, the formula is:\n[ A = P(1 + r)^n ]\nwhere:\n\n(A) is the amount in your bank account after (n) years\n(P) is the initial amount\n(r) is the interest rate\n(n) is the number of years\n\n\n\nCode\n# solution\n\ninterest_rate &lt;- 0.1 # set the interest rate to 0.1\n\ninitial_amount &lt;- 1000 # set the initial amount to 1000\n\n# calculate the amount in your bank account after 1 year, 2 years, and 3 years, respectively\n\n# generate the geometric sequence from 1 to 3 years\n\ninitial_amount * (1 + interest_rate)^(1:3) # use the formula A = P(1 + r)^n\n\n\n[1] 1100 1210 1331",
    "crumbs": [
      "Lectures",
      "Weekly R Exercise"
    ]
  },
  {
    "objectID": "Syllabus.html",
    "href": "Syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Module leader: Dr. Wei Miao [pronounced as “Way Meow”] [personal website]\nEmail: wei.miao@ucl.ac.uk\nTeaching assistants\n\nKayi Yeung, ka.yeung.21@ucl.ac.uk (UCL MSc BA 2022)\nJiafan Lu, jiafan.lu@ucl.ac.uk (UCL PhD Management 2022)",
    "crumbs": [
      "Lectures",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#if-you-have-questions-about-the-lecture-first-check-the-teams-channel",
    "href": "Syllabus.html#if-you-have-questions-about-the-lecture-first-check-the-teams-channel",
    "title": "Syllabus",
    "section": "4.1 If you have questions about the lecture, first check the Teams channel",
    "text": "4.1 If you have questions about the lecture, first check the Teams channel\nWe will use Microsoft Teams for the module. Please utilize the Microsoft Teams Q&A channels as an interactive place for peer learning.\nSince some of your questions may have been asked by your peers, for any questions, please first check the MS Teams channel and see if the questions are already posted and answered there. If not, please post your questions in the Teams channels. The teaching team will monitor the questions posted on Teams and provide answers accordingly.",
    "crumbs": [
      "Lectures",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#if-you-have-more-questions-and-would-like-to-use-office-hours-make-an-appointment",
    "href": "Syllabus.html#if-you-have-more-questions-and-would-like-to-use-office-hours-make-an-appointment",
    "title": "Syllabus",
    "section": "4.2 If you have more questions and would like to use office hours, make an appointment",
    "text": "4.2 If you have more questions and would like to use office hours, make an appointment\nYou can also ask questions during office hours hosted by me or teaching assistants during term time.\nTo make an appointment, use the link below. The links are also available under “Module Overview” Section on Moodle. Note that you need to log in with your UCL email account to make an appointment.\n\nFor lecture-related questions, please make an appointment with Wei here.\nFor R trouble-shooting, please make an appointment with teaching assistants here",
    "crumbs": [
      "Lectures",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#footnotes",
    "href": "Syllabus.html#footnotes",
    "title": "Syllabus",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJust a little heads up -- unlike undergrad marketing modules where you mainly learn marketing strategies and concepts, this module focuses on “analytics” (which comes first) and its application in “marketing” (which comes next). So, be prepared to learn a lot of data wrangling, machine learning, and causal inference tools in this module.↩︎",
    "crumbs": [
      "Lectures",
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is the online supplement to the MSIN0094 Marketing Analytics Module for the MSc Business Analytics program at UCL School of Management.\nFor more information about me and my research, please refer to my personal website."
  },
  {
    "objectID": "WeeklyArrangements.html",
    "href": "WeeklyArrangements.html",
    "title": "Weekly Arrangements",
    "section": "",
    "text": "This page provides a detailed weekly arrangement for the module. You can find the pre-class preparation, in-class topics, and after-class exercises for each week here.\nSince marketing is evolving rapidly, we will cover a wide range of topics in this module. I’m also updating the contents each year to keep up with the latest trends in marketing analytics. Therefore, remember to check this page each week before class to ensure you are well-prepared for the lecture and case study workshop.\n\n\nEach week, you are required to complete pre-class preparation tasks.\nThe preparation usually includes reading case studies, watching videos, or completing coding exercises.\nYou can find the pre-class preparation under each week’s topic in this guide and on Moodle.\nIt’s mandatory to finish the pre-class preparation for best learning outcomes. Otherwise, you may find it hard to follow the lecture and case study workshop.\n\n\n\nWe will have a 3-hour session on each Wednesday for 10 weeks.\nEach week, I will cover a new analytics tool, followed by a case study workshop for you to practice the new technique. This way, you can further reflect on your understanding of the technique by practicing your skills with a real-life application.\nFor instance, in week 1 and week 2, I will first introduce the concepts of marketing and marketing process, and then will cover the concept of break-even analysis, net present value, customer lifetime value (CLV) and how to compute CLV with R. We will then solve a case study that helps you practice your knowledge of CLV, so you can understand how to use CLV for better marketing decisions in your future projects/jobs.\nSimilarly for the rest of the weeks, we will cover a new analytics tool and then practice it with a case study.\n\n\n\nAfter each week’s lecture, you will find a list of After-class reading and exercises. Some are essential, while others are optional.\n\nEssential: contents and R exercises core to this week’s materials. All pre-class preparations are expected to be completed.\nOptional: supplemental readings for those interested in learning more about the topic.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#before-the-lecture",
    "href": "WeeklyArrangements.html#before-the-lecture",
    "title": "Weekly Arrangements",
    "section": "",
    "text": "Each week, you are required to complete pre-class preparation tasks.\nThe preparation usually includes reading case studies, watching videos, or completing coding exercises.\nYou can find the pre-class preparation under each week’s topic in this guide and on Moodle.\nIt’s mandatory to finish the pre-class preparation for best learning outcomes. Otherwise, you may find it hard to follow the lecture and case study workshop.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#during-the-lecture",
    "href": "WeeklyArrangements.html#during-the-lecture",
    "title": "Weekly Arrangements",
    "section": "",
    "text": "We will have a 3-hour session on each Wednesday for 10 weeks.\nEach week, I will cover a new analytics tool, followed by a case study workshop for you to practice the new technique. This way, you can further reflect on your understanding of the technique by practicing your skills with a real-life application.\nFor instance, in week 1 and week 2, I will first introduce the concepts of marketing and marketing process, and then will cover the concept of break-even analysis, net present value, customer lifetime value (CLV) and how to compute CLV with R. We will then solve a case study that helps you practice your knowledge of CLV, so you can understand how to use CLV for better marketing decisions in your future projects/jobs.\nSimilarly for the rest of the weeks, we will cover a new analytics tool and then practice it with a case study.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#after-the-lecture",
    "href": "WeeklyArrangements.html#after-the-lecture",
    "title": "Weekly Arrangements",
    "section": "",
    "text": "After each week’s lecture, you will find a list of After-class reading and exercises. Some are essential, while others are optional.\n\nEssential: contents and R exercises core to this week’s materials. All pre-class preparations are expected to be completed.\nOptional: supplemental readings for those interested in learning more about the topic.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-1-module-introduction",
    "href": "WeeklyArrangements.html#class-1-module-introduction",
    "title": "Weekly Arrangements",
    "section": "Class 1: Module Introduction",
    "text": "Class 1: Module Introduction\n\nWhat you will learn\n\nAn overview of the course topics\nConcepts of marketing and the marketing process (5Cs, STP, and 4Ps)\nHow marketing analytics can empower marketers in the digital era\n\nAfter-class reading and exercise\n\n(optional) The Definitive Guide to Strategic Marketing Planning. Highly recommended if you didn’t take marketing undergrad courses and would like to know more about the conventional marketing process.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-2-profitability-analysis",
    "href": "WeeklyArrangements.html#class-2-profitability-analysis",
    "title": "Weekly Arrangements",
    "section": "Class 2: Profitability Analysis",
    "text": "Class 2: Profitability Analysis\n\nWhat you will learn\n\nHow to conduct break-even quantity for a marketing proposal\nHow to conduct net present value analysis for a marketing proposal",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-3-customer-lifetime-value",
    "href": "WeeklyArrangements.html#class-3-customer-lifetime-value",
    "title": "Weekly Arrangements",
    "section": "Class 3: Customer Lifetime Value",
    "text": "Class 3: Customer Lifetime Value\n\nWhat you will learn\n\nThe concept of customer lifecycle and customer lifetime value (CLV)\nHow to compute customer acquisition costs (CAC)\nHow to compute customer lifetime value (CLV)",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-4-case-study-customer-lifetime-value-for-guiding-marketing-decisions",
    "href": "WeeklyArrangements.html#class-4-case-study-customer-lifetime-value-for-guiding-marketing-decisions",
    "title": "Weekly Arrangements",
    "section": "Class 4: (Case Study) Customer Lifetime Value for Guiding Marketing Decisions",
    "text": "Class 4: (Case Study) Customer Lifetime Value for Guiding Marketing Decisions\n\nWhat you will learn\n\nHow to apply CLV calculation in a real-life case study\nDiscuss how CLV can be used by marketers to guide marketing decisions\n\nAfter-class reading and exercise\n\nAfter-class exercise for Week 2\n(optional) “Hubspot: How to compute CLV”. This article introduces alternative ways to compute CLV, which are used in many companies.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-5-data-wrangling-with-r-part-i",
    "href": "WeeklyArrangements.html#class-5-data-wrangling-with-r-part-i",
    "title": "Weekly Arrangements",
    "section": "Class 5: Data Wrangling with R: Part I",
    "text": "Class 5: Data Wrangling with R: Part I\n\nWhat you will learn\n\nProcess of a typical data analytics project (such as your term 3 dissertation)\nHow to use filter, mutate, arrange, and group_by for data manipulation with dplyr package in R\n\nAfter-class reading and exercise\n\n(essential) Cheatsheet for dplyr\n(optional) Python Pandas vs. R Dplyr. In David’s class, you will learn how to use Python Pandas for data wrangling later this term. This cheat sheet provides a side-to-side comparison of the two libraries for your reference.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-6-data-wrangling-for-descriptive-analytics",
    "href": "WeeklyArrangements.html#class-6-data-wrangling-for-descriptive-analytics",
    "title": "Weekly Arrangements",
    "section": "Class 6: Data Wrangling for Descriptive Analytics",
    "text": "Class 6: Data Wrangling for Descriptive Analytics\n\nWhat you will learn\n\nHow to use dplyr to conduct preliminary customer analyses\nHow to use dplyr to conduct RFM analysis",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-7-unsupervised-learning-for-customer-segmentation",
    "href": "WeeklyArrangements.html#class-7-unsupervised-learning-for-customer-segmentation",
    "title": "Weekly Arrangements",
    "section": "Class 7: Unsupervised Learning for Customer Segmentation",
    "text": "Class 7: Unsupervised Learning for Customer Segmentation\n\nWhat you will learn\n\nThe concept of predictive analytics\nThe difference between supervised and unsupervised learning\nImportant concepts in predictive analytics\nConcept of unsupervised learning\nHow to run K-means clustering in R\n\nAfter-class reading and exercise\n\n(optional) K-means Cluster Analysis, which provides more details on the maths behind the K-means clustering",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-8-supervised-learning-basics",
    "href": "WeeklyArrangements.html#class-8-supervised-learning-basics",
    "title": "Weekly Arrangements",
    "section": "Class 8: Supervised Learning Basics",
    "text": "Class 8: Supervised Learning Basics\n\nWhat you will learn\n\nDefinition of supervised learning\nTypes of supervised learning\nFundamental tradeoffs in supervised learning\nOverfitting and underfitting issues and how to overcome them\n\nAfter-class reading and exercise\n\n(optional) Varian, Hal R. “Big data: New tricks for econometrics.” Journal of Economic Perspectives 28, no. 2 (2014): 3-28",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-9-tree-based-machine-learning-models",
    "href": "WeeklyArrangements.html#class-9-tree-based-machine-learning-models",
    "title": "Weekly Arrangements",
    "section": "Class 9: Tree-based Machine Learning Models",
    "text": "Class 9: Tree-based Machine Learning Models\n\nWhat you will learn\n\nIntuition behind decision tree and random forest models\nHow to build random forest models in R\n\nAfter-class reading and exercise\n\n(optional) Decision tree in R and Random forest in R. Both tutorials introduce the detailed maths behind the two models if you would like to learn more\n(optional) Available machine learning model packages in R. In class, we have learned how to use R packages to run random forest models. This link lists all other machine learning packages that can be used in R. You can learn how to use these models following their manuals.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-10-case-study-improve-marketing-efficiency-for-marks-spencer-using-supervised-learning",
    "href": "WeeklyArrangements.html#class-10-case-study-improve-marketing-efficiency-for-marks-spencer-using-supervised-learning",
    "title": "Weekly Arrangements",
    "section": "Class 10: (Case Study) Improve Marketing Efficiency for Marks & Spencer Using Supervised Learning",
    "text": "Class 10: (Case Study) Improve Marketing Efficiency for Marks & Spencer Using Supervised Learning\n\nWhat you will learn\n\nHow to apply supervised learning models (random forest and others) to help Marks & Spencer improve its marketing efficiency",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-11-causal-inference-and-rubins-causal-model",
    "href": "WeeklyArrangements.html#class-11-causal-inference-and-rubins-causal-model",
    "title": "Weekly Arrangements",
    "section": "Class 11: Causal Inference and Rubin’s Causal Model",
    "text": "Class 11: Causal Inference and Rubin’s Causal Model\n\nWhat you will learn\n\nConcept of causal inference\nConcept of Rubin’s potential outcome framework and treatment effects\nWhy randomized experiments (A/B testings) is the gold standard of causal inference\n\nAfter-class reading and exercise\n\n(optional) Varian, Hal R. ‘Causal Inference in Economics and Marketing’. Proceedings of the National Academy of Sciences 113, no. 27 (5 July 2016): 7310–15.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-12-randomized-experiments-and-ab-testing",
    "href": "WeeklyArrangements.html#class-12-randomized-experiments-and-ab-testing",
    "title": "Weekly Arrangements",
    "section": "Class 12: Randomized Experiments and A/B Testing",
    "text": "Class 12: Randomized Experiments and A/B Testing\n\nWhat you will learn\n\nHow to design and conduct randomized experiments\nHow to interpret the results of randomized experiments\nHow to use randomized experiments to solve real-life marketing problems",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-13-case-study-testing-marketing-ideas-using-ab-testings",
    "href": "WeeklyArrangements.html#class-13-case-study-testing-marketing-ideas-using-ab-testings",
    "title": "Weekly Arrangements",
    "section": "Class 13: (Case Study) Testing Marketing Ideas Using A/B Testings",
    "text": "Class 13: (Case Study) Testing Marketing Ideas Using A/B Testings\n\nWhat you will learn\n\nSteps to design and conduct a randomized experiment (A/B testing)\nThe business model of social media platforms\nDesign an A/B testing to solve real-life marketing problems\n\nAfter-class reading and exercise\n\n(optional) Test and learn: How a culture of experimentation can help grow your business",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-14-linear-regression-and-ordinary-least-square",
    "href": "WeeklyArrangements.html#class-14-linear-regression-and-ordinary-least-square",
    "title": "Weekly Arrangements",
    "section": "Class 14: Linear Regression and Ordinary Least Square",
    "text": "Class 14: Linear Regression and Ordinary Least Square\n\nWhat you will learn\n\nReview of concept for Data Generating Process (DGP) and a model\nThe intuition behind coefficient estimation of linear regression models\nHow to run linear regression models in R\nHow to interpret the regression coefficients and statistics\nHow to model non-linear relationship using linear regression\nHow to interpret the coefficients of categorical variables\n\nAfter-class reading and exercise\n\n(optional) Introduction to Econometrics with R, Chapters 4-7. These 4 chapters cover very detailed applied knowledge of linear regressions. Due to limited time, we cannot cover all contents in class, so it would be great if you can take time to go through these chapters thoroughly.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-15-endogeneity",
    "href": "WeeklyArrangements.html#class-15-endogeneity",
    "title": "Weekly Arrangements",
    "section": "Class 15: Endogeneity",
    "text": "Class 15: Endogeneity\n\nWhat you will learn\n\nHow to build linear regression-based marketing mix models to solve pricing and promotion optimization problems\n\nAfter-class reading and exercise\n\nA complete guide to Marketing Mix Modeling",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-16-instrumental-variables",
    "href": "WeeklyArrangements.html#class-16-instrumental-variables",
    "title": "Weekly Arrangements",
    "section": "Class 16: Instrumental Variables",
    "text": "Class 16: Instrumental Variables\n\nWhat you will learn\n\nIntuition of why instrumental variables solve endogeneity problems\nThe two requirements of a valid instrumental variable and how to find good instruments\nApply two-stage least square method to estimate the causal effects using instrumental variables\nApplication of instrumental variables in the marketing and business field\n\nAfter-class reading and exercise\n\n(optional) Econometrics with R: Instrumental Variables Regression",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-17-case-study-estimating-the-treatment-effects-on-the-treated-using-instrumental-variables",
    "href": "WeeklyArrangements.html#class-17-case-study-estimating-the-treatment-effects-on-the-treated-using-instrumental-variables",
    "title": "Weekly Arrangements",
    "section": "Class 17: (Case Study) Estimating the Treatment Effects on the Treated Using Instrumental Variables",
    "text": "Class 17: (Case Study) Estimating the Treatment Effects on the Treated Using Instrumental Variables\n\nWhat you will learn\n\nHow to apply instrumental variables to estimate the treatment effects on the treated\nHow to interpret the results of instrumental variables\nHow to use instrumental variables to solve real-life marketing problems\n\n(highly recommended) Encouragement Designs and Instrumental Variables for A/B Testing at Spotify",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-18-difference-in-differences-design",
    "href": "WeeklyArrangements.html#class-18-difference-in-differences-design",
    "title": "Weekly Arrangements",
    "section": "Class 18: Difference-in-Differences Design",
    "text": "Class 18: Difference-in-Differences Design\n\nWhat you will learn\n\nConcept of difference-in-differences (DiD) design\nEstimation of causal effects using the DiD design\nApplication of DiD design in the business field\n\nAfter-class reading and exercise\n\n(optional) Econometrics with R: Quasi-experiments",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-19-regression-discontinuity-design",
    "href": "WeeklyArrangements.html#class-19-regression-discontinuity-design",
    "title": "Weekly Arrangements",
    "section": "Class 19: Regression Discontinuity Design",
    "text": "Class 19: Regression Discontinuity Design\n\nWhat you will learn\n\nConcept of regression discontinuity design\nEstimation of causal effects using regression discontinuity design\nApplication of regression discontinuity design in the business field",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "WeeklyArrangements.html#class-20-frontiers-of-marketing-analytics",
    "href": "WeeklyArrangements.html#class-20-frontiers-of-marketing-analytics",
    "title": "Weekly Arrangements",
    "section": "Class 20: Frontiers of Marketing Analytics",
    "text": "Class 20: Frontiers of Marketing Analytics\n\nWhat you will learn\n\nCausal machine learning with causal forest\nHeterogeneous treatment effect estimation with causal forest in R\n\nAfter-class reading and exercise\n\nEstimate causal effects using ML by Microsoft Research\nAthey, Susan, and Stefan Wager. ‘Estimating Treatment Effects with Causal Forests: An Application’. ArXiv:1902.07409 [Stat], 20 February 2019. http://arxiv.org/abs/1902.07409.",
    "crumbs": [
      "Lectures",
      "Weekly Arrangements"
    ]
  },
  {
    "objectID": "R-errors.html",
    "href": "R-errors.html",
    "title": "Troubleshooting R",
    "section": "",
    "text": "In this page, I summarize the common issues running R and the troubleshooting tips. If you run into any R issues, please refer to this page as the first step for any solution.",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "R-errors.html#could-not-find-function-error",
    "href": "R-errors.html#could-not-find-function-error",
    "title": "Troubleshooting R",
    "section": "1 ‘could not find function’ Error",
    "text": "1 ‘could not find function’ Error\nThis error arises when (1) an R package is not loaded properly, or (2) due to misspelling of the functions.\nAs you can see in the screenshot below, when we run the code, we get a could not find function “praise” error in the console. This is because we have not loaded the package “praise” to which the praise() function belongs.\n\nWe need to first load the package that contains the function we want to run using library() as shown below:\n\n\nCode\nlibrary(praise)\n\n\nand then use the function praise() to run it error-free.\n\n\nCode\npraise()\n\n\n[1] \"You are fantabulous!\"\n\n\nMeanwhile, if we misspell the praise() function, for instance, to prais(), this will also throw up a could not find function “prais” error.\n\n\nCode\nprais()\n\n\nError in prais(): could not find function \"prais\"",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "R-errors.html#object-not-found-error",
    "href": "R-errors.html#object-not-found-error",
    "title": "Troubleshooting R",
    "section": "2 ‘object not found’ error",
    "text": "2 ‘object not found’ error\nThis error occurs when the particular object used in the code is not yet created or existing in the R environment.\nIn the example below we are trying to compute x plus 4. As you can see, we get an ‘object ’x’ not found’ error as the “x” object is not yet created and missing in our R environment.\n\n\nCode\nx+4\n\n\nError in eval(expr, envir, enclos): object 'x' not found\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\nBased on the missing object, go back to your previous codes and check why the object is missing. Did you forget to create it? Did you accidentally delete it?",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "R-errors.html#banner-packages-xxx-required-but-are-not-installed",
    "href": "R-errors.html#banner-packages-xxx-required-but-are-not-installed",
    "title": "Troubleshooting R",
    "section": "3 Banner: “Packages XXX required but are not installed”",
    "text": "3 Banner: “Packages XXX required but are not installed”\nIf you see this banner in your RStudio in the screenshot, it means RStudio detects some packages mentioned in the R Markdown file or R script but are not yet installed on your computer. So it prompts you for installation.\n\nFor instance, in this case, the error message means, knitr and pacman are found in the .Rmd file, but they are not installed, so RStudio is smart enough to prompt you to install.\n\n\n\n\n\n\nSolution\n\n\n\nJust click install button in the banner. RStudio will install the missing components.",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "R-errors.html#prompt-window-r-packages-not-up-to-date",
    "href": "R-errors.html#prompt-window-r-packages-not-up-to-date",
    "title": "Troubleshooting R",
    "section": "4 Prompt Window: “R packages not up-to-date”",
    "text": "4 Prompt Window: “R packages not up-to-date”\nSince the R packages are being updated every day (just like our mobile apps, there could be bugs so that the developers have to update R packages to fix those bugs), sometimes, though we may have installed some packages, they are too old to run the functions. And you may see this prompted message:\n\nIt means, the aforementioned packages, base64enc, digest, etc. are outdated and must be updated to function.\n\n\n\n\n\n\nSolution\n\n\n\nClick Yes and RStudio will update all the packages for you.",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "R-errors.html#latex-not-found-when-kniting-the-.rmd.qmd-file.",
    "href": "R-errors.html#latex-not-found-when-kniting-the-.rmd.qmd-file.",
    "title": "Troubleshooting R",
    "section": "5 Latex not found when kniting the .rmd/.qmd file.",
    "text": "5 Latex not found when kniting the .rmd/.qmd file.\nIf this is your first time to knit the PDF document, you may see an error message as below:\n\nThe error message has usually told us everything on how to troubleshoot (that’s what an error message is for!).\nIn this screenshot, if you read along, you will find the cause of problem:\n\n[…] LaTex failed to compile,\n\nbecause\n\n[…] No LaTeX installation detected (LaTeX is required to create PDF output).\n\nand the solution is also consideratebly given in this error message:\n\n[…] You should install a LaTeX distribution for your platform: https://www.latex-project.org/get/\n\n\nIf you are not sure, you may install TinyTeX in R: tinytex::install_tinytex()\n\nSo this error message tells us the solution:\n\n\n\n\n\n\nSolution\n\n\n\n\nAlternative solution 1:\nRun the following command in Console\ntinytex::install_tinytex()\nin order to install tinytex, a simplied version of LaTex, on your laptop.\n\n\nAlternative solution 2:\nInstall LaTex on your computer following the R installation guide\n\n\n\nIf you run the command in R Console, you will see that Latex is being installed\n\nAfter this progress bar finishes, you will be able to knit the PDF document!",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "R-errors.html#error-connection-not-found",
    "href": "R-errors.html#error-connection-not-found",
    "title": "Troubleshooting R",
    "section": "6 Error: Connection Not Found",
    "text": "6 Error: Connection Not Found\nConnection Not Found error is usually caused by RStudio being unable to locate your files on your hard disk.\nIf you don’t know how to find the path names for a file on your computer, please refer to\n\nthis link for Windows\n\nthis link for Mac",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "R-errors.html#more-questions",
    "href": "R-errors.html#more-questions",
    "title": "Troubleshooting R",
    "section": "7 More Questions",
    "text": "7 More Questions\nPlease leave a screenshot of error message in the MSTeams channel named “R QnA”. I will keep updating this webpage as more questions come in.",
    "crumbs": [
      "R Tutorials",
      "Troubleshooting R"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html",
    "href": "Week1-Lecture1.html",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "",
    "text": "Hi there, I’m Wei!\nI did my PhD in Quant Marketing at NUS (Singapore) and an undergrad degree in Finance at Fudan (Shanghai)\nI love musical instruments, video games, and food (bubble tea is my soul mate)!\nMy research focuses on digital marketing, sharing economy, and platform design.\n\n\n\n\n\nDetailed weekly arrangements can be found in this link\n\nAdd bookmark for easier reference\n\nEach week, we have a 3-hour lecture on Wednesday, usually with 3 sessions\n\nA short quiz at the beginning of each class to review the previous week’s content\nA methodology session, in which we learn a new data analytics tool\nA case study session, to learn how the newly learned analytics tool can be applied to a real-life business scenario\n\n\n\n\n\n\nNo exams; 3 individual assignments, which are similar to case studies in class, and you will apply what you’ve learned in class to solve real-life marketing analytics problems.\n\n1st assignment, 30% weight, 1500 words, due on Oct 25\n2nd assignment, 30% weight, 1500 words, due on Nov 15\n3rd assignment, 40% weight, 2000 words, due on Dec 13\n\nHow to submit?\n\nPlease ensure submissions are in PDF (preferred) or Word format; submissions in other formats won’t be accepted for marking.\nThe quarto-based answer sheets (qmd files) will be given to you.\n\n\n\nWord count and late submission penalties will be applied by BA admin. For related queries and EC applications, please directly contact BA admin at mgmt.ba-admin@ucl.ac.uk.\nWe have random second marking in place to mitigate marking errors. Please refrain from emailing teaching assistants for re-marking as re-marking is not allowed by school policy.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#about-me",
    "href": "Week1-Lecture1.html#about-me",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "",
    "text": "Hi there, I’m Wei!\nI did my PhD in Quant Marketing at NUS (Singapore) and an undergrad degree in Finance at Fudan (Shanghai)\nI love musical instruments, video games, and food (bubble tea is my soul mate)!\nMy research focuses on digital marketing, sharing economy, and platform design.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#weekly-arrangements",
    "href": "Week1-Lecture1.html#weekly-arrangements",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "",
    "text": "Detailed weekly arrangements can be found in this link\n\nAdd bookmark for easier reference\n\nEach week, we have a 3-hour lecture on Wednesday, usually with 3 sessions\n\nA short quiz at the beginning of each class to review the previous week’s content\nA methodology session, in which we learn a new data analytics tool\nA case study session, to learn how the newly learned analytics tool can be applied to a real-life business scenario",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#assignments",
    "href": "Week1-Lecture1.html#assignments",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "",
    "text": "No exams; 3 individual assignments, which are similar to case studies in class, and you will apply what you’ve learned in class to solve real-life marketing analytics problems.\n\n1st assignment, 30% weight, 1500 words, due on Oct 25\n2nd assignment, 30% weight, 1500 words, due on Nov 15\n3rd assignment, 40% weight, 2000 words, due on Dec 13\n\nHow to submit?\n\nPlease ensure submissions are in PDF (preferred) or Word format; submissions in other formats won’t be accepted for marking.\nThe quarto-based answer sheets (qmd files) will be given to you.\n\n\n\nWord count and late submission penalties will be applied by BA admin. For related queries and EC applications, please directly contact BA admin at mgmt.ba-admin@ucl.ac.uk.\nWe have random second marking in place to mitigate marking errors. Please refrain from emailing teaching assistants for re-marking as re-marking is not allowed by school policy.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#role-of-marketing",
    "href": "Week1-Lecture1.html#role-of-marketing",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.1 Role of Marketing",
    "text": "2.1 Role of Marketing\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinance (finance a company’s business activities)\nAccounting (bookkeeping of past transactions)\nOperations (supply chain, manufacturing, inventory management)\nMarketing (directly deal with consumer; value exchange and value realization)",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#what-is-marketing-2",
    "href": "Week1-Lecture1.html#what-is-marketing-2",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.2 What is Marketing?",
    "text": "2.2 What is Marketing?\n\nKotler (1991): “Marketing is a social and managerial process by which individuals and groups obtain what they want and need through creating, offering and exchanging products of value with others.”\nBritish Chartered Institute of Marketing (2000s): “Marketing is the management process responsible for identifying, anticipating and satisfying customers’ requirements profitably.”\nAmerican Marketing Association (2017): “Marketing is the activity, set of institutions, and processes for creating, communicating, delivering, and exchanging offerings that have value for customers, clients, partners, and society at large.”",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#what-is-marketing-a-text-mining-approach",
    "href": "Week1-Lecture1.html#what-is-marketing-a-text-mining-approach",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.3 What is Marketing? A Text Mining Approach",
    "text": "2.3 What is Marketing? A Text Mining Approach\n\n\nCode\npacman::p_load(tm, wordcloud, RColorBrewer,wordcloud2, data.table)\n# generate text corpus\ndf_mkt &lt;-  'Marketing is a social and managerial process by which individuals and groups obtain what they  want and need through creating, offering and exchanging products of value with others.\nMarketing is the management process responsible for identifying, anticipating and satisfying customers requirements profitably.\nMarketing is the activity, set of institutions, and processes for creating, communicating, delivering, and exchanging offerings that have value for customers, clients, partners, and society at large.'\n\ndf_mkt_corpus &lt;- Corpus(VectorSource(df_mkt))\n# text cleaning \ndf_mkt_corpus &lt;- df_mkt_corpus |&gt; \n  tm_map(removePunctuation) |&gt;\n  tm_map(stripWhitespace) |&gt;\n  tm_map(content_transformer(tolower)) |&gt;\n  tm_map(removeWords, stopwords(\"english\"))\n# Create a document-term-matrix\ndf_mkt_dtm &lt;- TermDocumentMatrix(df_mkt_corpus)\ndf_mkt_matrix &lt;-  as.matrix(df_mkt_dtm)\ndf &lt;- data.table(words = rownames(df_mkt_matrix),\n                 freq = df_mkt_matrix[,1])\n# draw wordcloud\nset.seed(888)\nwordcloud(words = df$words, freq = df$freq, min.freq = 1, max.words=200, random.order=FALSE, colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\n\n\n\n\n\nMarketing is a management process that creates and exchanges values for the company by selling the right products to the right customers. - Wei, 2024",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#marketing-process",
    "href": "Week1-Lecture1.html#marketing-process",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.4 Marketing Process",
    "text": "2.4 Marketing Process\n\n\n\n\n\n\n\n\n\n\nWe will go through the four steps using Uber and Apple.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#situation-analysis-5-cs",
    "href": "Week1-Lecture1.html#situation-analysis-5-cs",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.5 Situation Analysis: 5 C’s",
    "text": "2.5 Situation Analysis: 5 C’s\n\nAny marketing decision can benefit from a deep understanding of the players within the market ecosystem—your own company, current and potential customers, collaborators and competitors—and the context they interact within: the 5Cs for short.\n\n\n\n\n\n\n\n\nCompany\n\nBusiness model\nGoals, objectives, and culture\n\n\n\nCustomers\n\nWho are the customers\nMarket size, segments\nOverall customer satisfaction and perceived value by customers\n\n\n\nCompetitors\n\nDirect/indirect/potential competitors\nStrengths, weaknesses, opportunities, and threats (SWOT)\n\n\n\nCollaborators\n\nSuppliers/distributors/alliances and partners\n\n\n\nClimate\n\nPESTLE",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#situation-analysis-company",
    "href": "Week1-Lecture1.html#situation-analysis-company",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.6 Situation Analysis: Company",
    "text": "2.6 Situation Analysis: Company\n\nCompany analysis is a strategic planning method used to assess the internal strengths and weaknesses of your company.\n\nBusiness model is the way your company makes money.\nGoals, objectives, and culture are the guiding principles that shape your company’s actions.\n\nCustomer is the most important player in the market ecosystem.\n\nMarket size, segments are the number of potential customers and the different groups they can be divided into.\nOverall customer satisfaction and perceived value by customers are the key to marketing success.\n\n\n\n\n\n\n\n\n\nWhat is the business model of Uber? Does it directly provide transportation services? If not, who does?\nWho are Uber’s customers?",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#situation-analysis-collaborators",
    "href": "Week1-Lecture1.html#situation-analysis-collaborators",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.7 Situation Analysis: Collaborators",
    "text": "2.7 Situation Analysis: Collaborators\n\nCollaborators are entities that work with your company to help you deliver your product or service to the customer.\n\nSuppliers provide the raw materials or components needed to produce your product.\nDistributors help you get your product to the customer.\nRetailers sell your product to the customer.\n\n\n\n\n\n\n\n\n\nWho are the collaborators of Uber?",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#situation-analysis-competitors",
    "href": "Week1-Lecture1.html#situation-analysis-competitors",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.8 Situation Analysis: Competitors",
    "text": "2.8 Situation Analysis: Competitors\n\nWe tend to pay more attention towards more salient direct competitors, but we should also consider indirect and potential competitors.\n\nIndirect competitors are companies that satisfy the same customer goals, even if they offer different products or services.\nPotential competitors are those who might pose a competitive threat in the future; who possess equivalent resources that would allow them to enter the market",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#situation-analysis-contextclimate",
    "href": "Week1-Lecture1.html#situation-analysis-contextclimate",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.9 Situation Analysis: Context/Climate",
    "text": "2.9 Situation Analysis: Context/Climate\n\nContext/Climate analysis is a strategic planning method used to assess major external factors that influence the market ecosystem, and is often referred to as PESTLE analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolitical: Brexit\nEconomic: Minimum wage, inflation, economy recession\nSocial: Gig economy\nTechnological: Big Data, mobile tech penetration\nLegal: GDPR, government regulations (BBC: partner or employee?)\nEnvironmental: sustainability, CSR",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#strategy-stp",
    "href": "Week1-Lecture1.html#strategy-stp",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.10 Strategy: STP",
    "text": "2.10 Strategy: STP\n\nSituation analysis is a critical input into marketing strategy, i.e., the sequential application of the processes of segmentation, targeting, and positioning.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#tactics-4ps",
    "href": "Week1-Lecture1.html#tactics-4ps",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "2.11 Tactics: 4P’s",
    "text": "2.11 Tactics: 4P’s\n\nThe marketing mix provides an implementation of your positioning. Segmentation is here applied at the tactical level, to optimally design the marketing mix or 4Ps.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#big-data-era",
    "href": "Week1-Lecture1.html#big-data-era",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "3.1 Big Data Era",
    "text": "3.1 Big Data Era\nWith the advancement in ICTs and computing power, data scientists nowadays are equipped with data analytics tools powerful than ever!\nFirms now have access to enormously rich information trail of customers\n\nDemographic profiles (DoB, gender, ethnicity, income)\nPurchase history (recency, frequency, monetary value, spending behavior)\nOnline browsing and search history (browsing, click through, add to cart, purchase)\nGPS data from mobile phones for offline store visits\nSocial media (location, consumer preference, social network)",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#our-roadmap",
    "href": "Week1-Lecture1.html#our-roadmap",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "3.2 Our Roadmap",
    "text": "3.2 Our Roadmap\n\nWeeks 1-3: Marketing Process and Profitability Analysis\n\nConcepts and R basics, which lay the foundation for the rest of the course\n\nWeeks 4-5: Machine Learning and Predictive Analytics\n\nHow to reduce the costs of marketing campaigns\n\nWeeks 6-10: Causal Inference\n\nHow to correctly evaluate the benefits of marketing campaigns",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture1.html#unique-position-of-marketing-analytics",
    "href": "Week1-Lecture1.html#unique-position-of-marketing-analytics",
    "title": "Class 1 Intro to Marketing Analytics",
    "section": "3.3 Unique Position of Marketing Analytics",
    "text": "3.3 Unique Position of Marketing Analytics",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 1: Introduction to Marketing Analytics"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html",
    "href": "Week1-Lecture2.html",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "",
    "text": "How to conduct break-even analysis for a marketing proposal\nHow to conduct net present value analysis for a marketing proposal\nPractice R basic calculations and vector operations in the case study",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#learning-objectives",
    "href": "Week1-Lecture2.html#learning-objectives",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "",
    "text": "How to conduct break-even analysis for a marketing proposal\nHow to conduct net present value analysis for a marketing proposal\nPractice R basic calculations and vector operations in the case study",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#decisions-for-marketing-managers",
    "href": "Week1-Lecture2.html#decisions-for-marketing-managers",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "2.1 Decisions for Marketing Managers",
    "text": "2.1 Decisions for Marketing Managers\n\nThe ultimate goal of marketing (and other business activities) is to create value and improve profitability for firms.\nAs any marketing activity comes with a cost, data analysts need to correctly evaluate whether a campaign creates or destroys value to the company.\nSuch analyses are called cost-benefit analyses, sometimes referred to as profitability analysis or break-even analysis in different contexts.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#break-even-quantity",
    "href": "Week1-Lecture2.html#break-even-quantity",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "2.2 Break-Even Quantity",
    "text": "2.2 Break-Even Quantity\n\nWe often use break-even analyses to evaluate the financial feasibility of a marketing campaign. In marketing, we often compute the break-even quantity.\n\n\n\n\n\n\n\nDefinition\n\n\n\nThe break-even quantity (BEQ) calculates the number of incremental units the firm needs to sell to cover the cost of the marketing campaign.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#compute-beq",
    "href": "Week1-Lecture2.html#compute-beq",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "2.3 Compute BEQ",
    "text": "2.3 Compute BEQ\nThe difference between the price per unit and variable costs per unit is defined as the contribution margin per unit. That is,\n\n\n\n\n\n\nDefinition\n\n\n\nContribution Margin Per Unit = Price Per Unit - Variable Costs Per Unit\n\n\n\nPrice per unit: retail price customers pay\nVariable costs per unit: Costs of goods sold (COGS)1 + any other variable costs per unit\n\nThis gives the second formula for BEQ:\n\n\n\n\n\n\nDefinition\n\n\n\nBEQ = Marketing Expenditure / Contribution Margin Per Unit",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#break-even-quantity-steps-and-decision-rule",
    "href": "Week1-Lecture2.html#break-even-quantity-steps-and-decision-rule",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "2.4 Break-Even Quantity: Steps and Decision Rule",
    "text": "2.4 Break-Even Quantity: Steps and Decision Rule\n\nSteps to conduct break-even analysis\n\nStep 1: Compute the BEQ based on the company’s product demand and production cost structure. This is the minimum quantity the company needs to sell to cover the costs of the marketing campaign.\nStep 2: Evaluate whether the campaign can generate an incremental quantity larger than BEQ\n\nThe decision rule\n\nif incremental quantity sales &gt; BEQ, the company makes money, so accept the campaign; otherwise, reject the campaign",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#background",
    "href": "Week1-Lecture2.html#background",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "3.1 Background",
    "text": "3.1 Background\n\n\n\n\n\n\n\n\nTom, senior marketing manager of Apple UK, is looking to launch a series of marketing campaigns to promote the iPhone 16 series that are just released. Tom was a proud graduate from UCL MSc BA program in 2020. He remembered from the Marketing Analytics module that break-even analysis helps evaluate different types of marketing decisions.\n\n\n\n\nCode\nprice &lt;- 799  # retail price of iPhone 16 in £\nquantity &lt;- 10  # sales quantity in million units\nendorsement_fee &lt;- 100  # endorsement fee in million pounds\nendorsement_sales_increase &lt;- 0.025 # sales increase percentage due to endorsement\nCOGS &lt;- 0.47 # cost of goods sold; 47% of retail price, i.e., 47% of £799\nRD_costs &lt;- 100 # R&D costs in million pounds\nmonthly_sales_increase_1stmonth &lt;- 0.003 # sales increase percentage in the first month\nmonthly_sales_increase_after &lt;- 0.002 # sales increase percentage in the following months\nWACC &lt;- 0.1 # weighted average cost of capital\n\n\nCase objectives:\n\nPractice situation analysis and compare with Uber’s case\nPractice how to conduct break-even analyses for a marketing compaign\nPractice R basic computations and vector operations",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#apple-inc-key-information",
    "href": "Week1-Lecture2.html#apple-inc-key-information",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "3.2 Apple Inc: Key Information",
    "text": "3.2 Apple Inc: Key Information\nFrom the case: The marketing analytics team at Apple Inc had applied sales forecasting models on historical sales data and predicted that the sales this year will reach 10 million units at the retail price of £799, without any additional marketing activities. The team had also collected the information on the Cost of Goods Sold of Apple 16, which is 47%. The Research and Development (R&D) costs for iPhone 16 is 100 million pounds.\n\nOpen the .qmd answer sheet downloaded from Moodle Week 1. And let’s solve this case using the R basics we learned!\nQuestion 1: Conduct a 5C analysis for Apple Inc, and compare with Uber’s case.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#apple-inc-bea-question-2",
    "href": "Week1-Lecture2.html#apple-inc-bea-question-2",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "3.3 Apple Inc: BEA Question 2",
    "text": "3.3 Apple Inc: BEA Question 2\n\nQuestion 2: Compute the contribution margin\n\nDo we need to consider R&D costs?\n\n\n\n\nCode\ncontribution_margin &lt;- (1 - COGS) * price\ncontribution_margin\n\n\n[1] 423.47",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#sunk-costs-and-sunk-costs-fallacy",
    "href": "Week1-Lecture2.html#sunk-costs-and-sunk-costs-fallacy",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "3.4 Sunk Costs and Sunk Costs Fallacy",
    "text": "3.4 Sunk Costs and Sunk Costs Fallacy\n\nSunk costs are costs that have already been incurred in the past and cannot be recovered. They should not be considered in decision-making.\nHowever, behavioral economics research shows that people often fall into the sunk costs fallacy, where they tend to consider sunk costs in decision-making instead of focusing on future costs and benefits.\nWhen making decisions, you should stand in the present and consider only future costs and benefits. In our case, the R&D costs are sunk costs and should not be considered in the break-even analysis.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#apple-inc-bea-question-3",
    "href": "Week1-Lecture2.html#apple-inc-bea-question-3",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "3.5 Apple Inc: BEA Question 3",
    "text": "3.5 Apple Inc: BEA Question 3\n\nQuestion 3: Based on the information at hand, should Tom approve the influencer marketing plan?",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#definition-of-npv",
    "href": "Week1-Lecture2.html#definition-of-npv",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "4.1 Definition of NPV",
    "text": "4.1 Definition of NPV\n\nWhen the effect of the marketing campaign is expected to have a long-term effect or when time value of money is important to the question at hand, we need to take the future into account.\n\n\n\n\n\n\n\nDefinition\n\n\n\nNet present value (NPV) is the difference between the present value of cash inflows and the present value of cash outflows over a period of time.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#formula-of-npv",
    "href": "Week1-Lecture2.html#formula-of-npv",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "4.2 Formula of NPV",
    "text": "4.2 Formula of NPV\n\\[\nN P V=-I_{0}+\\frac{CF_{1}}{(1+k)}+\\frac{C F_{2}}{(1+k)^{2}}+\\cdots+\\frac{C F_{n}}{(1+k)^{n}}\n\\]\n\n\\(I_{0}\\) is the initial marketing investment/expense\n\\(C F_{n}\\) is the incremental profits in period \\(n\\): it must be the additional profits due to the marketing campaign\n\\(k\\) (sometimes \\(r\\) or \\(i\\)) is the discount rate, which reflects the value of time: the same £1 today is worth \\(£1 * (1+k)\\) in the next period.\nThe decision rule\n\nif NPV &gt; 0, then the marketing campaign can bring in more values to the company, so it should be accepted.\nif NPV &lt; 0, then the marketing campaign will decrease the company’s value, so it should be rejected.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#apple-inc-npv-influencer-marketing-i",
    "href": "Week1-Lecture2.html#apple-inc-npv-influencer-marketing-i",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "4.3 Apple Inc: NPV Influencer Marketing I",
    "text": "4.3 Apple Inc: NPV Influencer Marketing I\nQuestion 4: Based on the information at hand, should Tom approve the influencer marketing plan based on Net Present Value method?\n\nCompute the sequence of monthly cash flows\n\nGenerate a sequence of incremental sales for 12 months (a vector with 12 elements)\n\nHint: use rep(), c(), and vector element-wise multiplication\n\n\n\n\n\nCode\nmonthly_sales_increase_1stmonth &lt;- 0.003\nmonthly_sales_increase_after &lt;- 0.002\n# incremental profit each month\nmonthly_incremental_sales &lt;- c(monthly_sales_increase_1stmonth,\n                     rep(monthly_sales_increase_after,11))\n\nCF &lt;-  monthly_incremental_sales * \n                    quantity * \n                    contribution_margin \n\n\nThe resulting monthly CFs are: 12.7041, 8.4694, 8.4694, 8.4694, 8.4694, 8.4694, 8.4694, 8.4694, 8.4694, 8.4694, 8.4694, 8.4694",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#apple-inc-npv-influencer-marketing-ii",
    "href": "Week1-Lecture2.html#apple-inc-npv-influencer-marketing-ii",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "4.4 Apple Inc: NPV Influencer Marketing II",
    "text": "4.4 Apple Inc: NPV Influencer Marketing II\n\nCompute the sequence of discount factors\n\nGenerate a sequence of WACC for 12 months (a vector with 12 elements)\nGenerate a sequence of discount rate for 12 months (a vector with 12 elements)\n\nHint: use seq() to generate geometric sequence with patterns\n\n\n\n\n\nCode\nmonthly_WACC &lt;- 0.1/12 # this is the discount rate\ndiscount_factor &lt;- (1/(1+monthly_WACC))^c(1:12) # this is the discount factor\n\n\nThe resulting monthly discount factors are: 0.9917355, 0.9835394, 0.975411, 0.9673497, 0.9593551, 0.9514265, 0.9435635, 0.9357654, 0.9280319, 0.9203622, 0.9127559, 0.9052124",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#apple-inc-npv-influencer-marketing-iii",
    "href": "Week1-Lecture2.html#apple-inc-npv-influencer-marketing-iii",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "4.5 Apple Inc: NPV Influencer Marketing III",
    "text": "4.5 Apple Inc: NPV Influencer Marketing III\n\nCompute the NPV\n\nGenerate a sequence of discounted CFs for 12 months\nSum up all discounted CFs across the 12 months using sum()\nSubtract endorsement fee from the sum to get NPV\n\n\n\n\nCode\nNetPresentValue &lt;- sum(CF * discount_factor) - endorsement_fee\n\n\n\nThe NPV is 0.5349641",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#after-class",
    "href": "Week1-Lecture2.html#after-class",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "4.6 After-class",
    "text": "4.6 After-class\n\nReview the coding practice from today’s class and ensure you understand how to calculate NPV in R. Complete the R coding exercise for Week 1, and feel free to bring any questions to next week’s class.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "Week1-Lecture2.html#footnotes",
    "href": "Week1-Lecture2.html#footnotes",
    "title": "Class 2 Marketing Profitability Analysis",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMaterial and production labor costs for producing a unit of product, often represented in percentage terms, e.g., COGS of 60% means the costs are 60% of retail prices. An iPhone with a retail price of £1000 and COGS of 30% means the COGS is £300.↩︎",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Lecture 2: Marketing Profitability Analysis"
    ]
  },
  {
    "objectID": "LectureSlides.html",
    "href": "LectureSlides.html",
    "title": "Lecture Slides",
    "section": "",
    "text": "Lecture slides of subsequent weeks will be released on Monday each week. Stay tuned!",
    "crumbs": [
      "Lectures",
      "[Week 2] Customer Lifetime Value",
      "Lecture Slides"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html",
    "href": "R-ComparisonWithPython.html",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "",
    "text": "Tip\n\n\n\nThis tutorial is designed for those who are familiar with either R, Python or Julia, and would like to learn another language.\nIn this tutorial, I will compare the basics of R, Python, and Julia side by side. We will cover the basic syntax, data types, and functionalities.\nIf you discover any mistakes or outdated content in this tutorial, please let me know. I will be very grateful for your feedback.\nCode\nlibrary(reticulate)\nuse_condaenv(\"base\")\nlibrary(JuliaCall)",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#assignment-of-variables",
    "href": "R-ComparisonWithPython.html#assignment-of-variables",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "1.1 Assignment of variables",
    "text": "1.1 Assignment of variables\n\n\n\n\n\n\nCaution\n\n\n\nIn R and Python, assignment operations do not print the assigned object by default.\nBut Julia does print the assigned object by default. Unless you put a semicolon ; at the end of the line, Julia will not print the assigned object.\n\n\n\nRPythonJulia\n\n\n\n\nCode\n# create an object x with value 3\nx &lt;- 3\nx\n\n\n[1] 3\n\n\n\n\n\n\nCode\n# create an object x with value 3\nx = 3\nx\n\n\n3\n\n\n\n\n\n\nCode\n# create an object x with value 3\nx = 3; # the ; suppresses the output\n\n\n3",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#comment-codes",
    "href": "R-ComparisonWithPython.html#comment-codes",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "1.2 Comment codes",
    "text": "1.2 Comment codes\n\nRPythonJulia\n\n\nYou can put a # before any code, to indicate that any codes after the # on the same line are your comments, and will not be run by R.\nIt’s a good practice to often comment your codes, so that you can help the future you to remember what you were trying to achieve.\n\n\nCode\n# Is x 1 or 2 below?\nx &lt;- 1 # +1\n\n\n\n\nSame as R. You can put a # before any code, to indicate that any codes after the # on the same line are your comments, and will not be run by Python.\n\n\nCode\n# Is x 1 or 2 below?\nx = 1 # +1\n\n\n\n\nSame as R and Python. You can put a # before any code, to indicate that any codes after the # on the same line are your comments, and will not be run by Julia.\n\n\nCode\n# Is x 1 or 2 below?\n\nx = 1 # +1\n\n\n1",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#rules-for-naming-object",
    "href": "R-ComparisonWithPython.html#rules-for-naming-object",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "1.3 Rules for naming object",
    "text": "1.3 Rules for naming object\n\nRPythonJulia\n\n\nFor a variable to be valid, it should follow these rules\n\nIt should contain letters, numbers, and only dot or underscore characters.\nIt cannot start with a number (eg: 2iota), or a dot, or an underscore.\n\n\n\nCode\n# 2iota &lt;- 2\n# .iota &lt;- 2\n# _iota &lt;- 2\n\n\n\nIt should not be a reserved word in R (eg: mean, sum, etc.).\n\n\n\nCode\n# mean &lt;- 2\n\n\n\n\nFor a variable to be valid, it should follow these rules\n\nIt should contain letters, numbers, and only underscore characters.\nIt cannot start with a number (eg: 2iota), or a dot, or an underscore.\n\n\n\nCode\n\n# 2iota = 2\n\n# .iota = 2\n\n# _iota = 2\n\n\n\nIt should not be a reserved word in Python (eg: mean, sum, etc.).\n\n\n\nCode\n\n# mean = 2\n\n\n\n\nSame as R.",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#arithmetic-operations",
    "href": "R-ComparisonWithPython.html#arithmetic-operations",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "3.1 Arithmetic operations",
    "text": "3.1 Arithmetic operations\n\nRPythonJulia\n\n\n\n\nCode\n# arithmatic operations\nx &lt;- 3 \nx + 1 # addition\n\n\n[1] 4\n\n\nCode\nx - 1 # subtraction\n\n\n[1] 2\n\n\nCode\nx * 2 # multiplication\n\n\n[1] 6\n\n\nCode\nx / 2 # division\n\n\n[1] 1.5\n\n\nCode\nx^2 # square\n\n\n[1] 9\n\n\nCode\nx %% 2 # remainder\n\n\n[1] 1\n\n\nCode\nx %/% 2 # integer division\n\n\n[1] 1\n\n\nCode\n# math operations\nlog(x)  # natural logarithm\n\n\n[1] 1.098612\n\n\nCode\nexp(x)  # exponential\n\n\n[1] 20.08554\n\n\nCode\nsqrt(x) # square root\n\n\n[1] 1.732051\n\n\nCode\nlog10(x) # log base 10\n\n\n[1] 0.4771213\n\n\nCode\nround(x/2) # round\n\n\n[1] 2\n\n\nCode\nfloor(x/2) # floor\n\n\n[1] 1\n\n\nCode\nceiling(x/2) # ceiling\n\n\n[1] 2\n\n\n\n\n\n\nCode\n# arithmatic operations\nx = 3\nx + 1 # addition\n\n\n4\n\n\nCode\nx - 1 # subtraction\n\n\n2\n\n\nCode\nx * 2 # multiplication\n\n\n6\n\n\nCode\nx / 2 # division\n\n\n1.5\n\n\nCode\nx ** 2 # square\n\n\n9\n\n\nCode\nx % 2 # remainder\n\n\n1\n\n\nCode\nx // 2 # integer division\n\n\n1\n\n\nCode\n# math operations\nimport math\nmath.log(x)  # natural logarithm\n\n\n1.0986122886681098\n\n\nCode\nmath.exp(x)  # exponential\n\n\n20.085536923187668\n\n\nCode\nmath.sqrt(x) # square root\n\n\n1.7320508075688772\n\n\nCode\nmath.log10(x) # log base 10\n\n\n0.47712125471966244\n\n\nCode\nround(x/2) # round\n\n\n2\n\n\nCode\nmath.floor(x/2) # floor\n\n\n1\n\n\nCode\nmath.ceil(x/2) # ceiling\n\n\n2\n\n\n\n\n\n\nCode\n\n# arithmatic operations\n\nx = 3\n\n\n3\n\n\nCode\n\nx + 1 # addition\n\n\n4\n\n\nCode\n\nx - 1 # subtraction\n\n\n2\n\n\nCode\n\nx * 2 # multiplication\n\n\n6\n\n\nCode\n\nx / 2 # division\n\n\n1.5\n\n\nCode\n\nx ^ 2 # square\n\n\n9\n\n\nCode\n\nx % 2 # remainder\n\n\n1\n\n\nCode\n\ndiv(x, 2) # integer division\n\n\n1\n\n\nCode\n\n# math operations\n\nlog(x)  # natural logarithm\n\n\n1.0986122886681098\n\n\nCode\n\nexp(x)  # exponential\n\n\n20.085536923187668\n\n\nCode\n\nsqrt(x) # square root\n\n\n1.7320508075688772\n\n\nCode\n\nlog10(x) # log base 10\n\n\n0.47712125471966244\n\n\nCode\n\nround(x/2) # round\n\n\n2.0\n\n\nCode\n\nfloor(x/2) # floor\n\n\n1.0\n\n\nCode\n\nceil(x/2) # ceiling\n\n\n2.0",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#logical-operations",
    "href": "R-ComparisonWithPython.html#logical-operations",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "3.2 Logical operations",
    "text": "3.2 Logical operations\n\nRPythonJulia\n\n\n\n\nCode\n# logical operations\nx &lt;- 3\nx &gt; 2 # larger than\n\n\n[1] TRUE\n\n\nCode\nx &lt; 2 # smaller than\n\n\n[1] FALSE\n\n\nCode\nx == 2 # equal to\n\n\n[1] FALSE\n\n\nCode\nx != 2 # not equal to\n\n\n[1] TRUE\n\n\n\n\n\n\nCode\n# logical operations\nx = 3\nx &gt; 2 # larger than\n\n\nTrue\n\n\nCode\nx &lt; 2 # smaller than\n\n\nFalse\n\n\nCode\nx == 2 # equal to\n\n\nFalse\n\n\nCode\nx != 2 # not equal to\n\n\nTrue\n\n\n\n\n\n\nCode\n\n# logical operations\n\nx = 3\n\n\n3\n\n\nCode\n\nx &gt; 2 # larger than\n\n\ntrue\n\n\nCode\n\nx &lt; 2 # smaller than\n\n\nfalse\n\n\nCode\n\nx == 2 # equal to\n\n\nfalse\n\n\nCode\n\nx != 2 # not equal to\n\n\ntrue",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#relational-operations",
    "href": "R-ComparisonWithPython.html#relational-operations",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "3.3 Relational operations",
    "text": "3.3 Relational operations\n\n\n\n\n\n\nCaution\n\n\n\n\nR: Boolean values are TRUE and FALSE.\nPython: Boolean values are True and False (case-sensitive).\n\n\n\n\nRPythonJulia\n\n\n\n\nCode\nT & F # and\n\n\n[1] FALSE\n\n\nCode\nT | F # or\n\n\n[1] TRUE\n\n\nCode\n!T # not\n\n\n[1] FALSE\n\n\n\n\n\n\nCode\nTrue & False # and\n\n\nFalse\n\n\nCode\nTrue | False # or\n\n\nTrue\n\n\nCode\nnot True # not\n\n\nFalse\n\n\n\n\n\n\nCode\n\ntrue & false # and\n\n\nfalse\n\n\nCode\n\ntrue | false # or\n\n\ntrue\n\n\nCode\n\n!true # not\n\n\nfalse",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#creating-vectors",
    "href": "R-ComparisonWithPython.html#creating-vectors",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.1 Creating vectors",
    "text": "4.1 Creating vectors\n\nRPythonJulia\n\n\n\nIn R, a vector is a collection of elements of the same data type, which is often used to store a variable of a dataset. For instance, a vector can store the income of a group of people, the final grades of students, etc.\nVector can be created using the function c() by listing all the values in the parenthesis, separated by comma ‘,’.\nc() stands for “combine”.\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, 10)\nIncome\n\n\n[1]  1  3  5 10\n\n\n\nVectors must contain elements of the same data type. If not, it will automatically convert elements into the same type (usually character type).\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, \"10\")\nIncome\n\n\n[1] \"1\"  \"3\"  \"5\"  \"10\"\n\n\n\n\n\nIn Python, a list is a collection of elements of different data types, which is often used to store a variable of a dataset. For instance, a list can store the income of a group of people, the final grades of students, etc.\nList can be created using the square brackets [] by listing all the values in the brackets, separated by comma ‘,’.\n\n\n\nCode\nIncome = [1, 3, 5, 10]\nIncome\n\n\n[1, 3, 5, 10]\n\n\n\nList can contain elements of different data types.\n\n\n\nCode\nIncome = [1, 3, 5, \"10\"]\nIncome\n\n\n[1, 3, 5, '10']\n\n\n\nIf you want to create a list with elements of the same numeric data type, you can use the numpy package.\n\n\n\nCode\nimport numpy as np\nIncome = np.array([1, 3, 5, 10])\nIncome\n\n\narray([ 1,  3,  5, 10])\n\n\n\n\n\nIn Julia, a vector is a collection of elements of the same data type, which is often used to store a variable of a dataset. For instance, a vector can store the income of a group of people, the final grades of students, etc.\nVector can be created using the square brackets [] by listing all the values in the brackets, separated by comma ‘,’.\n\n\n\nCode\n\nIncome = [1, 3, 5, 10]\n\n\n4-element Vector{Int64}:\n  1\n  3\n  5\n 10\n\n\n\nVector can contain elements of different data types. However, you will note that the data type is now changed to any rather than Int64.\n\n\n\nCode\n\nIncome = [1, 3, 5, \"10\"]\n\n\n4-element Vector{Any}:\n 1\n 3\n 5\n  \"10\"",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#indexing-and-subsetting",
    "href": "R-ComparisonWithPython.html#indexing-and-subsetting",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.2 Indexing and subsetting",
    "text": "4.2 Indexing and subsetting\n\n\n\n\n\n\nCaution\n\n\n\nR, Python, and Julia have different indexing rules.\n\nIn R and Julia, the index starts from 1.\nIn Python, the index starts from 0.\n\n\n\n\nRPythonJulia\n\n\n\nTo extract an element from a vector, we put the index of the element in a square bracket [ ].\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, 10)\nIncome[1] # extract the first element\n\n\n[1] 1\n\n\n\nIf we want to extract multiple elements, we can use a vector of indices.\n\n\n\nCode\nIncome[c(1,3)] # extract the first and third elements\n\n\n[1] 1 5\n\n\n\n\n\nTo extract an element from a list, we put the index of the element in a square bracket [ ].\n\n\n\nCode\nIncome = [1, 3, 5, 10]\nIncome[0] # extract the first element\n\n\n1\n\n\n\nIf we want to extract multiple elements, we can use a slice.\n\n\n\nCode\nIncome[0:3] # extract the first and third elements\n\n\n[1, 3, 5]\n\n\n\nWith numpy array, we can use the same syntax as R.\n\n\n\nCode\nIncome = np.array([1, 3, 5, 10])\nIncome[0] # extract the first element\n\n\n1\n\n\nCode\nIncome[[0,2]] # extract the first and third elements\n\n\narray([1, 5])\n\n\n\n\n\nTo extract an element from a vector, we put the index of the element in a square bracket [ ].\n\n\n\nCode\n\nIncome = [1, 3, 5, 10];\n\nIncome[1] # extract the first element\n\n\n1\n\n\n\nIf we want to extract multiple elements, we can use a slice.\n\n\n\nCode\n\nIncome[1:3] # extract the first and third elements\n\n\n3-element Vector{Int64}:\n 1\n 3\n 5",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#creating-numeric-sequences-with-fixed-steps",
    "href": "R-ComparisonWithPython.html#creating-numeric-sequences-with-fixed-steps",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.3 Creating numeric sequences with fixed steps",
    "text": "4.3 Creating numeric sequences with fixed steps\n\nRPythonJulia\n\n\nIt is also possible to easily create sequences with patterns\n\nuse seq() to create sequence with fixed steps\n\n\n\nCode\n# use seq()\nseq(from = 1, to = 2, by = 0.1)\n\n\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n\n\n\nIf the step is 1, there’s a convenient way using :\n\n\n\nCode\n1:5\n\n\n[1] 1 2 3 4 5\n\n\n\n\n\nIn base Python, we can use range() to create sequence with fixed steps\n\n\n\nCode\n# from 1 to 6, with step 1\nlist(range(1, 6)) # range() returns a range object, we need to convert it to a list\n\n\n[1, 2, 3, 4, 5]\n\n\n\nuse np.arange() to create sequence with fixed steps\n\n\n\nCode\nnp.arange(1, 2, 0.1)\n\n\narray([1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9])\n\n\n\n\n\nIn Julia, we can use 1:5 to create sequence with fixed steps\n\n\n\nCode\n\n1:5\n\n\n1:5\n\n\n\nHowever, the julia object is not a integer vector, but a UnitRange{Int64} object.\n\n\n\nCode\n\ntypeof(1:5)\n\n\nUnitRange{Int64}",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#combine-multiple-vectors-into-one-c",
    "href": "R-ComparisonWithPython.html#combine-multiple-vectors-into-one-c",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.4 Combine multiple vectors into one: c()",
    "text": "4.4 Combine multiple vectors into one: c()\n\nRPythonJulia\n\n\n\nSometimes, we may want to combine multiple vectors into one. For instance, we may have collected income data from two different sources, and we want to combine them into one vector.\nWe can use c() to combine different vectors; this is very commonly used to concatenate vectors.\n\n\n\nCode\nIncome1 &lt;- 1:3 \nIncome2 &lt;- c(10, 15) \n\n\n\n\nCode\nc(Income1,Income2)\n\n\n[1]  1  2  3 10 15\n\n\n\n\n\nIn Python, we can use the + operator to concatenate lists.\n\n\n\nCode\nIncome1 = [1, 2, 3]\nIncome2 = [10, 15]\n\n\n\n\nCode\nIncome1 + Income2\n\n\n[1, 2, 3, 10, 15]\n\n\n\nFor numpy arrays, we can use np.concatenate() to concatenate arrays.\n\n\n\nCode\nIncome1 = np.array([1, 2, 3])\nIncome2 = np.array([10, 15])\n\n\n\n\nCode\nnp.concatenate((Income1, Income2))\n\n\narray([ 1,  2,  3, 10, 15])\n\n\n\n\n\nIn Julia, we can use the vcat() function to concatenate vectors.\n\n\n\nCode\n\nIncome1 = [1, 2, 3];\n\nIncome2 = [10, 15]; \n\nvcat(Income1, Income2)\n\n\n5-element Vector{Int64}:\n  1\n  2\n  3\n 10\n 15",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#replicating-elements",
    "href": "R-ComparisonWithPython.html#replicating-elements",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.5 Replicating elements",
    "text": "4.5 Replicating elements\n\nRPythonJulia\n\n\n\nWe can use the rep() function to replicate elements in a vector.\n\n\n\nCode\nrep(1:3, times = 2) # replicate 1:3 twice\n\n\n[1] 1 2 3 1 2 3\n\n\n\n\nCode\nrep(1:3, each = 2) # replicate each element in 1:3 twice\n\n\n[1] 1 1 2 2 3 3\n\n\n\n\n\nWe can use the * operator to replicate elements in a list.\n\n\n\nCode\n[1, 2, 3] * 2 # replicate 1:3 twice\n\n\n[1, 2, 3, 1, 2, 3]\n\n\n\nFor numpy arrays, we can use np.tile() to replicate elements.\n\n\n\nCode\nnp.tile([1, 2, 3], 2) # replicate 1:3 twice\n\n\narray([1, 2, 3, 1, 2, 3])\n\n\n\n\nCode\nnp.repeat([1, 2, 3], 2) # replicate each element in 1:3 twice \n\n\narray([1, 1, 2, 2, 3, 3])\n\n\n\n\n\nWe can use the repeat() function to replicate elements in a vector.\n\n\n\nCode\n\nrepeat([1, 2, 3], 2) # replicate 1:3 twice\n\n\n6-element Vector{Int64}:\n 1\n 2\n 3\n 1\n 2\n 3\n\n\n\n\nCode\n\nrepeat([1, 2, 3], inner = 2) # replicate each element in 1:3 twice\n\n\n6-element Vector{Int64}:\n 1\n 1\n 2\n 2\n 3\n 3",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#maximum-and-minimum",
    "href": "R-ComparisonWithPython.html#maximum-and-minimum",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.6 Maximum and minimum",
    "text": "4.6 Maximum and minimum\n\nRPythonJulia\n\n\n\nWe can use the max() and min() functions to find the maximum and minimum values in a vector.\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, 10)\n\nmax(Income) # maximum\n\n\n[1] 10\n\n\nCode\nmin(Income) # minimum\n\n\n[1] 1\n\n\n\n\n\nWe can use the max() and min() functions to find the maximum and minimum values in a list.\n\n\n\nCode\nIncome = [1, 3, 5, 10]\n\nmax(Income) # maximum\n\n\n10\n\n\nCode\nmin(Income) # minimum\n\n\n1\n\n\n\nFor numpy arrays, we can use np.max() and np.min() to find the maximum and minimum values.\n\n\n\nCode\nIncome = np.array([1, 3, 5, 10])\n\nnp.max(Income) # maximum\n\n\n10\n\n\nCode\nnp.min(Income) # minimum\n\n\n1\n\n\n\n\n\nWe can use the maximum() and minimum() functions to find the maximum and minimum values in a vector.\n\n\n\nCode\n\nIncome = [1, 3, 5, 10];\n\nmaximum(Income) # maximum\n\n\n10\n\n\nCode\n\nminimum(Income) # minimum\n\n\n1",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#sum-and-mean",
    "href": "R-ComparisonWithPython.html#sum-and-mean",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.7 Sum and mean",
    "text": "4.7 Sum and mean\n\nRPythonJulia\n\n\n\nWe can use the sum() and mean() functions to find the sum and mean values in a vector.\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, 10)\n\nsum(Income, na.rm = T) # sum and remove missing values\n\n\n[1] 19\n\n\nCode\nmean(Income, na.rm = T) # mean and remove missing values\n\n\n[1] 4.75\n\n\n\n\n\nWe can use the sum() and mean() functions to find the sum and mean values in a list.\n\n\n\nCode\nIncome = [1, 3, 5, 10]\n\nsum(Income) # sum\n\n\n19\n\n\nCode\nnp.mean(Income) # mean\n\n\n4.75\n\n\n\nFor numpy arrays, we can use np.sum() and np.mean() to find the sum and mean values.\n\n\n\nCode\nIncome = np.array([1, 3, 5, 10])\n\nnp.sum(Income) # sum\n\n\n19\n\n\nCode\nnp.mean(Income) # mean\n\n\n4.75\n\n\n\n\n\nWe can use the sum() and mean() functions to find the sum and mean values in a vector.\n\n\n\nCode\n\nIncome = [1, 3, 5, 10];\n\nsum(Income) # sum\n\n\n19\n\n\nCode\n\nmean(Income) # mean\n\n\n4.75",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#missing-values",
    "href": "R-ComparisonWithPython.html#missing-values",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.8 Missing values",
    "text": "4.8 Missing values\n\n\n\n\n\n\nCaution\n\n\n\n\nIn R, missing values are represented by NA.\nIn Python, missing values are represented by np.nan.\nIn Julia, missing values are represented by missing.\n\n\n\n\nRPythonJulia\n\n\n\nIn R, missing values are represented by NA.\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, NA)\n\nsum(Income, na.rm = T) # sum and remove missing values\n\n\n[1] 9\n\n\nCode\nmean(Income, na.rm = T) # mean and remove missing values\n\n\n[1] 3\n\n\n\n\n\nIn Python, missing values are represented by np.nan.\n\n\n\nCode\nIncome = [1, 3, 5, np.nan]\n\nnp.nansum(Income) # sum and remove missing values\n\n\n9.0\n\n\nCode\nnp.nanmean(Income) # mean and remove missing values\n\n\n3.0\n\n\n\n\n\nIn Julia, missing values are represented by missing. In order to take the sum or mean by removing missing values,\n\n\n\nCode\n\nIncome = [1, 3, 5, missing];\n\nsum(skipmissing(Income)) # sum and remove missing values\n\n\n9",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#element-wise-arithmetic-operations",
    "href": "R-ComparisonWithPython.html#element-wise-arithmetic-operations",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.9 Element-wise arithmetic operations",
    "text": "4.9 Element-wise arithmetic operations\n\n\n\n\n\n\nCaution\n\n\n\n\nR by default supports element-wise operations on vectors.\nPython by default does not support element-wise operations on lists. You need to use numpy arrays to do element-wise operations.\nJulia by default does not support element-wise operations on arrays. You need to use the . operator to do element-wise operations.\n\n\n\n\nRPythonJulia\n\n\n\nIf you operate on a vector with a single number, the operation will be applied to all elements in the vector\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, 10)\n\nIncome + 2 # element-wise addition\n\n\n[1]  3  5  7 12\n\n\nCode\nIncome * 2 # element-wise multiplication\n\n\n[1]  2  6 10 20\n\n\n\n\n\nHowever, the base Python does not support element-wise operations on lists.\n\n\n\nCode\nIncome = [1, 3, 5, 10]\n\nIncome + 2 # element-wise addition\n\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\nCode\nIncome * 2 # element-wise multiplication\n\n\n[1, 3, 5, 10, 1, 3, 5, 10]\n\n\n\nFor numpy arrays, the behavior is the same as R.\n\n\n\nCode\nIncome = np.array([1, 3, 5, 10])\n\nIncome + 2 # element-wise addition\n\n\narray([ 3,  5,  7, 12])\n\n\nCode\nIncome * 2 # element-wise multiplication\n\n\narray([ 2,  6, 10, 20])\n\n\n\n\n\nIf you operate on a vector with a single number, the operation will be applied to all elements in the vector. However, the base Julia does not support element-wise operations on arrays. In order to do element-wise operations, you need to use the . operator.\n\n\n\nCode\n\nIncome = [1, 3, 5, 10];\n\nIncome .+ 2 # element-wise addition\n\n\n4-element Vector{Int64}:\n  3\n  5\n  7\n 12\n\n\nCode\n\nIncome .* 2 # element-wise multiplication\n\n\n4-element Vector{Int64}:\n  2\n  6\n 10\n 20",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#vector-multiplication",
    "href": "R-ComparisonWithPython.html#vector-multiplication",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.10 Vector multiplication",
    "text": "4.10 Vector multiplication\n\nRPythonJulia\n\n\n\nIf the two vectors are of the same length, they can do element-wise operations, including element-wise addition and element-wise multiplication\n\n\n\nCode\nIncome1 &lt;- c(1, 3, 5, 10)\n\nIncome2 &lt;- c(2, 4, 6, 8)\n\nIncome1 + Income2 # element-wise addition\n\n\n[1]  3  7 11 18\n\n\nCode\nIncome1 * Income2 # element-wise multiplication\n\n\n[1]  2 12 30 80\n\n\n\n\n\nFor numpy arrays, we can use np.multiply() to do element-wise multiplication.\n\n\n\nCode\nIncome1 = np.array([1, 3, 5, 10])\n\nIncome2 = np.array([2, 4, 6, 8])\n\nnp.add(Income1, Income2) # element-wise addition\n\n\narray([ 3,  7, 11, 18])\n\n\nCode\nnp.multiply(Income1, Income2) # element-wise multiplication\n\n\narray([ 2, 12, 30, 80])\n\n\n\n\n\nIf the two vectors are of the same length, they can do element-wise operations, including element-wise addition and element-wise multiplication\n\n\n\nCode\n\nIncome1 = [1, 3, 5, 10];\n\nIncome2 = [2, 4, 6, 8];\n\nIncome1 .+ Income2 # element-wise addition\n\n\n4-element Vector{Int64}:\n  3\n  7\n 11\n 18\n\n\nCode\n\nIncome1 .* Income2 # element-wise multiplication\n\n\n4-element Vector{Int64}:\n  2\n 12\n 30\n 80",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#max-and-min-of-2-vectors",
    "href": "R-ComparisonWithPython.html#max-and-min-of-2-vectors",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "4.11 Max and min of 2 vectors",
    "text": "4.11 Max and min of 2 vectors\n\nRPythonJulia\n\n\n\nWe can use the pmax() and pmin() functions to find the element-wise maximum and minimum values of two vectors.\n\n\n\nCode\nIncome1 &lt;- c(1, 3, 5, 10)\n\nIncome2 &lt;- c(2, 4, 6, 8)\n\npmax(Income1, Income2) # element-wise maximum\n\n\n[1]  2  4  6 10\n\n\nCode\npmin(Income1, Income2) # element-wise minimum\n\n\n[1] 1 3 5 8\n\n\n\n\n\nWe can use the np.maximum() and np.minimum() functions to find the element-wise maximum and minimum values of two numpy arrays.\n\n\n\nCode\nIncome1 = np.array([1, 3, 5, 10])\n\nIncome2 = np.array([2, 4, 6, 8])\n\nnp.maximum(Income1, Income2) # element-wise maximum\n\n\narray([ 2,  4,  6, 10])\n\n\nCode\nnp.minimum(Income1, Income2) # element-wise minimum\n\n\narray([1, 3, 5, 8])\n\n\n\n\n\nWe can use the max() and min() functions to find the element-wise maximum and minimum values of two vectors.\n\n\n\nCode\n\nIncome1 = [1, 3, 5, 10];\n\nIncome2 = [2, 4, 6, 8];\n\nmax.(Income1, Income2) # element-wise maximum\n\n\n4-element Vector{Int64}:\n  2\n  4\n  6\n 10\n\n\nCode\n\nmin.(Income1, Income2) # element-wise minimum\n\n\n4-element Vector{Int64}:\n 1\n 3\n 5\n 8",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#creating-strings",
    "href": "R-ComparisonWithPython.html#creating-strings",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "5.1 Creating strings",
    "text": "5.1 Creating strings\n\nRPythonJulia\n\n\n\nCharacters are enclosed within a pair of quotation marks.\nSingle or double quotation marks can both work.\nIf even a character may contain numbers, it will be treated as a character, and R will not perform any mathematical operations on it.\n\n\n\nCode\nstr1 &lt;- \"1 + 1 = 2\"\n\n\n\n\n\nStrings are enclosed within a pair of quotation marks.\nSingle or double quotation marks can both work.\n\n\n\nCode\nstr1 = \"1 + 1 = 2\"\n\n\n\n\n\nIn Julia, single quotation marks (') are used for defining individual characters. Double quotation marks (\") are used for defining strings.\n\n\n\nCode\n\ncharacter1 = '1'\n\n\n'1': ASCII/Unicode U+0031 (category Nd: Number, decimal digit)\n\n\nCode\nstr1 = \"1 + 1 = 2\"\n\n\n\"1 + 1 = 2\"",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#concatenating-strings",
    "href": "R-ComparisonWithPython.html#concatenating-strings",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "5.2 Concatenating strings",
    "text": "5.2 Concatenating strings\n\nRPythonJulia\n\n\n\nWe can use the paste() function to concatenate strings.\n\n\n\nCode\nstr1 &lt;- \"1 + 1 = \"\nstr2 &lt;- \"2\"\n\npaste(str1, str2)\n\n\n[1] \"1 + 1 =  2\"\n\n\n\n\n\nWe can use the + operator to concatenate strings.\n\n\n\nCode\nstr1 = \"1 + 1 = \"\nstr2 = \"2\"\n\nstr1 + str2\n\n\n'1 + 1 = 2'\n\n\n\n\n\nWe can use the * operator to concatenate strings.\n\n\n\nCode\n\nstr1 = \"1 + 1 = \"\n\n\n\"1 + 1 = \"\n\n\nCode\n\nstr2 = \"2\"\n\n\n\"2\"\n\n\nCode\n\nstr1 * str2\n\n\n\"1 + 1 = 2\"",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#checking-the-number-of-elements-in-a-vector-length",
    "href": "R-ComparisonWithPython.html#checking-the-number-of-elements-in-a-vector-length",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "5.3 Checking the number of elements in a vector: length()",
    "text": "5.3 Checking the number of elements in a vector: length()\n\nRPythonJulia\n\n\n\nYou can measure the length of a vector using the command length()\n\n\n\nCode\nx &lt;- c('R',' is', ' the', ' best', ' language')\nlength(x)\n\n\n[1] 5\n\n\n\n\n\nYou can measure the length of a list using the command len()\n\n\n\nCode\nx = ['R',' is', ' the', ' best', ' language']\n\nlen(x)\n\n\n5\n\n\n\nFor numpy arrays, you can use the shape attribute to get the shape of the array.\n\n\n\nCode\nx = np.array(['Python',' is', ' the', ' best', ' language'])\n\nx.shape\n\n\n(5,)\n\n\n\n\n\nYou can measure the length of a vector using the command length()\n\n\n\nCode\n\nx = [\"Julia\", \" is\", \" the\", \" best\", \" language\"]\n\n\n5-element Vector{String}:\n \"Julia\"\n \" is\"\n \" the\"\n \" best\"\n \" language\"\n\n\nCode\n\nlength(x)\n\n\n5",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#special-relational-operation-in",
    "href": "R-ComparisonWithPython.html#special-relational-operation-in",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "5.4 Special relational operation: %in%",
    "text": "5.4 Special relational operation: %in%\n\nRPythonJulia\n\n\n\nA special relational operation is %in% in R, which tests whether an element exists in the object.\n\n\n\nCode\nx &lt;- c(1,3,8,7) \n\n3 %in% x\n\n\n[1] TRUE\n\n\nCode\n2 %in% x\n\n\n[1] FALSE\n\n\n\n\n\nIn Python, we can use the in operator to test whether an element exists in the object.\n\n\n\nCode\nx = [1, 3, 8, 7]\n\n3 in x\n\n\nTrue\n\n\nCode\n2 in x\n\n\nFalse\n\n\n\n\n\nIn Julia, we can use the in operator to test whether an element exists in the object.\n\n\n\nCode\n\nx = [1, 3, 8, 7];\n\n3 in x\n\n\ntrue",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#matrices-creating-matrices",
    "href": "R-ComparisonWithPython.html#matrices-creating-matrices",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "6.1 Matrices: creating matrices",
    "text": "6.1 Matrices: creating matrices\n\n\n\n\n\n\nCaution\n\n\n\nWhen creating R matrix using matrix(), the sequence of elements is filled by column. This by-column is named as column-major order.\nWhen creating Python matrix using np.array(), the sequence of elements is filled by row. This by-row is named as row-major order.\n\n\n\nRPythonJulia\n\n\n\nA matrix can be created using the command matrix()\n\nthe first argument is the vector to be converted into matrix\nthe second argument is the number of rows\nthe last argument is the number of cols\n\n\n\n\nCode\nmatrix(1:9, nrow = 3, ncol = 3)\n\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n\n\nA matrix can be created using the numpy package, np.array() function, where the argument is a list of lists, where each list is a row of the matrix\n\n\n\nCode\nimport numpy as np\n\nnp.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\n\n\nA matrix can be created using the base Julia using square brackets [] and semicolon ; to separate rows.\n\n\n\nCode\n\n[1 2 3; 4 5 6; 7 8 9]\n\n\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#creating-matrices-combine-matrices",
    "href": "R-ComparisonWithPython.html#creating-matrices-combine-matrices",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "6.2 Creating matrices: combine matrices",
    "text": "6.2 Creating matrices: combine matrices\n\nRPythonJulia\n\n\nWe can use cbind() and rbind() to concatenate vectors and matrices into new matrices.\n\ncbind() does the column binding\n\n\n\nCode\na &lt;- matrix(1:6, nrow = 2, ncol = 3)\n\na\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nCode\ncbind(a, a) # column bind\n\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    3    5    1    3    5\n[2,]    2    4    6    2    4    6\n\n\n\nrbind() does the row binding\n\n\n\nCode\nrbind(a, a) # row bind\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n[3,]    1    3    5\n[4,]    2    4    6\n\n\n\n\n\nWe can use np.concatenate() to concatenate arrays.\n\n\n\nCode\na = np.array([[1, 2, 3], [4, 5, 6]])\n\na\n\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\nCode\nnp.concatenate((a, a), axis = 1) # column bind\n\n\narray([[1, 2, 3, 1, 2, 3],\n       [4, 5, 6, 4, 5, 6]])\n\n\nCode\nnp.concatenate((a, a), axis = 0) # row bind\n\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [1, 2, 3],\n       [4, 5, 6]])\n\n\n\n\n\nWe can use the hcat() and vcat() functions to concatenate matrices.\n\n\n\nCode\n\na = [1 2 3; 4 5 6]\n\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\nCode\n\nhcat(a, a) # column bind\n\n\n2×6 Matrix{Int64}:\n 1  2  3  1  2  3\n 4  5  6  4  5  6\n\n\nCode\n\nvcat(a, a) # row bind\n\n\n4×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 1  2  3\n 4  5  6",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#matrices-indexing-and-subsetting",
    "href": "R-ComparisonWithPython.html#matrices-indexing-and-subsetting",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "6.3 Matrices: indexing and subsetting",
    "text": "6.3 Matrices: indexing and subsetting\nMatrices have two dimensions: rows and columns. Therefore, to extract elements from a matrix, we just need to specify which row(s) and which column(s) we want.\n\nRPythonJulia\n\n\n\n\nCode\nx &lt;- matrix(1:9, nrow = 3, ncol = 3)\nx\n\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\nExtract the element in the 2nd row, 3rd column.\n\nuse square bracket with a coma inside [ , ] to indicate subsetting; the argument before coma is the row index, and the argument after the coma is the column index.\n\n2 is specified for row index, so we will extract elements from the first row\n3 is specified for column index, so we will extract elements from the the second column\nAltogether, we extract a single element in row 2, column 3.\n\n\n\n\n\nCode\nx[2,3] # the element in the 2nd row, 3rd column\n\n\n[1] 8\n\n\n\nIf we leave blank for a dimension, we extract all elements along that dimension.\n\nif we want to take out the entire first row\n\n1 is specified for the row index\ncolumn index is blank\n\n\n\n\n\nCode\nx[1,] # all elements in the first row\n\n\n[1] 1 4 7\n\n\n\n\n\n\nCode\nx = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nx\n\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nExtract the element in the 2nd row, 3rd column.\n\n\n\nCode\nx[1,2] # the element in the 2nd row, 3rd column\n\n\n6\n\n\n\nIf we leave blank for a dimension, we extract all elements along that dimension.\n\n\n\nCode\nx[0,:] # all elements in the first row\n\n\narray([1, 2, 3])\n\n\n\n\n\n\nCode\n\nx = [1 2 3; 4 5 6; 7 8 9];\n\n\n\nExtract the element in the 2nd row, 3rd column.\n\n\n\nCode\n\nx[2,3] # the element in the 2nd row, 3rd column\n\n\n6\n\n\n\nDifferent from R, we need to use : to extract all elements along that dimension.\n\n\n\nCode\n\nx[1,:] # all elements in the first row\n\n\n3-element Vector{Int64}:\n 1\n 2\n 3",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#matrices-check-dimensions-and-variable-types",
    "href": "R-ComparisonWithPython.html#matrices-check-dimensions-and-variable-types",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "6.4 Matrices: check dimensions and variable types",
    "text": "6.4 Matrices: check dimensions and variable types\n\nRPythonJulia\n\n\n\nYou can verify the size of the matrix using the command dim(); or nrow() and ncol()\n\n\n\nCode\nx &lt;- matrix(1:9, nrow = 3, ncol = 3)\n\ndim(x)\n\n\n[1] 3 3\n\n\nCode\nnrow(x)\n\n\n[1] 3\n\n\nCode\nncol(x)\n\n\n[1] 3\n\n\n\nYou can get the data type info using the command str()\n\n\n\nCode\nstr(x)\n\n\n int [1:3, 1:3] 1 2 3 4 5 6 7 8 9\n\n\n\n\n\nYou can verify the size of the matrix using the shape attribute\n\n\n\nCode\nx = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nx.shape\n\n\n(3, 3)\n\n\n\nYou can get the data type info using the dtype attribute\n\n\n\nCode\nx.dtype\n\n\ndtype('int64')\n\n\n\n\n\nYou can verify the size of the matrix using the size() function\n\n\n\nCode\n\nx = [1 2 3; 4 5 6; 7 8 9]\n\n\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9\n\n\nCode\n\nsize(x)\n\n\n(3, 3)",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#matrices-special-operations",
    "href": "R-ComparisonWithPython.html#matrices-special-operations",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "6.5 Matrices: special operations",
    "text": "6.5 Matrices: special operations\n\n6.5.1 Creating a diagonal matrix\n\nRPythonJulia\n\n\n\nWe can use the diag() function to create a diagonal matrix.\n\n\n\nCode\ndiag(1:3)\n\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    2    0\n[3,]    0    0    3\n\n\n\n\n\nWe can use the np.diag() function to create a diagonal matrix.\n\n\n\nCode\nnp.diag([1, 2, 3])\n\n\narray([[1, 0, 0],\n       [0, 2, 0],\n       [0, 0, 3]])\n\n\n\n\n\nWe can use the diagm() function to create a diagonal matrix.\n\n\n\nCode\nusing LinearAlgebra\ndiagm(0 =&gt; [1, 2, 3])\n\n\n3×3 Matrix{Int64}:\n 1  0  0\n 0  2  0\n 0  0  3\n\n\n\n\n\n\n\n6.5.2 Creating an identity matrix\n\nRPythonJulia\n\n\n\nWe can use the diag() function to create an identity matrix.\n\n\n\nCode\ndiag(3)\n\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n\n\n\nWe can use the np.eye() function to create an identity matrix.\n\n\n\nCode\nnp.eye(3)\n\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\n\n\n\nWe can use the I() function to create an identity matrix.\n\n\n\nCode\n\nI(3)\n\n\n3×3 Diagonal{Bool, Vector{Bool}}:\n 1  ⋅  ⋅\n ⋅  1  ⋅\n ⋅  ⋅  1",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#matrices-operations-matrix-addition-and-multiplication",
    "href": "R-ComparisonWithPython.html#matrices-operations-matrix-addition-and-multiplication",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "6.6 Matrices’ operations: matrix addition and multiplication",
    "text": "6.6 Matrices’ operations: matrix addition and multiplication\n\nRPythonJulia\n\n\n\nIf the two matrices are of the same dimensions, they can do element-wise operations, including element-wise addition and element-wise multiplication\n\n\n\nCode\nset.seed(123)\n\nx = matrix(rnorm(9), nrow = 3, ncol = 3)\n\nz = matrix(rnorm(9), nrow = 3, ncol = 3)\n\nx + z   # elementwise addition\n\n\n           [,1]      [,2]       [,3]\n[1,] -1.0061376 0.4712798  2.2478293\n[2,]  0.9939043 0.2399705 -0.7672108\n[3,]  1.9185221 1.1592239 -2.6534700\n\n\n\n\nCode\nx * x \n\n\n           [,1]        [,2]      [,3]\n[1,] 0.31413295 0.004971433 0.2124437\n[2,] 0.05298168 0.016715318 1.6003799\n[3,] 2.42957161 2.941447909 0.4717668\n\n\n\nIf we want to perform the matrix multiplication as in linear algebra, we need to use %*%\n\nx and y must have conforming dimensions\n\n\n\n\nCode\nx\n\n\n           [,1]       [,2]       [,3]\n[1,] -0.5604756 0.07050839  0.4609162\n[2,] -0.2301775 0.12928774 -1.2650612\n[3,]  1.5587083 1.71506499 -0.6868529\n\n\nCode\ny = matrix(rnorm(9), nrow = 3, ncol = 3)\nx %*% y # matrix multiplication\n\n\n           [,1]       [,2]       [,3]\n[1,] -0.9186059 -0.2861301  0.6175429\n[2,]  1.1282999  0.8396152 -1.1340507\n[3,]  1.0157790 -1.5987826 -4.4424790\n\n\n\n\n\nIf the two matrices are of the same dimensions, they can do element-wise operations, including element-wise addition and element-wise multiplication\n\n\n\nCode\nx = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\ny = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nx + y # elementwise addition\n\n\narray([[ 2,  4,  6],\n       [ 8, 10, 12],\n       [14, 16, 18]])\n\n\n\n\nCode\nx * y # elementwise multiplication\n\n\narray([[ 1,  4,  9],\n       [16, 25, 36],\n       [49, 64, 81]])\n\n\n\nIf we want to perform the matrix multiplication as in linear algebra, we need to use @\n\nx and y must have conforming dimensions\n\n\n\n\nCode\nx @ y # matrix multiplication\n\n\narray([[ 30,  36,  42],\n       [ 66,  81,  96],\n       [102, 126, 150]])\n\n\n\n\n\nIf the two matrices are of the same dimensions, they can do element-wise operations, including element-wise addition and element-wise multiplication. It’s recommended to use . to indicate element-wise operations\n\n\n\nCode\n\nx = [1 2 3; 4 5 6; 7 8 9]\n\n\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9\n\n\nCode\n\ny = [1 2 3; 4 5 6; 7 8 9]\n\n\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9\n\n\nCode\n\nx .+ y # elementwise addition\n\n\n3×3 Matrix{Int64}:\n  2   4   6\n  8  10  12\n 14  16  18",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#matrices-operations-inverse-and-transpose",
    "href": "R-ComparisonWithPython.html#matrices-operations-inverse-and-transpose",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "6.7 Matrices’ operations: inverse and transpose",
    "text": "6.7 Matrices’ operations: inverse and transpose\n\nRPythonJulia\n\n\n\nWe use t() to do matrix transpose\n\n\n\nCode\nx = matrix(rnorm(9), nrow = 3, ncol = 3)\nx\n\n\n           [,1]       [,2]      [,3]\n[1,]  0.1533731  0.4264642 0.8781335\n[2,] -1.1381369 -0.2950715 0.8215811\n[3,]  1.2538149  0.8951257 0.6886403\n\n\nCode\nt(x) # transpose\n\n\n          [,1]       [,2]      [,3]\n[1,] 0.1533731 -1.1381369 1.2538149\n[2,] 0.4264642 -0.2950715 0.8951257\n[3,] 0.8781335  0.8215811 0.6886403\n\n\n\nWe use solve() to get the inverse of an matrix\n\n\n\nCode\nx\n\n\n           [,1]       [,2]      [,3]\n[1,]  0.1533731  0.4264642 0.8781335\n[2,] -1.1381369 -0.2950715 0.8215811\n[3,]  1.2538149  0.8951257 0.6886403\n\n\nCode\nsolve(t(x)%*%x) # inverse; must be on a square matrix\n\n\n          [,1]      [,2]      [,3]\n[1,]  417.2893 -803.5341  299.4938\n[2,] -803.5341 1548.5735 -577.2074\n[3,]  299.4938 -577.2074  215.6665\n\n\n\n\n\nWe use T to do matrix transpose\n\n\n\nCode\nx = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nx\n\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\nCode\nx.T # transpose\n\n\narray([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])\n\n\n\nWe use np.linalg.inv() to get the inverse of an matrix\n\n\n\nCode\nnp.linalg.inv(x.T @ x) # inverse; must be on a square matrix\n\n\narray([[ 5.62949953e+14, -1.12589991e+15,  5.62949953e+14],\n       [-1.12589991e+15,  2.25179981e+15, -1.12589991e+15],\n       [ 5.62949953e+14, -1.12589991e+15,  5.62949953e+14]])\n\n\n\n\n\nWe use transpose() to do matrix transpose\n\n\n\nCode\n\nx = [1 2 3; 4 5 6; 7 8 9]\n\n\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9\n\n\nCode\n\ntranspose(x) # transpose\n\n\n3×3 transpose(::Matrix{Int64}) with eltype Int64:\n 1  4  7\n 2  5  8\n 3  6  9\n\n\n\nWe use inv() to get the inverse of an matrix\n\n\n\nCode\n\ninv(transpose(x) * x) # inverse; must be on a square matrix\n\n\n3×3 Matrix{Float64}:\n  5.6295e14  -1.1259e15   5.6295e14\n -1.1259e15   2.2518e15  -1.1259e15\n  5.6295e14  -1.1259e15   5.6295e14",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#ifelse",
    "href": "R-ComparisonWithPython.html#ifelse",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "7.1 if/else",
    "text": "7.1 if/else\n\nRPythonJulia\n\n\nSometimes, you want to run your code based on different conditions. For instance, if the observation is a missing value, then use the population average to impute the missing value. This is where if/else kicks in.\nif (condition == TRUE) {\n  action 1\n} else if (condition == TRUE ){\n  action 2\n} else {\n  action 3\n}\nExample 1:\n\n\nCode\na &lt;- 15\n\nif (a &gt; 10) {\nlarger_than_10 &lt;- TRUE  \n} else {\n  larger_than_10 &lt;- FALSE\n}\n\nlarger_than_10  \n\n\n[1] TRUE\n\n\nExample 2:\n\n\nCode\nx &lt;- -5\nif(x &gt; 0){\n  print(\"x is a non-negative number\")\n} else {\n  print(\"x is a negative number\")\n}\n\n\n[1] \"x is a negative number\"\n\n\n\n\n\n\nCode\na = 15\n\nif a &gt; 10:\n    larger_than_10 = True\nelse:\n    larger_than_10 = False\n\nlarger_than_10\n\n\nTrue\n\n\nExample 2:\n\n\nCode\nx = -5\n\nif x &gt; 0:\n    print(\"x is a non-negative number\")\nelse:\n    print(\"x is a negative number\")\n\n\nx is a negative number\n\n\n\n\n\n\nCode\n\na = 15\n\n\n15\n\n\nCode\n\nif a &gt; 10\n    larger_than_10 = true\nelse\n    larger_than_10 = false\nend\n\n\ntrue\n\n\nCode\n\nlarger_than_10\n\n\ntrue\n\n\nExample 2:\n\n\nCode\n\nx = -5\n\n\n-5\n\n\nCode\n\nif x &gt; 0\n    println(\"x is a non-negative number\")\nelse\n    println(\"x is a negative number\")\nend\n\n\nx is a negative number",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#loops",
    "href": "R-ComparisonWithPython.html#loops",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "7.2 Loops",
    "text": "7.2 Loops\n\n\n\n\n\n\nCaution\n\n\n\nBoth R and Python are very inefficient in terms of loops. Therefore, codes should be written in matrix form to utlize the vectorization as much as possible.\nIn constrast, Julia is very efficient at loops. Thus code readability should be prioritized instead of vectorization.\n\n\n\nRPythonJulia\n\n\nAs the name suggests, in a loop the program repeats a set of instructions many times, until the stopping criteria is met.\nLoop is very useful for repetitive jobs.\n\n\nCode\nfor (i in 1:10){ # i is the iterator\n  # loop body: gets executed each time\n  # the value of i changes with each iteration\n}\n\n\nExample:\n\n\nCode\nfor (i in 1:5){\n  print(i)\n}\n\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\n\n\nCode\nfor i in range(1, 6):\n    print(i)\n\n\n1\n2\n3\n4\n5\n\n\n\n\n\n\nCode\n\nfor i in 1:5\n    println(i)\nend\n\n\n1\n2\n3\n4\n5",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "R-ComparisonWithPython.html#user-defined-functions",
    "href": "R-ComparisonWithPython.html#user-defined-functions",
    "title": "Side-to-Side Comparison between R, Python, and Julia",
    "section": "7.3 User-Defined Functions",
    "text": "7.3 User-Defined Functions\nA function takes the argument as input, run some specified actions, and then return the result to us.\nFunctions are very useful. When we would like to test different ideas, we can combine functions with loops: We can write a function which takes different parameters as input, and we can use a loop to go through all the possible combinations of parameters.\n\nRPythonJulia\n\n\nHere is how to define a function in general:\n\n\nCode\nfunction_name &lt;- function(arg1 ,arg2 = default_value){\n  # write the actions to be done with arg1 and arg2\n  # you can have any number of arguments, with or without defaults\n  return() # the last line is to return some value \n}\n\n\nExample:\n\n\nCode\nmagic &lt;- function( x, y){\n  return(x^2 + y)\n}\n\nmagic(1,3)\n\n\n[1] 4\n\n\n\n\nHere is how to define a function in general:\n\n\nCode\ndef function_name(arg1, arg2 = default_value):\n    # write the actions to be done with arg1 and arg2\n    # you can have any number of arguments, with or without defaults\n    return # the last line is to return some value\n\n\nNameError: name 'default_value' is not defined\n\n\nExample:\n\n\nCode\ndef magic(x, y):\n    return x**2 + y\n\nmagic(1, 3)\n\n\n4\n\n\n\n\nHere is how to define a function in general:\n\n\nCode\n\nfunction function_name(arg1, arg2 = default_value)\n    # write the actions to be done with arg1 and arg2\n    # you can have any number of arguments, with or without defaults\n    return # the last line is to return some value\nend\n\n\nfunction_name (generic function with 2 methods)\n\n\nExample:\n\n\nCode\n\nfunction magic(x, y)\n    return x^2 + y\nend\n\n\nmagic (generic function with 1 method)\n\n\nCode\n\nmagic(1, 3)\n\n\n4",
    "crumbs": [
      "R Tutorials",
      "Side-by-Side Comparison between R and Python"
    ]
  },
  {
    "objectID": "RTip-BLAS.html",
    "href": "RTip-BLAS.html",
    "title": "Speed Up Matrix Operations",
    "section": "",
    "text": "If your codes include lots of vector/matrix operations, especially those computation intensive tasks such as matrix inverse,1 you will probably feel that the default R is slow. Your intuition is likely correct! The reason is that the default R distributions from CRAN make use of the default BLAS/LAPACK implementation for linear algebra operations. The purpose of using such reference BLAS libraries by the development team is good: These implementations are built to be stable and cross platform compatible. However, the price that comes with stability is the sacrifice of speed. Is there a way to tweak your R settings to significantly boost the running speed? The answer is yes, and the steps are actually quite simple. We will review the steps to install highly optimized libraries and benchmark their performance.",
    "crumbs": [
      "Advanced R Tips",
      "Speed Up Matrix Operations"
    ]
  },
  {
    "objectID": "RTip-BLAS.html#how-to-switch-to-veclib-blas",
    "href": "RTip-BLAS.html#how-to-switch-to-veclib-blas",
    "title": "Speed Up Matrix Operations",
    "section": "2.1 How to Switch to VecLib BLAS",
    "text": "2.1 How to Switch to VecLib BLAS\nOn MacOS, the R’s framework path is /Library/Frameworks/R.framework/Resources/lib. To go to the folder, open terminal on your Mac, and enter the following command:\n\n\nCode\ncd /Library/Frameworks/R.framework/Resources/lib\nls -l\n\n\ntotal 16336\n-rwxrwxr-x  1 root     admin  3988192 24 Jun 11:57 libR.dylib\ndrwxrwxr-x  3 root     admin       96 23 Apr  2022 libR.dylib.dSYM\n-rwxrwxr-x  1 root     admin   193440 24 Jun 11:57 libRblas.0.dylib\ndrwxrwxr-x  3 root     admin       96 23 Apr  2022 libRblas.0.dylib.dSYM\nlrwxr-xr-x  1 weimiao  admin       48 28 Aug 21:10 libRblas.dylib -&gt; /opt/homebrew/opt/openblas/lib/libopenblas.dylib\ndrwxrwxr-x  3 root     admin       96 23 Apr  2022 libRblas.dylib.dSYM\n-rwxrwxr-x  1 root     admin   154464 24 Jun 11:57 libRblas.vecLib.dylib\ndrwxrwxr-x  3 root     admin       96 23 Apr  2022 libRblas.vecLib.dylib.dSYM\n-rwxrwxr-x  1 root     admin  1624976 24 Jun 11:57 libRlapack.0.dylib\nlrwxr-xr-x  1 weimiao  admin       46 28 Aug 21:11 libRlapack.dylib -&gt; /opt/homebrew/opt/openblas/lib/liblapack.dylib\ndrwxrwxr-x  3 root     admin       96 23 Apr  2022 libRlapack.dylib.dSYM\n-rw-rw-r--  1 root     admin   157792 24 Jun 11:57 libgcc_s.1.1.dylib\n-rwxrwxr-x  1 root     admin  1865904 24 Jun 11:57 libgfortran.5.dylib\n-rwxrwxr-x  1 root     admin   367040 24 Jun 11:57 libquadmath.0.dylib\n\n\nwhich will change (c) the directory (d) to R’s framework folder. In this folder, you will see a few files by hitting ls:\n\nlibRblas.0.dylib is the default BLAS library.\nlibRblas.vecLib.dylib is the more efficient vecLib BLAS, which we are going to switch to.\nlibRblas.dylib is of alias file type. This means it’s kind of like a shortcut and points to a another file we set. By default, libRblas.dylib is pointed to libRblas.0.dylib, so R uses the default BLAS library. All we need to do is to relink the libRblas.0.dylib to libRblas.vecLib.dylib, such that R will use the vecLib.\n\nTo do so, type the following command in terminal:\n\n\nCode\nln -sf libRblas.vecLib.dylib libRblas.dylib\n\n\nIf vecLib has issues on your computer3 and you would like to switch back to the default BLAS/LAPACK, simply link the libRblas.dylib back to libRblas.0.dylib, by entering the following command in terminal:\n\n\nCode\nln -sf libRblas.0.dylib libRblas.dylib",
    "crumbs": [
      "Advanced R Tips",
      "Speed Up Matrix Operations"
    ]
  },
  {
    "objectID": "RTip-BLAS.html#performance-comparison",
    "href": "RTip-BLAS.html#performance-comparison",
    "title": "Speed Up Matrix Operations",
    "section": "2.2 Performance Comparison",
    "text": "2.2 Performance Comparison\nWe will compare the performance before and after switching to vecLib using the following R codes. The code generates a 1000 by 1000 matrix, and obtains the inverse of that matrix. I use microbenchmark package to run the inverse operation for 100 times, and capture the performance metrics.\n\n\nCode\nset.seed(888)\nnd = 1000\na &lt;- matrix(rnorm(nd^2), nd, nd)\nlibrary(microbenchmark)\nmb &lt;- microbenchmark(\n  solve(a),\n  times = 100,\n  unit = \"ms\"\n)\n\n\nWhen I use the default BLAS/LAPACK, the benchmark result is as follows:\n\n\nUnit: milliseconds\n     expr     min      lq     mean   median       uq      max neval\n solve(a) 383.953 388.517 400.0499 392.0261 402.7341 629.8773   100\n\n\nAfter we switch to vecLib, the benchmarks are as follows. As can be seen, the speed has increased dramatically!\n\n\nUnit: milliseconds\n     expr     min       lq     mean   median       uq      max neval\n solve(a) 27.6078 30.08605 31.93745 30.75814 31.26055 53.32608   100",
    "crumbs": [
      "Advanced R Tips",
      "Speed Up Matrix Operations"
    ]
  },
  {
    "objectID": "RTip-BLAS.html#footnotes",
    "href": "RTip-BLAS.html#footnotes",
    "title": "Speed Up Matrix Operations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor instance, in my research projects that involve structural modelling, I often need to write my own codes in matrix form to compute the value functions, policy functions, equlibrium computation, etc.↩︎\nApple’s Accelerate framework provides high-performance, energy-efficient computations on the CPU by leveraging its vector-processing capability. For more details, refer to Apple’s documentation here.↩︎\nAs warned by CRAN, “Although fast, it is not under our control and may possibly deliver inaccurate results.”↩︎",
    "crumbs": [
      "Advanced R Tips",
      "Speed Up Matrix Operations"
    ]
  },
  {
    "objectID": "R-InstallR.html",
    "href": "R-InstallR.html",
    "title": "Install and Setup R",
    "section": "",
    "text": "Uninstall Old R and RStudio\n\n\n\nIf you have used R or RStudio before, please uninstall both R and RStudio and follow the guide below to install the latest versions. Otherwise, Quarto may not work properly on older versions.\nIf you switch to a new laptop later on, please come back to this tutorial and reinstall R and RStudio following the same procedures.",
    "crumbs": [
      "R Tutorials",
      "Install and Setup R"
    ]
  },
  {
    "objectID": "R-InstallR.html#for-windows-computers",
    "href": "R-InstallR.html#for-windows-computers",
    "title": "Install and Setup R",
    "section": "1.1 For Windows computers",
    "text": "1.1 For Windows computers\n\nGo to R’s official website in this link\nClick CRAN under Download section\n\n\n\n\n\n\n\nThese are different mirrors for R download. Basically they store the same installation files but on different servers in different places. Simply click into any mirror.\n\n\n\n\n\n\n\nClick into download R for Windows for installation files for Windows computers\n\n\n\n\n\n\n\nDownload and install (1) base and (2) Rtools. It’s recommended to use the default options during the installations.\n\nNotes: The former is the R program, and the latter is the tool to compile R packages.\nIt’s highly recommended to change your system language to English before proceeding, or there could be weird bugs later on.\n\n\n\n\nClick into this link. Download and instsall Quarto CLI plugin.",
    "crumbs": [
      "R Tutorials",
      "Install and Setup R"
    ]
  },
  {
    "objectID": "R-InstallR.html#for-mac-computers",
    "href": "R-InstallR.html#for-mac-computers",
    "title": "Install and Setup R",
    "section": "1.2 For Mac computers",
    "text": "1.2 For Mac computers\n\nGo to R’s official website in this link\nClick CRAN under download section\n\n\n\n\n\n\n\nThese are different mirrors for R download. Basically they store the same installation files but on different servers in different places. Simply click into any mirror.\n\n\n\n\n\n\n\nClick into download R for macOS for the download file\n\n\n\n\n\n\n\nDownload the correct pkg file to install R\n\nif you use Intel based CPU, download the R-4.X.X-x86_64.pkg under “For older Intel Macs”, where X.X.X is the version number.\nif you use Apple’s silicon chip such as M1, M1 pro, or M2, download the R-4.X.X-arm64.pkg under “For Apple Silicon Macs”, where X.X.X is the version number.\nrefer to this link if you don’t know how to check Intel or Apple CPU\n\n\n\n\n\n\n\n\nInstall Command Line Tools following the steps below. This is essential for R to be able to compile packages so do not skip this step.\n\nOpen terminal app on your mac (the icon is in the screenshot)\n\n\nType the following code xcode-select --install into terminal and hit enter to run the code. Admin passwords may be required to proceed. Note that when you type the password, you won’t see any characters on the screen, but the passwords have been entered.\n\n\nThe code may run for a few minutes. This step is to install MacOS tools that can help compile R packages. - If your terminal says “xcode-select: error: command line tools are already installed, use”Software Update” to install updates”. It means the needed tool is already installed on your computer. Then there is nothing needed in this step.\n\n\n\nClick into this link. Download and install Quarto CLI plugin for Mac OS.",
    "crumbs": [
      "R Tutorials",
      "Install and Setup R"
    ]
  },
  {
    "objectID": "R-InstallR.html#check-r-and-rstudio-are-properly-installed",
    "href": "R-InstallR.html#check-r-and-rstudio-are-properly-installed",
    "title": "Install and Setup R",
    "section": "4.1 Check R and RStudio are properly installed",
    "text": "4.1 Check R and RStudio are properly installed\nPlease follow the following steps to make sure you have successfully installed R and RStudio.\n\nStep 1: Launch RStudio from your computer. Check if you see the following screen without any error messages\n\n\n\nStep 2: As shown in the picture, type 1+1 behind the &gt; and hit enter, check if you see a 2 output\n\nIf there are no error messages and you see exactly the same output, then congrats, you have successfully installed R and RStudio!",
    "crumbs": [
      "R Tutorials",
      "Install and Setup R"
    ]
  },
  {
    "objectID": "R-InstallR.html#check-quarto-is-properly-installed",
    "href": "R-InstallR.html#check-quarto-is-properly-installed",
    "title": "Install and Setup R",
    "section": "4.2 Check Quarto is properly installed",
    "text": "4.2 Check Quarto is properly installed\n\nStep 1: Click the green plus sign circled below, and select Quarto Document\n\n\n\nStep 2: Select word and click Create.\n\n\n\nStep 3: Click the Render button. You may be asked to save the qmd file to a location. Save it to your download folder. R will then render the qmd document and generate a docx file, named “untitled.docx” in the same location.\n\n\n\nStep 4: The docx file should look like below. If you can generate the docx file without issues, Quarto has successfully run on your computer!\n\n\nNote that if you see a banner prompting that rmarkdown is not installed, you need click the Install button to install it. In the future, if you ever see a similar banner that prompts “Package XXX required but is not installed”, you should click the Install button to install the missing package, because this package is needed for the current Quarto file to work properly.",
    "crumbs": [
      "R Tutorials",
      "Install and Setup R"
    ]
  },
  {
    "objectID": "R-InstallR.html#why-do-we-need-to-install-rtools-and-commandline-tools",
    "href": "R-InstallR.html#why-do-we-need-to-install-rtools-and-commandline-tools",
    "title": "Install and Setup R",
    "section": "6.1 Why do we need to install Rtools and Commandline tools?",
    "text": "6.1 Why do we need to install Rtools and Commandline tools?\nMany R packages are written in R. Since R is an interpreted language, source code written in R doesn’t have to be translated into system-specific machine language before running. However, some R packages have significant portions written in compiled languages, such as C/C++ or Fortran. These languages need accessory software tools to translate (“compile”) their source code into machine language that can run on a particular system.\nPackage developers have two choices when distributing code for compiled languages:\n\nThey can prepare compiled, realdy-to-use “binaries” matched against common systems, so that people can simply download the binaries and directly use their packages code without having to know how to compile it.\nThey can distribute source code (i.e., the raw C++ codes) only, and expect the user to have the right compiler software to build system-specific runnable code themselves. Rtools and Commandline tools are the compliers that do the job, therefore needed as an additional installation step.\n\nOn UNIX/Linux, only source code is distributed and all packages are compiled from source during installation (for packages written entirely in R, this is trivial!). For Windows and Mac, CRAN makes pre-compiled binaries available. On Windows, install.packages() will only install precompiled binaries, unless explicitly forced to install from source (you can read a lot more about this in the R Installation and Administration guide).",
    "crumbs": [
      "R Tutorials",
      "Install and Setup R"
    ]
  },
  {
    "objectID": "Case-ProfitabilityAnalysis.html#marketing-decision-a-static-view",
    "href": "Case-ProfitabilityAnalysis.html#marketing-decision-a-static-view",
    "title": "Profitability Analysis for Apple Inc",
    "section": "2.1 Marketing Decision: A Static View",
    "text": "2.1 Marketing Decision: A Static View\nThe marketing analytics team has proposed a plan of an influencer marketing campaign. Influencer marketing is a type of social media marketing that entails endorsements and product placement by influencers, individuals and organizations with a reputed expert degree of knowledge or social influence in their industry. Influencers are individuals who have the ability to influence others’ purchasing habits other quantifiable activities by uploading original—often sponsored—content to social media platforms such as TikTok, Instagram, YouTube, Snapchat, or other social media platforms.\nThe team proposes to collaborate with the top tech influencers on Tiktok, Instagram, and Youtube to promote the new iPhone 16. The total one-off budget for endorsement fee is £100 million.\nAnd from historical data, the team estimates that such an influencer campaign can boost the total sales within the next financial year by 2.5%.\n\nQuestion 3Answer\n\n\nBased on the information at hand, should Tom approve the influencer marketing plan?\n\n\nTo decide whether Tom should approve the marketing plan, we need to conduct break-even analyses.\nThe first step is to compute the break-even quantity, as shown in the following code.\n\n\nCode\n# numerator is the marketing expense\n# denominator is the \"extra profit\", or the contribution margin, from selling one more unit\nBEQ &lt;- endorsement_fee / contribution_margin\nBEQ\n\n\n[1] 0.2361442\n\n\nThe next step is to compare BEQ with the estimated incremental sales from the campaign.\n\n\nCode\n# check if incremental sales is greater than BEQ\nincremental_sales &lt;- quantity * endorsement_sales_increase\n\nprint(paste(\"Incremental sales: \", incremental_sales, \" million units\"))\n\n\n[1] \"Incremental sales:  0.25  million units\"\n\n\nCode\nif (incremental_sales &gt; BEQ) {\n    print(\"It is profitable to continue with the influencer marketing campaign.\")\n} else {\n    print(\"It is not profitable to continue with the influencer marketing campaign.\")\n}\n\n\n[1] \"It is profitable to continue with the influencer marketing campaign.\"\n\n\nBEQ is 0.2361442 million units, which means in order not to lose any money, the influencer marketing campaign needs to bring in additional 0.2361442 million units;\nIn reality, the company can actually sell 0.25 million units, so it’s profitable to continue with the influencer marketing campaign.\nTherefore, based on the above reasoning, Tom should approve the influencer marketing campaign.\n\n\n\n\n\n\nSales\n\n\n\nIn this module (and in practice), when we talk about sales, we mean the quantity sales, the number of units sold. For instance, in the case study, the original sales without influencer marketing is 10 million units.\nThe total money made is often called revenue or revenue sales. For instance, in the case study, the original revenue is 6000 million pounds.",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Case Study: Profitability Analysisfor Apple Inc."
    ]
  },
  {
    "objectID": "Case-ProfitabilityAnalysis.html#marketing-decision-a-dynamic-view",
    "href": "Case-ProfitabilityAnalysis.html#marketing-decision-a-dynamic-view",
    "title": "Profitability Analysis for Apple Inc",
    "section": "2.2 Marketing Decision: A Dynamic View",
    "text": "2.2 Marketing Decision: A Dynamic View\nIn the afternoon, during a board meeting, the CFO reported that the company was facing increasing uncertainty regarding future cash flows due to more strict EU regulations on Apple. Specifically, since mid September, alternative app distribution platforms have been allowed on Apple’s devices, which may lead to a significant decrease in Apple’s App Store revenue. Meanwhile, the good news is that the Bank of England has announced a 0.5% decrease in the base interest rate, which will reduce the cost of financing for Apple Inc.\nThe current cost of financing, weighted average cost of capital (WACC),2 is 10% annually. Therefore, any marketing event is recommended to take time value of money into consideration.\nRight after the meeting, Tom asked his team for a decomposition of the predicted annual incremental sales, 2.5%, into a more granular monthly level analysis.\nThe team came back with the predicted monthly incremental sales: with influencer marketing, the first month sales will increase by 0.3% and 0.2% in the following 11 months.\n\nQuestion 4Answer\n\n\nBased on the information at hand, should Tom approve the influencer marketing plan based on Net Present Value method?\n\n\nStep 1: Compute the sequence of monthly cash flows\n\nFirst, we compute the incremental sales percentage for each month, relative to the 10 million. This is a 12-element vector, each element representing the incremental sales percentage.\n\n\n\nCode\n# incremental sales percentage for the first month 0.3%\nincremental.sales.percentage_1stmonth &lt;- 0.003\n\n# incremental sales percentage for the next 11 months, which is 0.2% each month\n# We use rep() to repeat the same value 11 times\nincremental.sales.percentage_next11months &lt;- rep(0.002, 11)\n\n# incremental profit for the next 12 months\n# combine the two vectors using c()\nvector_incremental.sales.percentage_12months &lt;- c(incremental.sales.percentage_1stmonth, incremental.sales.percentage_next11months)\n\n# print the vector\n\nprint(paste(\"Incremental sales percentage for 12 months are \"))\n\n\n[1] \"Incremental sales percentage for 12 months are \"\n\n\nCode\nprint(vector_incremental.sales.percentage_12months)\n\n\n [1] 0.003 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002\n\n\n\nNext, we multiply the incremental sales percentage with quantity, to get the incremental sales in terms of units each month.\n\n\n\nCode\n# multiply the incremental sales percentage with quantity to get the incremental sales in units (million)\nvector_incremental.sales.units_12months &lt;- vector_incremental.sales.percentage_12months * quantity\n\nprint(paste(\"Incremental sales in units for 12 months are \"))\n\n\n[1] \"Incremental sales in units for 12 months are \"\n\n\nCode\nprint(vector_incremental.sales.units_12months)\n\n\n [1] 0.03 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02\n\n\n\nLastly, we multiply the incremental quantity sales with the contribution margin per unit, to get the total contribution margins (incremental profits) for each month, i.e., the CFs for each month.\n\nFor example, the first month’s incremental sales is 0.03 million units, and the contribution margin is 423.47 pounds per unit. Therefore, the incremental profit for the first month is 12.7041 million pounds.\n\n\n\n\nCode\nvector_CF &lt;- vector_incremental.sales.units_12months * contribution_margin\n\nvector_CF\n\n\n [1] 12.7041  8.4694  8.4694  8.4694  8.4694  8.4694  8.4694  8.4694  8.4694\n[10]  8.4694  8.4694  8.4694\n\n\nStep 2. Compute the sequence of discount factors\n\n\nCode\n# divide annual wacc to get monthly wacc\nmonthly_WACC &lt;- 0.1 / 12\n\n# discount factor for 1 month is 1/(1+k)\ndiscount_factor &lt;- 1 / (1 + monthly_WACC)\n\n# Generate a geometric sequence vector of discounted CFs for 12 months\n\nvector_discount_factor &lt;- discount_factor^c(1:12)\n\nprint(paste(\"Discount factors for 12 months are \"))\n\n\n[1] \"Discount factors for 12 months are \"\n\n\nCode\nvector_discount_factor\n\n\n [1] 0.9917355 0.9835394 0.9754110 0.9673497 0.9593551 0.9514265 0.9435635\n [8] 0.9357654 0.9280319 0.9203622 0.9127559 0.9052124\n\n\nStep 3. Compute the NPV\n\nMultiply CF vector with discount factor vector, to get the discounted CF vector for 12 months.\n\n\n\nCode\nvector_discounted.CF &lt;- vector_CF * vector_discount_factor\n\nvector_discounted.CF\n\n\n [1] 12.599107  8.329988  8.261146  8.192872  8.125162  8.058012  7.991417\n [8]  7.925372  7.859873  7.794915  7.730495  7.666606\n\n\n\nuse function sum() to get the sum of all elements in a vector. That is, the sum of discounted cash flows in all 12 months.\n\n\n\nCode\nprint(paste(\"The sum of discounted cash flows for 12 months is \"))\n\n\n[1] \"The sum of discounted cash flows for 12 months is \"\n\n\nCode\nsum(vector_discounted.CF)\n\n\n[1] 100.535\n\n\n\nWe need to subtract the endorsement fee, which is the marketing expense, to get the net present value\n\n\n\nCode\nNPV &lt;- sum(vector_discounted.CF) - endorsement_fee\n\nprint(paste(\"The Net Present Value is \"))\n\n\n[1] \"The Net Present Value is \"\n\n\nCode\nNPV\n\n\n[1] 0.5349641\n\n\n\n\nCode\nif (NPV &gt; 0) {\n    print(\"It is profitable to continue with the influencer marketing campaign, because the NPV is positive.\")\n} else {\n    print(\"It is not profitable to continue with the influencer marketing campaign, because the NPV is negative.\")\n}\n\n\n[1] \"It is profitable to continue with the influencer marketing campaign, because the NPV is positive.\"",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Case Study: Profitability Analysisfor Apple Inc."
    ]
  },
  {
    "objectID": "Case-ProfitabilityAnalysis.html#footnotes",
    "href": "Case-ProfitabilityAnalysis.html#footnotes",
    "title": "Profitability Analysis for Apple Inc",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDr Meow’s personal favorite! Highly recommended after a long day of studies. Go for 30% sugar, less ice—trust me, it’s perfection! 🧋↩︎\nWACC is the average rate of return a company expects to compensate all its different investors. It reflects the cost of capital for the company, which is usually a blend of the cost of equity and the cost of debt.↩︎",
    "crumbs": [
      "Lectures",
      "[Week 1] Module Introduction and Profitability Analysis",
      "Case Study: Profitability Analysisfor Apple Inc."
    ]
  },
  {
    "objectID": "R-Basics.html",
    "href": "R-Basics.html",
    "title": "R Basics",
    "section": "",
    "text": "Primary language is Python\n\nProgramming (MSIN00143), Business Strategy (MSIN0093), Machine Learning electives\n\nSecondary language is R\n\nMarketing Analytics (MSIN0094), Statistical Foundations (MSIN0096)\n\n\n\n\n\n\nR project was initiated by Robert Gentleman and Ross Ihaka (Univ of Auckland) in 1991; both are statisticians, who later made the language open-source.\nSince 1997, R has been developed by the R Core Team on CRAN.\nAs of January 2022, it has almost 20k contributed packages.\nAs of 2024, R is ranked 18th in the TIOBE index1.\n\n\n\n\n\nHighly powerful data analytics and visualizations, including2\n\nData wrangling (dplyr) and data visualization (ggplot)\nStatistics and Econometrics (major advantage of R over Python)\nPredictive analytics such as machine learning\n\nWrite beautiful reports, dissertations, presentations using Quarto\n\nWrite your MSc dissertation\nEffortlessly build websites. I built and maintain my personal website and the marketing course website all in R.\n\n\n\n\n\n\nAs you will be learning Python in the programming course, it’s good to know the differences between R and Python. In addition to the general comparison below, I have also prepared a detailed side-by-side comparison of R and Python here.\nIt’s highly recommended that when you learn both languages at the same time, you should be able to compare them side-by-side often.\n\n\nR versus Python\n\n\n\n\n\n\n\n\nR\nPython\n\n\n\n\nLanguage purpose\nR is a statistical language specialized in the data analytics and visualization.\nBest for data science, may not be robust for production environment.\nPython is a general-purpose language that is used for the deployment and development of various projects.\nBest for production environment.\n\n\nData analytics\nR is better at statistical models and econometrics.\nPython is better at machine learning due to support from PyTorch and TensorFlow.\n\n\nIDEs (Integrated Development Environment)\nRStudio\nMany options such as Jupyter Notebook, Spyder, Pycharm, etc.\n\n\nTargeted users\nPrimary users of R include data scientists and researchers in academia, who heavily rely on data analyses and visualization.\nPrimary users of python include developers and programmers.\n\n\n\n\n\n\nR is the programming language, and we need a “place” to write codes. This place is called an Integrated development environment (IDE).\nRStudio is so far the best R IDE. And it’s interface consists of the following major panels (clockwise from top left):\n\nscript: (top left) where you do the coding\nenvironment: (top right) a list of named objects that we have generated\nhistory: (top right) the list of past commands that we have used\nhelp: (bottom right) user manuals of functions available in R\npackage: (bottom right) a collection of ready-to-use packages written by others\nconsole: (bottom left) where you can run commands interactively with R and see code outputs\n\n\n\n\n\n\nYou can write codes interactively in the R console. See an example: Type the following code into your console and see what happens.\n\n\nCode\nprint(\"Hello World\")\n\n\n[1] \"Hello World\"\n\n\nUsed for simple exploratory, unstructured tasks, where you don’t need to keep a record of codes.\n\ne.g., summary statistics; check variable values, etc.\n\n\n\n\n\n\nQuarto3 files have a .qmd suffix. You can think of Quarto as Microsoft Word that can run R codes.\nIf you have experience with Jupyter Notebook, Quarto is the R equivalent of Jupyter Notebook, but just much more powerful.\nQuarto can create dynamic contents with R, conveniently combining data analytics work with beautiful reporting.\nNow, let’s create a new quarto file together! Name it “MyFavoriteShow.qmd” and save it to your download folder.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#bilingual-arrangements-at-msc-ba",
    "href": "R-Basics.html#bilingual-arrangements-at-msc-ba",
    "title": "R Basics",
    "section": "",
    "text": "Primary language is Python\n\nProgramming (MSIN00143), Business Strategy (MSIN0093), Machine Learning electives\n\nSecondary language is R\n\nMarketing Analytics (MSIN0094), Statistical Foundations (MSIN0096)",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#a-brief-history-of-r",
    "href": "R-Basics.html#a-brief-history-of-r",
    "title": "R Basics",
    "section": "",
    "text": "R project was initiated by Robert Gentleman and Ross Ihaka (Univ of Auckland) in 1991; both are statisticians, who later made the language open-source.\nSince 1997, R has been developed by the R Core Team on CRAN.\nAs of January 2022, it has almost 20k contributed packages.\nAs of 2024, R is ranked 18th in the TIOBE index1.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#why-learn-r",
    "href": "R-Basics.html#why-learn-r",
    "title": "R Basics",
    "section": "",
    "text": "Highly powerful data analytics and visualizations, including2\n\nData wrangling (dplyr) and data visualization (ggplot)\nStatistics and Econometrics (major advantage of R over Python)\nPredictive analytics such as machine learning\n\nWrite beautiful reports, dissertations, presentations using Quarto\n\nWrite your MSc dissertation\nEffortlessly build websites. I built and maintain my personal website and the marketing course website all in R.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#one-one-comparison-with-python",
    "href": "R-Basics.html#one-one-comparison-with-python",
    "title": "R Basics",
    "section": "",
    "text": "As you will be learning Python in the programming course, it’s good to know the differences between R and Python. In addition to the general comparison below, I have also prepared a detailed side-by-side comparison of R and Python here.\nIt’s highly recommended that when you learn both languages at the same time, you should be able to compare them side-by-side often.\n\n\nR versus Python\n\n\n\n\n\n\n\n\nR\nPython\n\n\n\n\nLanguage purpose\nR is a statistical language specialized in the data analytics and visualization.\nBest for data science, may not be robust for production environment.\nPython is a general-purpose language that is used for the deployment and development of various projects.\nBest for production environment.\n\n\nData analytics\nR is better at statistical models and econometrics.\nPython is better at machine learning due to support from PyTorch and TensorFlow.\n\n\nIDEs (Integrated Development Environment)\nRStudio\nMany options such as Jupyter Notebook, Spyder, Pycharm, etc.\n\n\nTargeted users\nPrimary users of R include data scientists and researchers in academia, who heavily rely on data analyses and visualization.\nPrimary users of python include developers and programmers.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#a-first-look-at-the-rstudio-interface",
    "href": "R-Basics.html#a-first-look-at-the-rstudio-interface",
    "title": "R Basics",
    "section": "",
    "text": "R is the programming language, and we need a “place” to write codes. This place is called an Integrated development environment (IDE).\nRStudio is so far the best R IDE. And it’s interface consists of the following major panels (clockwise from top left):\n\nscript: (top left) where you do the coding\nenvironment: (top right) a list of named objects that we have generated\nhistory: (top right) the list of past commands that we have used\nhelp: (bottom right) user manuals of functions available in R\npackage: (bottom right) a collection of ready-to-use packages written by others\nconsole: (bottom left) where you can run commands interactively with R and see code outputs",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#where-to-write-r-codes-i-console",
    "href": "R-Basics.html#where-to-write-r-codes-i-console",
    "title": "R Basics",
    "section": "",
    "text": "You can write codes interactively in the R console. See an example: Type the following code into your console and see what happens.\n\n\nCode\nprint(\"Hello World\")\n\n\n[1] \"Hello World\"\n\n\nUsed for simple exploratory, unstructured tasks, where you don’t need to keep a record of codes.\n\ne.g., summary statistics; check variable values, etc.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#where-to-write-r-codes-ii-.qmd-script",
    "href": "R-Basics.html#where-to-write-r-codes-ii-.qmd-script",
    "title": "R Basics",
    "section": "",
    "text": "Quarto3 files have a .qmd suffix. You can think of Quarto as Microsoft Word that can run R codes.\nIf you have experience with Jupyter Notebook, Quarto is the R equivalent of Jupyter Notebook, but just much more powerful.\nQuarto can create dynamic contents with R, conveniently combining data analytics work with beautiful reporting.\nNow, let’s create a new quarto file together! Name it “MyFavoriteShow.qmd” and save it to your download folder.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#yaml-header",
    "href": "R-Basics.html#yaml-header",
    "title": "R Basics",
    "section": "2.1 YAML header",
    "text": "2.1 YAML header\n\nYou can think of YAML header as a MS Word template, which determines how your final report looks like (font, font size, color, margins, etc.).\nThe YAML header is always at the beginning of a document, separated from the main text by three dashes (---). YAML does not appear in the final report.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#authoring-with-normal-texts",
    "href": "R-Basics.html#authoring-with-normal-texts",
    "title": "R Basics",
    "section": "2.2 Authoring with normal texts",
    "text": "2.2 Authoring with normal texts\nRStudio provides two ways to edit a quarto file (1) visual mode and (2) source mode.\n\nRStudio’s visual editor offers a Microsoft-Word like experience for you to write R codes.\n\nExplore the rich formatting tools available for report authoring\n\nIf you are familiar with markdown syntax, you can use the source mode to write the report (optional; for advanced users only).\n\n\n\n\n\n\n\n\nVisual Mode versus Source Mode\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a new quarto file from RStudio with the following level-1 and level-2 headers\nLevel 1: Slowhorse Season 4\nLevel 2: Episode 1: Identity Theft\nBody: A London bombing puts Taverner under pressure. When River grows concerned for his grandfather, Louisa encourages him to go for a visit.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#coding-with-code-blocks",
    "href": "R-Basics.html#coding-with-code-blocks",
    "title": "R Basics",
    "section": "2.3 Coding with code blocks",
    "text": "2.3 Coding with code blocks\n\nIn qmd files, we write R codes in so-called code chunks (sometimes referred to as code cells or code blocks) identified with {r}.\nTo insert a code chunk, click Insert -&gt;Code Chunk -&gt; R. You can also use the shortcut Ctrl + Alt + I or Cmd + Option + I.\n\n\n\n\n\n\n\nCaveat\n\n\n\nEnsure the first line remains {r} only and do not include any comments or code on this line.\n\n\n\nYou can run each code chunk interactively by clicking the green solid triangle (run current code chunk). RStudio executes the codes in the code chunk and displays the results.\nSee an example and try on your computer!\n\n\n\nCode\nprint(\"R is the Best Language! Way better than Python! The battle is on!\")\n\n\n[1] \"R is the Best Language! Way better than Python! The battle is on!\"\n\n\n\n\n\n\n\n\nExercise\n\n\n\nInsert the above R code block in your quarto file under any section.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#rendering-a-report",
    "href": "R-Basics.html#rendering-a-report",
    "title": "R Basics",
    "section": "2.4 Rendering a report",
    "text": "2.4 Rendering a report\nAt the end, when the Quarto document (including codes and main texts) are ready, use the Render button in the RStudio IDE to render the file.\nThe rendered report will be in the same folder with your qmd file.\n\n\n\n\n\n\n\nExercise\n\n\n\nRender your quarto file into a document and see how it looks like.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#more-learning-resources-for-quarto-optional",
    "href": "R-Basics.html#more-learning-resources-for-quarto-optional",
    "title": "R Basics",
    "section": "2.5 More learning resources for Quarto (Optional)",
    "text": "2.5 More learning resources for Quarto (Optional)\n\nThe available YAML fields vary based on document format\n\nHere for YAML fields for PDF documents\nHere for MS Word\nHere for HTML documents\n\nMarkdown syntax\n\nMarkdown basics\nMarkdown practice\n\nQuarto (recommended to be reviewed after-class)\n\nGet started",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#named-objects",
    "href": "R-Basics.html#named-objects",
    "title": "R Basics",
    "section": "3.1 Named objects",
    "text": "3.1 Named objects\n\nR is an object-oriented language, so we will be working on named objects.\nWe use the left arrow &lt;- to create a named object, the keyboard shortcut for &lt;- for windows users is Alt + -, or for mac users, Option + -.\nThe &lt;- is an assignment operator, which assigns the R objects on the RHS to the name on the LHS.4\nThe below code creates a new object called ‘x’ in R; x is a numeric object; its value is 3.\n\n\n\nCode\n# create an object x with value 3\nx &lt;- 3\n\n\n\nAfter an object is created, we can refer to the object by its name\n\n\n\nCode\n# print out x\nx\n\n\n[1] 3\n\n\n\nWe can also perform operations on the object\n\n\n\nCode\n# Question: hmmm, why does Wei choose these two numbers?\nx^2\n\n\n[1] 9\n\n\nCode\nx^3\n\n\n[1] 27\n\n\n\n\n\n\n\n\nExercise\n\n\n\nInsert a code block in your quarto file, which does the following:\n\nCreate an object with name ‘x’ with the formula of 2 + 2",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#rules-for-naming-object",
    "href": "R-Basics.html#rules-for-naming-object",
    "title": "R Basics",
    "section": "3.2 Rules for naming object",
    "text": "3.2 Rules for naming object\nFor a variable to be valid, it should follow these rules\n\nIt should contain letters, numbers, and only dot or underscore characters.\nIt cannot start with a number (eg: 2iota), or a dot, or an underscore.\n\n\n\nCode\n# 2iota &lt;- 2\n# .iota &lt;- 2\n# _iota &lt;- 2\n\n\n\nIt should not be a reserved word in R (eg: mean, sum, etc.).\n\n\n\nCode\n# mean &lt;- 2\n\n\n\n\n\n\n\n\nTips\n\n\n\nIn the future, it’s good practice to use memorable names to name an object\n\nFor instance, use prefix “df_” or “data_” to name datasets.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#functions",
    "href": "R-Basics.html#functions",
    "title": "R Basics",
    "section": "3.3 Functions",
    "text": "3.3 Functions\n\nA function usually takes (one or several) objects as input, run specific operations on the object(s) defined by the function, and then return an output.\nFor instance, an R’s built-in function sqrt() takes a number as input, and returns the square root of the number. Let’s use it on object x.\n\n\n\nCode\nsqrt(x)\n\n\n[1] 1.732051\n\n\n\nWe will heavily rely on functions to conduct data analyses. For how to use a new function, search the function in RStudio’s help panel.\n\n\n\n\n\n\n\nExercise\n\n\n\n\nSearch and learn the usage of function “log()”.\nInsert a code block in your quarto file to compute the logarithm of x.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#collection-of-functions-packages",
    "href": "R-Basics.html#collection-of-functions-packages",
    "title": "R Basics",
    "section": "3.4 Collection of functions: Packages",
    "text": "3.4 Collection of functions: Packages\nThe base R already comes with many useful built-in functions to perform basic tasks, but as data scientists, we need more.\nTo perform certain tasks (such as a machine learning model), we can definitely write our own code from scratch, but it takes lots of (unnecessary) effort. Fortunately, many packages have been written by others for us to directly use.\n\nTo download a package, hit Tools -&gt; Install Packages in RStudio, and type the package name in the pop-up window. Now, download the package praise.\nTo load the packages, we need to type library().\n\n\n\nCode\nlibrary(praise)\n\n\n\nNow that the package is loaded, you can use the functions in it. praise() is a function in the praise package.\n\n\n\nCode\npraise()\n\n\n[1] \"You are kryptonian!\"\n\n\n\n\n\n\n\n\nTips\n\n\n\n\nPackages need to be downloaded only once, but need to be loaded every time you restart the RStudio.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#comment-codes",
    "href": "R-Basics.html#comment-codes",
    "title": "R Basics",
    "section": "3.5 Comment codes",
    "text": "3.5 Comment codes\nYou can put a # before any code, to indicate that any codes after the # on the same line are your comments, and will not be run by R.\nIt’s a good practice to often comment your codes, so that you can help the future you to remember what you were trying to achieve.\n\n\nCode\n# print(\"Let's fund Wei for an iPhone 16 Pro Max as a birthday gift!\")\n\n\n\n\nCode\n# Is x 1 or 2 below?\nx &lt;- 1 # +1",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#data-types",
    "href": "R-Basics.html#data-types",
    "title": "R Basics",
    "section": "4.1 Data types",
    "text": "4.1 Data types\n\n4.1.1 Numeric\n\nWe can use R as a calculator for numeric objects\n\n\n\nCode\n# Numeric Vector\nnum2 &lt;- 2.5\nlog(num2)\n\n\n[1] 0.9162907\n\n\nCode\nnum2^2\n\n\n[1] 6.25\n\n\nCode\nexp(num2)\n\n\n[1] 12.18249\n\n\n\n\n4.1.2 Logical (TRUE, FALSE):\n\nLogical objects are used to store logical values, such as TRUE and FALSE.\n\n\n\nCode\nnum2 &lt;- 2.5\n\n# larger than 2?\nnum2 &gt; 2\n\n\n[1] TRUE\n\n\nCode\n# smaller than 2?\nnum2 &lt; 2\n\n\n[1] FALSE\n\n\nCode\n# equal to 2?\nnum2 == 2\n\n\n[1] FALSE\n\n\nCode\n# not equal to 2?\nnum2 != 2\n\n\n[1] TRUE\n\n\n\nSometimes, we may need to operation on multiple relational operations. We can use logical operators to combine multiple relational operations.\n\n\n\nCode\nT & F # and\n\n\n[1] FALSE\n\n\nCode\nT | F # or\n\n\n[1] TRUE\n\n\nCode\n!T # not\n\n\n[1] FALSE\n\n\n\nFor instance, we may want to know if a number is between 3 and 8.\n\n\n\nCode\nnum2 &gt;= 3 & num2 &lt;= 8\n\n\n[1] FALSE\n\n\n\n\n4.1.3 Character:\n\nCharacters are enclosed within a pair of quotation marks.\nSingle or double quotation marks can both work.\nEven if a character may contain numbers, it will be treated as a character, and R will not perform any mathematical operations on it.\n\n\n\nCode\nstr1 &lt;- \"1 + 1 = 2\"",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#check-data-types-using-class",
    "href": "R-Basics.html#check-data-types-using-class",
    "title": "R Basics",
    "section": "4.2 Check data types using class()",
    "text": "4.2 Check data types using class()\nWe can use class() to check the type of an object in R.\n\n\nCode\na &lt;- \"1+1\"\nclass(a)\n\n\n[1] \"character\"\n\n\n\n\nCode\nb &lt;- 1 + 1\nclass(b)\n\n\n[1] \"numeric\"\n\n\nThis is very useful when we first load data from external databases, we need to make sure variables are of the correct data types.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#data-type-conversion",
    "href": "R-Basics.html#data-type-conversion",
    "title": "R Basics",
    "section": "4.3 Data type: conversion",
    "text": "4.3 Data type: conversion\nSometimes, data types of variables from raw data may not be what we want; we need to change the data type of a variable to the appropriate one.\nSee the following example:\n\na is a string, and we cannot use mathematical operations on it, or R will report errors.\n\n\n\nCode\na &lt;- \"1\"\nclass(a)\n\n\n[1] \"character\"\n\n\nCode\na + 1\n\n\nError in a + 1: non-numeric argument to binary operator\n\n\n\nWe can convert a to a numeric value. To convert from character to numeric, we use as.numeric()\n\n\n\nCode\nb &lt;- as.numeric(a)\nclass(b)\n\n\n[1] \"numeric\"",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#creating-vectors",
    "href": "R-Basics.html#creating-vectors",
    "title": "R Basics",
    "section": "5.1 Creating vectors",
    "text": "5.1 Creating vectors\n\n5.1.1 Creating vectors: c()\n\nIn R, a vector is a collection of elements of the same data type, which is often used to store a variable of a dataset. For instance, a vector can store the income of a group of people, the final grades of students, etc.\nVector can be created using the function c() by listing all the values in the parenthesis, separated by comma ‘,’.\nc() stands for “combine”.\n\n\n\nCode\nIncome &lt;- c(1, 3, 5, 10)\nIncome\n\n\n[1]  1  3  5 10\n\n\n\nVectors must contain elements of the same data type. If they do not, R will automatically convert all elements into the same type, typically characters.\n\n\n\nCode\nx &lt;- c(1, \"intro\", TRUE)\nclass(x)\n\n\n[1] \"character\"\n\n\n\n\n5.1.2 Checking the number of elements in a vector: length()\nYou can measure the length of a vector using the command length()\n\n\nCode\nx &lt;- c(\"R\", \" is\", \" the\", \" best\", \" language\")\nlength(x)\n\n\n[1] 5\n\n\n\n\n5.1.3 Creating numeric sequences: seq()\nIt is also possible to easily create sequences with patterns\n\nuse seq() to create sequence with fixed steps\n\n\n\nCode\n# use seq()\nseq(from = 1, to = 2, by = 0.1)\n\n\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n\n\n\nIf the step is 1, there’s a convenient way using :\n\n\n\nCode\n1:5\n\n\n[1] 1 2 3 4 5\n\n\n\n\n5.1.4 Concatenate multiple vectors into one: c()\n\nSometimes, we may want to concatenate multiple vectors into one. For instance, we may have collected income data from two different sources, and we want to concatenate them into one vector.\nWe can use c() to concatenate different vectors; this is very commonly used to concatenate vectors.\n\n\n\nCode\nIncome1 &lt;- 1:3\nIncome2 &lt;- c(10, 15)\n\n\n\n\nCode\nc(Income1, Income2)\n\n\n[1]  1  2  3 10 15\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a sequence of {1,1,2,2,3,3,3}.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#indexing-and-subsetting",
    "href": "R-Basics.html#indexing-and-subsetting",
    "title": "R Basics",
    "section": "5.2 Indexing and subsetting",
    "text": "5.2 Indexing and subsetting\nWe put the index of elements we would like to extract in a square bracket [ ].\n\n\nCode\n# create a vector of income for 4 lecturers at UCL\n\nincome &lt;- c(5000, 5500, 6000, 9000)\n\n\n\nExtract a single element: use the index of the element\n\n\n\nCode\n# what is the income of the 3rd lecturer?\nincome[3]\n\n\n[1] 6000\n\n\n\nExtract multiple elements: use a vector of indices\n\n\n\nCode\n# what are the incomes of the 1st, 3rd, and 4th lecturers?\nincome[c(1, 3, 4)]\n\n\n[1] 5000 6000 9000",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#element-wise-arithmetic-operations",
    "href": "R-Basics.html#element-wise-arithmetic-operations",
    "title": "R Basics",
    "section": "5.3 Element-wise arithmetic operations",
    "text": "5.3 Element-wise arithmetic operations\nR is a vectorized language, which broadcasts operations to all elements in a vector. This behavior is also called element-wise operations, or broadcasting.\n\nIf you operate on a vector with a single number, the operation will be applied to all elements in the vector\n\n\n\nCode\nx &lt;- c(1, 3, 8, 7)\n\n\n\n\nCode\nx + 2\n\n\n[1]  3  5 10  9\n\n\n\n\nCode\nx * 2\n\n\n[1]  2  6 16 14\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a geometric sequence {2,4,8,16,32} using seq().",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#elementwise-relational-operations",
    "href": "R-Basics.html#elementwise-relational-operations",
    "title": "R Basics",
    "section": "5.4 Elementwise relational operations",
    "text": "5.4 Elementwise relational operations\n\nBesides arithmetic operations, we can also perform relational operations on vectors.\n\n\n\nCode\nx &lt;- c(1, 3, 8, 7)\nx &gt; 2\n\n\n[1] FALSE  TRUE  TRUE  TRUE\n\n\n\nWe can also compare a vector with a vector, because R is vectorized\n\n\n\nCode\nincomeUCL &lt;- c(6000, 4600, 7000, 9100, 10000)\nincomeImperial &lt;- c(5000, 4500, 6000, 9000, 10000)\nincomeUCL &gt; incomeImperial\n\n\n[1]  TRUE  TRUE  TRUE  TRUE FALSE",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#special-relational-operation-in",
    "href": "R-Basics.html#special-relational-operation-in",
    "title": "R Basics",
    "section": "5.5 Special relational operation: %in%",
    "text": "5.5 Special relational operation: %in%\n\nA special relational operation is %in% in R, which tests whether an element exists in the object.\n\n\n\nCode\nx &lt;- c(1, 3, 8, 7)\n\n3 %in% x\n\n\n[1] TRUE\n\n\nCode\n2 %in% x\n\n\n[1] FALSE",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#after-class-exercise",
    "href": "R-Basics.html#after-class-exercise",
    "title": "R Basics",
    "section": "5.6 After-class exercise",
    "text": "5.6 After-class exercise\n\nCreate a vector of 10 numbers from 1 to 10, and extract the 2nd, 4th, and 6th elements.\nCreate a vector of 5 numbers from 1 to 5, and check if 3 is in the vector.\nNow the interest rate is 0.1, and you have 1000 pounds in your bank account. Calculate the amount in your bank account after 1 year, 2 years, and 3 years, respectively.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#matrices-creating-matrices",
    "href": "R-Basics.html#matrices-creating-matrices",
    "title": "R Basics",
    "section": "6.1 Matrices: creating matrices",
    "text": "6.1 Matrices: creating matrices\n\n6.1.1 Creating matrices: matrix()\n\nA matrix can be created using the command matrix()\n\nthe first argument is the vector to be converted into matrix\nthe second argument is the number of rows\nthe last argument is the number of cols\n\n\n\n\nCode\nmatrix(1:9, nrow = 3, ncol = 3)\n\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n\n\n\n\n\nImportant\n\n\n\nR by default inserts elements vertically by columns.\n\n\n\nR will fill in the matrix by column and discard the remaining extra elements once fully filled, with a warning message\n\n\n\nCode\nmatrix(1:9, nrow = 3, ncol = 2)\n\n\nWarning in matrix(1:9, nrow = 3, ncol = 2): data length [9] is not a\nsub-multiple or multiple of the number of columns [2]\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\n\n6.1.2 Creating matrices: inserting by row\nHowever, we can ask R to insert by rows by setting the byrow argument.\n\n\nCode\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\n6.1.3 Creating matrices: concatenate matrices cbind() and rbind()\nWe can use cbind() and rbind() to concatenate vectors and matrices into new matrices.\n\ncbind() does the column binding\n\n\n\nCode\na &lt;- matrix(1:6, nrow = 2, ncol = 3)\n\na\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nCode\ncbind(a, a) # column bind\n\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    3    5    1    3    5\n[2,]    2    4    6    2    4    6\n\n\n\nrbind() does the row binding\n\n\n\nCode\nrbind(a, a) # row bind\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n[3,]    1    3    5\n[4,]    2    4    6",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#matrices-indexing-and-subsetting",
    "href": "R-Basics.html#matrices-indexing-and-subsetting",
    "title": "R Basics",
    "section": "6.2 Matrices: indexing and subsetting",
    "text": "6.2 Matrices: indexing and subsetting\nMatrices have two dimensions: rows and columns. Therefore, to extract elements from a matrix, we just need to specify which row(s) and which column(s) we want.\n\n\nCode\nx &lt;- matrix(1:9, nrow = 3, ncol = 3)\nx\n\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\nExtract the element in the 2nd row, 3rd column.\n\nuse square bracket with a coma inside [ , ] to indicate subsetting; the argument before coma is the row index, and the argument after the coma is the column index.\n\n2 is specified for row index, so we will extract elements from the first row\n3 is specified for column index, so we will extract elements from the the second column\nAltogether, we extract a single element in row 2, column 3.\n\n\n\n\n\nCode\nx[2, 3] # the element in the 2nd row, 3rd column\n\n\n[1] 8\n\n\n\nIf we leave blank for a dimension, we extract all elements along that dimension.\n\nif we want to take out the entire first row\n\n1 is specified for the row index\ncolumn index is blank\n\n\n\n\n\nCode\nx[1, ] # all elements in the first row\n\n\n[1] 1 4 7\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nExtract all elements in the second column\nExtract all elements in the first and third rows",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#matrices-operations",
    "href": "R-Basics.html#matrices-operations",
    "title": "R Basics",
    "section": "6.3 Matrices: operations",
    "text": "6.3 Matrices: operations\n\n6.3.1 Apply a math function to a matrix\nLet’s use 3 matrices x, y, and z:\n\n\nCode\nx &lt;- matrix(1:6, nrow = 3)\ny &lt;- matrix(1:6, byrow = T, nrow = 2)\nx\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nCode\ny\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\nFunctions will be vectorized over all elements in a matrix\n\n\n\nCode\nz &lt;- x^2\nz\n\n\n     [,1] [,2]\n[1,]    1   16\n[2,]    4   25\n[3,]    9   36\n\n\n\n\n6.3.2 Matrices’ operations: matrix addition and multiplication\n\nIf the two matrices are of the same dimensions, they can do element-wise operations, including element-wise addition and element-wise multiplication\n\n\n\nCode\nx + z # elementwise addition\n\n\n     [,1] [,2]\n[1,]    2   20\n[2,]    6   30\n[3,]   12   42\n\n\n\n\nCode\nx * x\n\n\n     [,1] [,2]\n[1,]    1   16\n[2,]    4   25\n[3,]    9   36\n\n\n\nIf we want to perform the matrix multiplication as in linear algebra, we need to use %*%\n\nx and y must have conforming dimensions\n\n\n\n\nCode\nx\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nCode\ny\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\nCode\nx %*% y # matrix multiplication\n\n\n     [,1] [,2] [,3]\n[1,]   17   22   27\n[2,]   22   29   36\n[3,]   27   36   45\n\n\n\n\n6.3.3 Matrices’ operations: inverse and transpose\n\nWe use t() to do matrix transpose\n\n\n\nCode\nx\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nCode\nt(x) # transpose\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\nWe use solve() to get the inverse of an matrix\n\n\n\nCode\nx\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nCode\nsolve(t(x) %*% x) # inverse; must be on a square matrix\n\n\n           [,1]       [,2]\n[1,]  1.4259259 -0.5925926\n[2,] -0.5925926  0.2592593",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#data-frames-creating-data.frame",
    "href": "R-Basics.html#data-frames-creating-data.frame",
    "title": "R Basics",
    "section": "7.1 Data Frames: creating data.frame",
    "text": "7.1 Data Frames: creating data.frame\n\n7.1.1 Data Frames: create dataframe using data.frame()\n\nYou can think of data.frame as a spreadsheet in excel.\n\n\n\nCode\ndf &lt;- data.frame(\n    id = 1:4,\n    name = c(\"David\", \"Karima\", \"Anil\", \"Wei\"),\n    wage = rnorm(n = 4, mean = 10^5, sd = 10^3),\n    male = c(T, T, T, T)\n)\ndf\n\n\n\n  \n\n\n\n\nData frames can also be created from external sources, e.g., from a csv file or database.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#data-frames-basics",
    "href": "R-Basics.html#data-frames-basics",
    "title": "R Basics",
    "section": "7.2 Data Frames: Basics",
    "text": "7.2 Data Frames: Basics\n\nEach row stands for an observation; each column stands for a variable.\nEach variable should have a unique name.\nEach column must contain the same data type, but the different columns can store different data types.\n\ncompare with matrix?\n\nEach column must be of same length, because rows have the same length across variables.",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#data-frames-check-dimensions-and-variable-types",
    "href": "R-Basics.html#data-frames-check-dimensions-and-variable-types",
    "title": "R Basics",
    "section": "7.3 Data Frames: check dimensions and variable types",
    "text": "7.3 Data Frames: check dimensions and variable types\n\nYou can verify the size of the data.frame using the command dim(); or nrow() and ncol()\n\n\n\nCode\ndim(df)\n\n\n[1] 4 4\n\n\nCode\nnrow(df)\n\n\n[1] 4\n\n\nCode\nncol(df)\n\n\n[1] 4\n\n\n\nYou can get the data type info using the command str()\n\n\n\nCode\nstr(df)\n\n\n'data.frame':   4 obs. of  4 variables:\n $ id  : int  1 2 3 4\n $ name: chr  \"David\" \"Karima\" \"Anil\" \"Wei\"\n $ wage: num  100023 98682 100462 100024\n $ male: logi  TRUE TRUE TRUE TRUE\n\n\n\nGet the variables names of the data frame\n\n\n\nCode\nnames(df)\n\n\n[1] \"id\"   \"name\" \"wage\" \"male\"",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#arrays",
    "href": "R-Basics.html#arrays",
    "title": "R Basics",
    "section": "8.1 Arrays",
    "text": "8.1 Arrays\n\nWe can use array() to generate a high-dimensional array\nJust like vectors and matrices, arrays can include only data types of the same kind.\nA 3D array is basically a combination of matrices each laid on top of other\n\n\n\nCode\nx &lt;- 1:4\nx &lt;- array(data = x, dim = c(2, 3, 2))\nx\n\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    1\n[2,]    2    4    2\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    3    1    3\n[2,]    4    2    4",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#lists",
    "href": "R-Basics.html#lists",
    "title": "R Basics",
    "section": "8.2 Lists",
    "text": "8.2 Lists\nA list is an R object that can contain anything. List is pretty useful when you need to store objects for latter use.\n\n\nCode\nx &lt;- 1:2\ny &lt;- c(\"a\", \"b\")\nL &lt;- list(numbers = x, letters = y)",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#lists-indexing-and-subsetting",
    "href": "R-Basics.html#lists-indexing-and-subsetting",
    "title": "R Basics",
    "section": "8.3 Lists: indexing and subsetting",
    "text": "8.3 Lists: indexing and subsetting\nThere are many ways to extract a certain element from a list.\n\nby index\nby the name of the element\nby dollar sign $\n\n\n\nCode\nL[[1]] # extract the first element\n\n\n[1] 1 2\n\n\nCode\nL[[\"numbers\"]] # based on element name\n\n\n[1] 1 2\n\n\nCode\nL$numbers # extract the element called numbers\n\n\n[1] 1 2\n\n\nAfter extracting the element, we can work on the element further:\n\n\nCode\nL$numbers[1:3] &gt; 2\n\n\n[1] FALSE FALSE    NA",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#ifelse",
    "href": "R-Basics.html#ifelse",
    "title": "R Basics",
    "section": "9.1 if/else",
    "text": "9.1 if/else\nSometimes, you want to run your code based on different conditions. For instance, if the observation is a missing value, then use the population average to impute the missing value. This is where if/else kicks in.\nif (condition == TRUE) {\n  action 1\n} else if (condition == TRUE ){\n  action 2\n} else {\n  action 3\n}\nExample 1:\n\n\nCode\na &lt;- 15\n\nif (a &gt; 10) {\n    larger_than_10 &lt;- TRUE\n} else {\n    larger_than_10 &lt;- FALSE\n}\n\nlarger_than_10\n\n\n[1] TRUE\n\n\nExample 2:\n\n\nCode\nx &lt;- -5\nif (x &gt; 0) {\n    print(\"x is a non-negative number\")\n} else {\n    print(\"x is a negative number\")\n}\n\n\n[1] \"x is a negative number\"",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#loops",
    "href": "R-Basics.html#loops",
    "title": "R Basics",
    "section": "9.2 Loops",
    "text": "9.2 Loops\nAs the name suggests, in a loop the program repeats a set of instructions many times, until the stopping criteria is met.\nLoop is very useful for repetitive jobs.\n\n\nCode\nfor (i in 1:10) { # i is the iterator\n    # loop body: gets executed each time\n    # the value of i changes with each iteration\n}",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#nested-loops",
    "href": "R-Basics.html#nested-loops",
    "title": "R Basics",
    "section": "9.3 Nested loops",
    "text": "9.3 Nested loops\nWe can also nest loops inside other loops.\n\n\nCode\nx &lt;- cbind(1:3, 4:6) # column bind\nx\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nCode\ny &lt;- cbind(7:9, 10:12) # row bind\ny\n\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n\n\nCode\nz &lt;- x\n\nfor (i in 1:nrow(x)) {\n    for (j in 1:ncol(x)) {\n        z[i, j] &lt;- x[i, j] + y[i, j]\n    }\n}\n\nz\n\n\n     [,1] [,2]\n[1,]    8   14\n[2,]   10   16\n[3,]   12   18",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#user-defined-functions",
    "href": "R-Basics.html#user-defined-functions",
    "title": "R Basics",
    "section": "9.4 User-Defined Functions",
    "text": "9.4 User-Defined Functions\nA function takes the argument as input, run some specified actions, and then return the result to us.\nFunctions are very useful. When we would like to test different ideas, we can combine functions with loops: We can write a function which takes different parameters as input, and we can use a loop to go through all the possible combinations of parameters.\n\n9.4.1 User-defined function syntax\nHere is how to define a function in general:\n\n\nCode\nfunction_name &lt;- function(arg1, arg2 = default_value) {\n    # write the actions to be done with arg1 and arg2\n    # you can have any number of arguments, with or without defaults\n    return() # the last line is to return some value\n}\n\n\nExample:\n\n\nCode\nmagic &lt;- function(x, y) {\n    return(x^2 + y)\n}\n\nmagic(1, 3)\n\n\n[1] 4",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#a-comprehensive-example",
    "href": "R-Basics.html#a-comprehensive-example",
    "title": "R Basics",
    "section": "9.5 A comprehensive example",
    "text": "9.5 A comprehensive example\nTask: write a function, which takes a vector as input, and returns the max value of the vector\n\n\nCode\nget_max &lt;- function(input) {\n    max_value &lt;- input[1]\n    for (i in 2:length(input)) {\n        if (input[i] &gt; max_value) {\n            max_value &lt;- input[i]\n        }\n    }\n\n    return(max_value)\n}\n\nget_max(c(-1, 3, 2))\n\n\n[1] 3\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWrite your own version of which.max() function",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  },
  {
    "objectID": "R-Basics.html#footnotes",
    "href": "R-Basics.html#footnotes",
    "title": "R Basics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTIOBE Programming Community index is a measure of programming language popularity.↩︎\nThere are many R-exclusive packages, such as the state-of-the-art causal machine learning library grf , which we will learn in the final week.↩︎\nWhy the name Quarto? “We wanted to use a name that had meaning in the history of publishing and landed on Quarto, which is the format of a book or pamphlet produced from full sheets printed with eight pages of text, four to a side, then folded twice to produce four leaves. The earliest known European printed book is a Quarto, the Sibyllenbuch, believed to have been printed by Johannes Gutenberg in 1452–53.”↩︎\nYou can also use equal sign =, but it’s recommended to stick with R’s tradition.↩︎",
    "crumbs": [
      "R Tutorials",
      "R Basics (Induction Week)"
    ]
  }
]