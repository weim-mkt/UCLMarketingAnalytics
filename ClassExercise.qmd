---
title: "Marketing Analytics in-Class Exercise Notebook"
author: "Wei Miao"
institute: UCL School of Management
df-print: kable
colorlinks: true
code-line-numbers: true
format:
  html: 
    toc: true
    number-sections: true
    page-layout: full
    toc-depth: 2
    code-line-numbers: true
    code-copy: hover
knitr:
  opts_chunk:
    echo: true
    warning: true
    message: true
    error: true
---

# Induction Week

-   Create a sequence of {1,1,2,2,3,3,3} using different methods

    -   using `c()`

    -   using `rep()` and `c()`

```{r}
c(1,1,2,2,3,3,3)

c(rep(1,2),rep(2,2),rep(3,3))

```

2.  Create a geometric sequence {2,4,8,16,32} using `seq()`.

```{r}

seq(from = 1, to = 5, by = 1)

2 ^ seq(from = 1, to = 5, by = 1)
```

3.  Find the minimum value of vector x using `which()`

```{r}
x <- c(6,5,1,3,8)

min(x)

which(x == min(x))

x[which(x == min(x))]

```

# Week 1

## PineApple Case

The marketing analytics team at Pinapple Inc had applied predictive analytics models on historical sales data and predicted that the sales this year will reach 10 million unit at the retail price of Â£600, without any additional marketing activities. The team had also collected the information on the Cost of Goods Sold of Pineapple 14, which is 60%. The Research and Development (R&D) costs for PinePhone 14 is 100 million pounds.

Based on the above information, we first translate the necessary background information into the following R objects.

::: callout-tip
## Assigning Operations

-   When assigning values to variables, the operation will not print the values of the new variable

-   If you would like to check the variable is created with the correct value, you can

    -   check its value in the RStudio Environment on the right hand side

    -   in a new line, type the variable name: this is to ask R to print out the value of the object
:::

```{r}
# translate the above information into R variables
price <- 600 # retail price
quantity <- 10 # sales 
COGS <- 0.6 # cost of goods sold
RD_costs <- 100 # Research and Development costs
endorsement_fee <- 50 # endorsement
endorsement_sales_increase <- 0.025

```

### Question 1

**Compute the contribution margin per unit**

```{r}
# Create a variable called contribution_margin from price and COGS
# Use variables but not the raw numbers. --- Why?

# Following the definition of contribution margin per unit: price - cost
contribution_margin <- price - price * COGS
contribution_margin
```

```{r}

# equivalently, contribution margin per unit = price * contribution margin rate  
contribution_margin <- price * (1 - COGS) 
contribution_margin
```

### Question 2

**Based on the information at hand, should Tom approve the influencer marketing plan?**

To decide whether Tom should approve the marketing plan, we need to conduct break-even analyses.

The first step is to compute the break-even quantity, as shown in the following code

```{r}
# numerator is the marketing expense
# denominator is the "extra profit", or the contribution margin, from selling one more unit
BEQ <- endorsement_fee / contribution_margin
BEQ
```

**Break even quantity** is the **incremental quantity sales** needed in order to neither lose money nor make money from the marketing campaign, hence the name "break-even". This is like the safe line the campaign must reach.

::: callout-tip
## Sales

In this module (and in practice), when we talk about sales, we mean the **quantity sales**, the number of units sold. For instance, in the case study, the original sales without influencer marketing is 10 million units.

The total **money** made is often called **revenue or revenue sales.** For instance, in the case study, the original revenue is 6000 million pounds.
:::

The next step is to compare BEQ with the estimated incremental sales from the campaign.

BEQ is 0.208 million units, which is smaller than incremental sales is `r quantity` \* `r endorsement_sales_increase` million units. It means, to not lose any money, the influencer marketing compaign needs to bring in additional 0.208 million units, but in reality, the company can actually sell better at 0.25 million, so it's profitable to continue with the influencer marketing campaign.

Therefore, based on the above reasoning, Tom should approve the influencer marketing campaign.

### Question 3

(Please follow the above example to finish both *authoring* and *R codes* for the NPV question)

1.  Compute the sequence of monthly cash flows

-   First, we compute the incremental sales percentage for each month, relative to the `r quantity` million. This is a 12-element vector, each element representing the incremental sales percentage.

```{r}
incremental.sales.percentage_1stmonth <- 0.003
incremental.sales.percentage_next11months <- rep(0.002,11)

# incremental profit each month
vector_incremental.sales.percentage_12months <- c(incremental.sales.percentage_1stmonth,incremental.sales.percentage_next11months)

vector_incremental.sales.percentage_12months

```

-   Next, we time the incremental sales percentage with quantity, to get the incremental sales in terms of units each month.

```{r}
vector_incremental.sales.units_12months <- vector_incremental.sales.percentage_12months * quantity

vector_incremental.sales.units_12months

```

-   Lastly, we multiply the incremental quantity sales with the contribution margin per unit, to get the total contribution margins (incremental profits) for each month, i.e., the CF

```{r}
vector_CF <- vector_incremental.sales.units_12months * contribution_margin

vector_CF
```

2.  Compute the sequence of discount factors

```{r}
# divide annual wacc to get monthly wacc
monthly_WACC <- 0.1/12 

# monthly wacc is the k in the NPV formula
k <- monthly_WACC

# discount factor is 1/(1+k)
discount_factor <- 1/ (1+monthly_WACC)

# Generate a geometric sequence vector of discounted CFs for 12 months

vector_discount_factor <- discount_factor^c(1:12)

vector_discount_factor
```

3.  Compute the NPV

-   Multiply CF vector with discount factor vector, to get the discounted CF vector

```{r}

vector_discounted.CF <- vector_CF * vector_discount_factor 
  
vector_discounted.CF


```

-   use function sum() to get the sum of all elements in a vector. That is, the sum of discounted cash flows in all 12 months.

```{r}
sum(vector_CF * vector_discount_factor)
```

-   We need to subtract the endorsement fee, which is the marketing expense, to get the next present value

```{r}
NPV <- sum(vector_CF * vector_discount_factor) - endorsement_fee
NPV
```
