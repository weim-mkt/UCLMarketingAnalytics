---
author: Dr Lina Song
date: "`r (lubridate::ymd('20220930'))|> format('%a, %b %d %Y')`"
institute: UCL School of Management
toc: true
toc-depth: 2
format:
  html: 
    number-sections: true
    df-print: paged
    page-layout: full
    toc-depth: 2
    code-line-numbers: false
    code-copy: hover
    title: "html version"
  pdf: 
    number-sections: true
    number-depth: 2
    fontsize: 10pt
    colorlinks: true
    code-line-numbers: true
    title: "R Basics Part II (induction week)"
knitr:
  opts_chunk:
    echo: true
    warning: true
    message: true
    error: true
execute: 
  freeze: auto
---

# Class Objective

-   Learn R data types and common functions for each data type

    -   matrix, data frame, list

-   Learn R programming basics

    -   variables, conditional statement, loops, and user-defined functions


# Matrices

## Matrices: creating matrices

### Creating matrices: matrix()

-   A matrix can be created using the command `matrix()`
    -   the first argument is the vector to be converted into matrix
    -   the second argument is the number of rows
    -   the last argument is the number of cols (optional)

```{r matrix, include=T, echo=T}
matrix(1:9, nrow = 3, ncol = 3)
```

::: callout-important
R by default inserts elements **vertically** by **columns**
:::

-   R will fill in the matrix by order and discard the remaining elements once fully filled

```{r}
matrix(1:9, nrow = 3, ncol = 2)
```

-   R will fill in the matrix by order and recycle to fill in the remaining elements

```{r}
matrix(1:9, nrow = 3, ncol = 4)
```

### Creating matrices: inserting by row

However, we can ask R to insert by rows by setting the `byrow` argument.

```{r matrix_byrow, include=T, echo=T}
matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
```

### Creating matrices: concatenation of matrices cbind() and rbind()

We can use `cbind()` and `rbind()` to concatenate vectors and matrices into new matrices.

-   `cbind()` does the column binding

```{r, include=T, echo=T}
x <- cbind(1:3, 4:6) # column bind
x
```

-   `cbind()` can also operate on matrices.

```{r}
cbind(x,x)
```

-   `rbind()` does the row binding

```{r}
rbind(7:9, 10:12) # row bind
```

## Matrices: indexing and subsetting

Matrices have two dimensions: rows and columns. Therefore, to extract elements from a matrix, we just need to specify which row(s) and which column(s) we want.

```{r}
x
```

-   Extract an element
    -   1 is specified for row index, so we will extract elements from the first row
    -   1 is specified for column index, so we will extract elements from the the second column
    -   Altogether, we extract the single element in row 1, column 2.

```{r matrix_subset, include=T, echo=T}
x[1,2] # the element in the 1st row, 2nd column

```

-   If we leave blank for a dimension, we extract all elements of that dimension.
    -   1 is specified for row index, so we will extract elements from the first row
    -   Nothing is specified for column index, so we will extract all elements from all columns
    -   Altogether, we extract all elements in the first row

```{r}
x[1,] # all elements in the first row
```

::: callout-note
### Exercise

1.  Extract all elements in the second column

2.  Extract all elements in the first and third rows
:::

## Matrices: operations

Let's use 3 matrices `x`, `y`, and `z`:

```{r}
x <- matrix(1:6, nrow = 3)
y <- matrix(1:6, byrow = T, nrow = 2)
```

-   Functions will be vectorized over all elements in a matrix

```{r matrix_operations1, include=T, echo=T}
x
z<- x^2
z
```

### Matrices' operations: matrix addition and multiplication

-   If the two matrices are of the same dimensions, they can do element-wise operations, including the `*`

```{r matrix_operations2, include=T, echo=T}
x + z   # elementwise addition
x * z

```

-   We can also use `%*%` to indicate matrix multiplication

```{r}
x%*%y # matrix multiplication
```

### Matrices' operations: inverse and transpose

-   We use `t()` to do matrix transpose

```{r matrix_operations3, include=T, echo=T}
t(x) # transpose
```

-   We use `solve()` to get the inverse of an matrix

```{r}
solve(t(x)%*%x) # inverse; must be on a square matrix
```

# Data Frames

## Data Frames: creating dataframe

### Data Frames: create dataframe using data.frame()

-   Data Frame is the R object that we will deal with most of the time in the MSc program. You can think of `data.frame` as a spreadsheet in excel.

```{r dataframe, include=T, echo=T}
df <-  data.frame(id = 1:4,
  name = c("David", "Yongdong", "Anil", "Wei"),
  wage = rnorm(n=4, mean = 10^5, sd = 10^3), 
  male = c(T, T, T, T)
  )
df
```

-   Data frames can also be created from external sources, e.g., from a csv file or database.

## Data Frames: Basics

-   Each row stands for an `observation`; each column stands for a `variable`.

-   Each column should have a **unique** name.

-   Each column must contain the same data type, but the different columns can store different data types.

    -   compare with matrix?

-   Each column must be of same length, because rows have the same length across variables.

## Data Frames: check dimensions and variable types

-   You can verify the size of the `data.frame` using the command `dim()`; or `nrow()` and `ncol()`

```{r, include=T, echo=T}
dim(df)
nrow(df)
ncol(df)
```

-   You can get the data type info using the command `str()`

```{r, include=T, echo=T}
class(df)
str(df)
```

-   Get the variables names

```{r}
names(df)
```

## Data Frames: summary

-   Summarize the data frame

```{r dataframe_subset2, include=T, echo=T}
summary(df)
```

## Data Frames: subsetting

Since a dataframe is essentially a matrix, all the subsetting syntax with matrices can be applied here.

```{r dataframe_subset, include=T, echo=T}
df$name # subset a column
df[,c(2,3)] # can also subset like a matrix
```

We are interesting in the cylinders and the weights of inefficient cars (lower than 15 miles per gallon).

```{r dataframe_subset_mtcars, include=T, echo=T}
poll_cars <- mtcars[mtcars$mpg<15, c("cyl", "wt")] # remember to assign the generated dataframe to a new name
poll_cars
```

# Other data structures (Optional)

## Arrays

-   We can use `array()` to generate a high-dimensional array

-   Just like vectors and matrices, arrays can include only data types of the same kind.

-   A 3D array is basically a combination of matrices each laid on top of other

```{r arrays, include=T, echo=T}
x <- 1:4
x <- array(data = x, dim = c(2,3,2))
x
```

## Lists

A list is an R object that can contain anything. List is pretty useful when you need to store objects for latter use.

```{r list, include=T, echo=T}
x <- 1:2
y <- c("a", "b")
L <- list( numbers = x, letters = y)
```

## Lists: indexing and subsetting

There are many ways to extract a certain element from a list.

-   by index
-   by the name of the element
-   by dollar sign `$`

```{r list_subsetting, include=T, echo=T}
L[[1]] # extract the first element
L[['numbers']] # based on element name
L$numbers # extract the element called numbers
```

After extracting the element, we can work on the element further:

```{r list_subsetting2, include=T, echo=T}
L$numbers[1:3] > 2
```

# Programming Basics

## if/else

Sometimes, you want to run your code based on different conditions. For instance, if the observation is a missing value, then use the population average to impute the missing value. This is where `if/else` kicks in.

    if (condition == TRUE) {
      action 1
    } else if (condition == TRUE ){
      action 2
    } else {
      action 3
    }

Example 1:

```{r controlflow, include=T, echo=T}

a <- 15

if (a > 10) {
larger_than_10 <- TRUE  
} else {
  larger_than_10 <- FALSE
}

larger_than_10  
```

Example 2:

```{r, include=T, echo=T}
x <- -5
if(x > 0){
  print("x is a non-negative number")
} else {
  print("x is a negative number")
}
```

## Loops

As the name suggests, in a loop the program repeats a set of instructions many times, until the stopping criteria is met.

Loop is very useful for repetitive jobs.

```{r loops, include=T, echo=T}
for (i in 1:10){ # i is the iterator
  # loop body: gets executed each time
  # the value of i changes with each iteration
}
```

## Nested loops

We can also nest loops into other loops.

```{r loops3, include=T, echo=T}
x <- cbind(1:3, 4:6) # column bind
x
y <- cbind(7:9, 10:12) # row bind
y

z <- x

for (i in 1:nrow(x)) {
  for (j in 1:ncol(x)){
    z[i,j] <- x[i,j] + y[i,j]
  }
}

z
```

## Functions

A function takes the argument as input, run some specified actions, and then return the result to us.

Functions are very useful. When we would like to test different ideas, we can combine functions with loops: We can write a function which takes different parameters as input, and we can use a loop to go through all the possible combinations of parameters.

### User-defined function syntax

Here is how to define a function in general:

```{r functions, include=T, echo=T}
function_name <- function(arg1 ,arg2 = default_value){
  # write the actions to be done with arg1 and arg2
  # you can have any number of arguments, with or without defaults
  return() # the last line is to return some value 
}
```

Example:

```{r functions2, include=T, echo=T}
magic <- function( x, y){
  return(x^2 + y)
}

magic(1,3)

```

## A comprehensive example

Task: write a function, which takes a vector as input, and returns the max value of the vector

```{r, include=T, echo=T}

get_max <- function(input){
  max_value <- input[1]
  for (i in 2:length(input) ) {
    if (input[i] > max_value) {
      max <- input[i]
    }
  }
  
  return(max)
}

get_max(c(-1,3,2))

```

::: callout-note
### Exercise

Write your own version of `which.max()` function
:::
