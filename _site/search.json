[
  {
    "objectID": "R-errors.html",
    "href": "R-errors.html",
    "title": "Troubleshooting R",
    "section": "",
    "text": "In this page, I summarize the common issues running R and the troubleshooting tips. If you run into any R issues, please refer to this page as the first step for any solution."
  },
  {
    "objectID": "R-errors.html#where-you-can-run-r-codes",
    "href": "R-errors.html#where-you-can-run-r-codes",
    "title": "Troubleshooting R",
    "section": "1 Where you can run R codes",
    "text": "1 Where you can run R codes\nYou can run R codes in 3 places.\n\n1.1 R Console\nIf the code is simple and just one line, then you can type the command in R console. This is convenient when you want to run some interactive codes that test your hypotheses or do some preliminary data analyses (e.g., check the variable names of a dataframe, or check the number of rows of a dataframe).\n\n\n\n1.2 R Script\n\nR Script has the extension of .R, and any text in this file will be treated as R codes\nR Script (with .R extension) is different from a R Markdown file (with .Rmd extension) or a R Quarto file (with .qmd extension)\nR Script is used when we do not need to generate any report and we just need to run some analyses. In this case, R Scripts are the best choice.\n\nTo create a new R Script, click the insert new file button, and select R Script option:\n\nAnd then, you can copy the codes in lecture slides and paste them into R Script file.\nSelect the codes you want to run and run them by hitting the Run button\n\nNote: not the Knit button; Knit is only for generating reports from .rmd/.qmd files).\n\n\n\n\n1.3 R Markdown/Quarto\nIn a .rmd/.qmd file, R codes can only be run in R code chunks; otherwise, they will be treated as normal text."
  },
  {
    "objectID": "R-errors.html#warnings-packages-not-installed",
    "href": "R-errors.html#warnings-packages-not-installed",
    "title": "Troubleshooting R",
    "section": "2 Warnings: Packages not installed",
    "text": "2 Warnings: Packages not installed\nIf you see this banner in your RStudio in the screenshot, it means RStudio detects some packages mentioned in the R Markdown file or R script but are not yet installed on your computer. So it prompts you for installation.\n\nFor instance, in this case, the error message means, knitr and pacman are found in the .Rmd file, but they are not installed, so RStudio is smart enough to prompt you to install.\n\n\n\n\n\n\nSolution\n\n\n\nJust click install button in the banner. RStudio will install the missing components."
  },
  {
    "objectID": "R-errors.html#r-packages-not-up-to-date",
    "href": "R-errors.html#r-packages-not-up-to-date",
    "title": "Troubleshooting R",
    "section": "3 R packages not up-to-date",
    "text": "3 R packages not up-to-date\nSince the R packages are being updated every day (just like our mobile apps, there could be bugs so that the developers have to update R packages to fix those bugs), sometimes, though we may have installed some packages, they are too old to run the functions. And you may see this prompted message:\n\nIt means, the aforementioned packages, base64enc, digest, etc. are outdated and must be updated to function.\n\n\n\n\n\n\nSolution\n\n\n\nClick Yes and RStudio will update all the packages for you."
  },
  {
    "objectID": "R-errors.html#latex-not-found-when-kniting-the-.rmd.qmd-file.",
    "href": "R-errors.html#latex-not-found-when-kniting-the-.rmd.qmd-file.",
    "title": "Troubleshooting R",
    "section": "4 Latex not found when kniting the .rmd/.qmd file.",
    "text": "4 Latex not found when kniting the .rmd/.qmd file.\nIf this is your first time to knit the PDF document, you may see an error message as below:\n\nThe error message has usually told us everything on how to troubleshoot (that’s what an error message is for!).\nIn this screenshot, if you read along, you will find the cause of problem:\n\n[…] LaTex failed to compile,\n\nbecause\n\n[…] No LaTeX installation detected (LaTeX is required to create PDF output).\n\nand the solution is also consideratebly given in this error message:\n\n[…] You should install a LaTeX distribution for your platform: https://www.latex-project.org/get/\n\n\nIf you are not sure, you may install TinyTeX in R: tinytex::install_tinytex()\n\nSo this error message tells us the solution:\n\n\n\n\n\n\nSolution\n\n\n\nRun the following command in Console\ntinytex::install_tinytex()\nin order to install LaTex on your laptop.\n\n\nIf you run the command in R Console, you will see that Latex is being installed\n\nAfter this progress bar finishes, you will be able to knit the PDF document!"
  },
  {
    "objectID": "R-errors.html#error-connection-not-found",
    "href": "R-errors.html#error-connection-not-found",
    "title": "Troubleshooting R",
    "section": "5 Error: Connection Not Found",
    "text": "5 Error: Connection Not Found\nConnection Not Found error is usually caused by RStudio being unable to locate your files on your hard disk.\nIn the .Rmd file I give to you, the purchase data and demographics data are using the file paths on my laptop. So you should change them to yours.\nIf you don’t know how to find the path names for a file on your computer, please refer to this link for Windows and this link for Mac."
  },
  {
    "objectID": "R-errors.html#more-questions",
    "href": "R-errors.html#more-questions",
    "title": "Troubleshooting R",
    "section": "6 More Questions",
    "text": "6 More Questions\nPlease leave a screenshot of error message in the MSTeams channel named “R QnA”. I will keep updating this webpage as more questions come in."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is the online supplement to the MSIN0094 Marketing Analytics Module for the MSc Business Analytics program at UCL School of Management."
  },
  {
    "objectID": "R-installR.html",
    "href": "R-installR.html",
    "title": "Install and Setup R",
    "section": "",
    "text": "Go to R’s official website in this link\nClick CRAN under download section\n\n\n\nThese are different mirrors for R download. Basically they store the same installation files but on different servers in different places. Simply click into any mirror.\n\n\n\nClick into download R for Windows for installation files for Windows computers\n\n\n\nDownload and install (1) base and (2) Rtools. It’s recommended to use the default options during the installations.\n\nNotes: The former is the R program, and the latter is the tool to compile R packages."
  },
  {
    "objectID": "R-installR.html#why-do-we-need-to-install-rtools-and-commandline-tools",
    "href": "R-installR.html#why-do-we-need-to-install-rtools-and-commandline-tools",
    "title": "Install and Setup R",
    "section": "3.1 Why do we need to install Rtools and Commandline tools?",
    "text": "3.1 Why do we need to install Rtools and Commandline tools?\nMany R packages are written in R. Since R is an interpreted language, source code written in R doesn’t have to be translated into system-specific machine language before running. However, some R packages have significant portions written in compiled languages, such as C/C++ or Fortran. These languages need accessory software tools to translate (“compile”) their source code into machine language that can run on a particular system.\nPackage developers have two choices when distributing code for compiled languages:\n\nThey can prepare compiled, realdy-to-use “binaries” matched against common systems, so that people can simply download the binaries and directly use their packages code without having to know how to compile it.\nThey can distribute source code (i.e., the raw C++ codes) only, and expect the user to have the right compiler software to build system-specific runnable code themselves. Rtools and Commandline tools are the compliers that do the job, therefore needed as an additional installation step.\n\nOn UNIX/Linux, only source code is distributed and all packages are compiled from source during installation (for packages written entirely in R, this is trivial!). For Windows and Mac, CRAN makes pre-compiled binaries available. On Windows, install.packages() will only install precompiled binaries, unless explicitly forced to install from source (you can read a lot more about this in the R Installation and Administration guide)."
  },
  {
    "objectID": "R-introductionR.html",
    "href": "R-introductionR.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Setup R and Rstudio\nInstall and load packages in R; comment codes\nLearn R data types and common functions for each data type\n\nscalar, vector, matrix, data frame, list\n\nLearn R programming basics\n\nvariables, conditional statement, loops, and user-defined functions"
  },
  {
    "objectID": "R-introductionR.html#what-is-r",
    "href": "R-introductionR.html#what-is-r",
    "title": "Introduction to R",
    "section": "2.1 What is R",
    "text": "2.1 What is R\n\nR is both a programming language and software environment for statistical computing, which is free and open-source (https://www.r-project.org/about.html).\nThe R Project was initiated by Robert Gentleman and Ross Ihaka (University of Auckland) in the early 1990s as a different implementation of the S language, which was developed at Bell Laboratories. Since 1997, R has been developed by the R Development Core Team."
  },
  {
    "objectID": "R-introductionR.html#what-is-r-used-for",
    "href": "R-introductionR.html#what-is-r-used-for",
    "title": "Introduction to R",
    "section": "2.2 What is R used for?",
    "text": "2.2 What is R used for?\nR can do almost anything you can think of! Below is a list of what I use R for for my research and daily work.\n\nSuper powerful data analytics\n\nstatistics and econometrics\ndata manipulation and wrangling\nmachine learning models\n\nWrite research report and prepare presentations slides using quarto developed by RStudio team.\nBuild and maintain my own webpage. I build and maintain my personal website with the blogdown package; this course website is built with quarto package."
  },
  {
    "objectID": "R-introductionR.html#why-learn-r-at-msc-ba.",
    "href": "R-introductionR.html#why-learn-r-at-msc-ba.",
    "title": "Introduction to R",
    "section": "2.3 Why Learn R at MSc BA.",
    "text": "2.3 Why Learn R at MSc BA.\n\nR is one of the most popular programming languages used by statisticians, economists, and data analysts. Below is the popularity index of different languages by tiobe.com. Your future colleagues will likely be using R.\n\n\n\n\nFigure 1: Trend of R\n\n\n\nEconomists and statisticians prefer R, so there are many powerhouse packages exclusive to R, such as the state-of-the-art causal machine learning grf package.\nR versus Python"
  },
  {
    "objectID": "R-introductionR.html#install-and-setup-r-step-1",
    "href": "R-introductionR.html#install-and-setup-r-step-1",
    "title": "Introduction to R",
    "section": "2.4 Install and Setup R: Step 1",
    "text": "2.4 Install and Setup R: Step 1\nStep 1: Download R from the official website following this guide\n\nNote that R version is updated on a regular basis, to fix bugs or add new features. It’s good to keep your R up to date.\n\nHowever, be mindful that sometimes across major versions, some R’s base functions may be depreciated and cause breaks in your code, so it’s important to read the R News after each update, so that you understand what’s been updated in the latest version and if there will be any breaks in your previous code. For a deeper understanding of this issue, please refer to this article regarding reproducible research with R."
  },
  {
    "objectID": "R-introductionR.html#install-and-setup-r-on-your-computers-step-2",
    "href": "R-introductionR.html#install-and-setup-r-on-your-computers-step-2",
    "title": "Introduction to R",
    "section": "2.5 Install and Setup R on your computers: Step 2",
    "text": "2.5 Install and Setup R on your computers: Step 2\nStep 2: Download and install Rstudio from Rstudio’s website.\nFor a introduction to the Rstudio IDE, refer to this cheat sheet."
  },
  {
    "objectID": "R-introductionR.html#glossary-for-rstudio",
    "href": "R-introductionR.html#glossary-for-rstudio",
    "title": "Introduction to R",
    "section": "2.6 Glossary for RStudio",
    "text": "2.6 Glossary for RStudio\n\nscript: (top left) where you write codes a text-readable file (E.g., ‘test.R’, ‘test.Rmd’, etc.), each separated by a new line.\nconsole: (bottom left) where you can type commands interactively with R and get the results immediately\nenvironment: (top right) a list of named variables/objects that we have generated; can be checked on the ‘environment’ panel.\nhistory: (top right) the list of past commands that we have used\nhelp: (bottom right) a documentation of all the functions available in R (the user manual)\npackage: (bottom right) a collection of additional functions and dataset"
  },
  {
    "objectID": "R-introductionR.html#comment-your-codes",
    "href": "R-introductionR.html#comment-your-codes",
    "title": "Introduction to R",
    "section": "2.7 Comment your codes",
    "text": "2.7 Comment your codes\nYou can put a “#” before any line of code, to indicate that this line is your comment, and this line will turn green and not run by R.\nIt’s a good practice to often comment your codes, so that you can help the future you to remember what you were trying to achieve.\n\n# print(\"David is handsome\")"
  },
  {
    "objectID": "R-introductionR.html#packages-management-the-coventional-way",
    "href": "R-introductionR.html#packages-management-the-coventional-way",
    "title": "Introduction to R",
    "section": "2.8 Packages management: the coventional way",
    "text": "2.8 Packages management: the coventional way\nTo achieve certain tasks, for instance, to run a regression analysis, we can definitely write our own code from scratch. However, it may take much time if we would like to build everything from zero. That’s when the packages/libraries can help us to improve our efficiency by a large margin.\nOne of the best things about R is that it has tens of thousands of extremely useful packages/libraries. And some are even exclusive to R, for instance, the grf package that runs the causal forest model, which I have used for my research.\n\n# install.packages('dplyr') # install the package\nlibrary('dplyr') # load the package\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "R-introductionR.html#libraries-and-packages-management-a-simpler-way",
    "href": "R-introductionR.html#libraries-and-packages-management-a-simpler-way",
    "title": "Introduction to R",
    "section": "2.9 Libraries and packages management: a simpler way",
    "text": "2.9 Libraries and packages management: a simpler way\nIn R, there is a package called pacman, which stands for package management and is probably the most convenient way to manage R packages.\nTask: Load ggplot2 and data.table packages; if they are not installed, install them and then load them.\n\n# if you have not yet installed pacman package, run the following code to install it.\n\n# install.packages('pacman')\n\npacman::p_load(data.table,ggplot2)"
  },
  {
    "objectID": "R-introductionR.html#to-learn-functions-in-a-package-use-help",
    "href": "R-introductionR.html#to-learn-functions-in-a-package-use-help",
    "title": "Introduction to R",
    "section": "2.10 To learn functions in a package: Use help()",
    "text": "2.10 To learn functions in a package: Use help()\nWhenever you don’t know how to use a function from a package, you can either\n\nuse help(). Enter the command help(log) in R console\n\n\n?log\nhelp(log)\n\n\nor you can directly search for the function in RStudio help panel.\n\n\n\n\nFigure 2: Example of function help"
  },
  {
    "objectID": "R-introductionR.html#use-r-as-a-calculator",
    "href": "R-introductionR.html#use-r-as-a-calculator",
    "title": "Introduction to R",
    "section": "3.1 Use R as a calculator",
    "text": "3.1 Use R as a calculator\nWe can do the basic mathematical calculation in R as follows:\n\n8+8\n\n[1] 16\n\n8-8\n\n[1] 0\n\n8*8\n\n[1] 64\n\n2/2\n\n[1] 1\n\n\nCommon mathematical operations/functions can also be used in R.\n\nlog(1)\n\n[1] 0\n\nexp(1)\n\n[1] 2.718282\n\nlog(exp(1))\n\n[1] 1\n\nsqrt(25)\n\n[1] 5"
  },
  {
    "objectID": "R-introductionR.html#assign-value",
    "href": "R-introductionR.html#assign-value",
    "title": "Introduction to R",
    "section": "3.2 Assign value",
    "text": "3.2 Assign value\nIn R, we normally use the left arrow to assign a value to an object <-\n\nx <- log(2)\nx\n\n[1] 0.6931472\n\n\nYou can also use equal sign = without issues, but it’s recommended to stick with R’s tradition."
  },
  {
    "objectID": "R-introductionR.html#data-types",
    "href": "R-introductionR.html#data-types",
    "title": "Introduction to R",
    "section": "3.3 Data types",
    "text": "3.3 Data types\n\nNumeric/Double (e.g. 2.5, 1/5, 1.0, etc.)\n\n\n# Numeric Vector \nnum2 <- c(1, 2, 3.4, 5, 5.9)\n\n\nComplex (e.g. 1 + 2i, etc.)\n\n\n# Complex\ncom5 <- c(2+3i, 3+5i, 4+5i)\n\n\nLogical (e.g. TRUE, FALSE)\n\n\n# Logical Vector \nlog4 <- c(TRUE, FALSE, FALSE, T, F) \n\n\nCharacter (e.g. “Wei”, “UCL”, “1 + 1 = 3”, “TRUE”, etc.)\n\n\n# Character Vector\nstr1 <- c(\"R\",\"Python\",\"Java\",\"Scala\",\"Julia\")\n\n\nFactor (“male”, “female”, etc.); this is an important class for describing categories. We will discuss in more detail later in the module.\n\n\ncountry <- c('UK','Spain','Italy','Multiverse')\n\nfactor(country)\n\n[1] UK         Spain      Italy      Multiverse\nLevels: Italy Multiverse Spain UK"
  },
  {
    "objectID": "R-introductionR.html#special-data-types-na",
    "href": "R-introductionR.html#special-data-types-na",
    "title": "Introduction to R",
    "section": "3.4 Special data types: NA",
    "text": "3.4 Special data types: NA\nNA stands for missing values; this is a very tricky type that needs additional attention.\n\nmissing <- c(1,NA,2,NA)\n\n\nThe following will return NA, because we haven’t told R how to deal with missing values\n\n\nmean(missing)\n\n[1] NA\n\n\n\nIf we tell R to remove missing values, we get what we want\n\n\nmean(missing,na.rm = T)\n\n[1] 1.5\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen cleaning data using sum(), mean(), sd(), etc., always put na.rm = T at the end !\n\n\n\nCommonly used functions to check missing values\n\n\n# check missing values\nis.na(missing)\n\n[1] FALSE  TRUE FALSE  TRUE\n\nanyNA(missing)\n\n[1] TRUE\n\nsum(is.na(missing))\n\n[1] 2"
  },
  {
    "objectID": "R-introductionR.html#special-data-types-inf",
    "href": "R-introductionR.html#special-data-types-inf",
    "title": "Introduction to R",
    "section": "3.5 Special data types: Inf",
    "text": "3.5 Special data types: Inf\n\nInf is infinity. You can have either positive or negative infinity.\n\n\na <- c(1/0,1,2) #Inf\na\n\n[1] Inf   1   2\n\n\n\nHow to check for Inf\n\n\nis.infinite(a)\n\n[1]  TRUE FALSE FALSE\n\n\n\nHowever, Inf is not a missing value!!\n\n\nis.na(a)\n\n[1] FALSE FALSE FALSE\n\n\n\nTherefore, if we take average, na.rm = T no longer works\n\n\nmean(a)\n\n[1] Inf\n\nmean(a, na.rm = T)\n\n[1] Inf"
  },
  {
    "objectID": "R-introductionR.html#special-data-types-nan",
    "href": "R-introductionR.html#special-data-types-nan",
    "title": "Introduction to R",
    "section": "3.6 Special data types: NaN",
    "text": "3.6 Special data types: NaN\n\nNaN means “Not a Number”. It’s an undefined value.\n\n\nb <- c(0/0,1,2) #NaN\nb\n\n[1] NaN   1   2\n\n\n\nHow to check for NaN\n\n\nis.nan(b)\n\n[1]  TRUE FALSE FALSE\n\n\n\nNaN is a missing value!\n\n\nis.na(b)\n\n[1]  TRUE FALSE FALSE\n\n\n\nTherefore, if we take average, na.rm = T works\n\n\nmean(b)\n\n[1] NaN\n\nmean(b,na.rm = T)\n\n[1] 1.5"
  },
  {
    "objectID": "R-introductionR.html#data-type-check-data-type-using-class",
    "href": "R-introductionR.html#data-type-check-data-type-using-class",
    "title": "Introduction to R",
    "section": "3.7 Data type: check data type using class()",
    "text": "3.7 Data type: check data type using class()\nWe can use class() to check the type of an object in R.\n\na <- '1+1'\nclass(a)\n\n[1] \"character\"\n\n\n\nb <- 1+1\nclass(b)\n\n[1] \"numeric\""
  },
  {
    "objectID": "R-introductionR.html#data-type-conversion",
    "href": "R-introductionR.html#data-type-conversion",
    "title": "Introduction to R",
    "section": "3.8 Data type: conversion",
    "text": "3.8 Data type: conversion\nSometimes, data types of variables from raw data may not be what we want; we need to change the data type of a variable to the appropriate one, so that we can run some operations. See the following example:\n\na is a string, and we cannot use mathematical operations on it, or R will report errors.\n\n\na <- '1'\nclass(a)\n\n[1] \"character\"\n\na + 1\n\nError in a + 1: non-numeric argument to binary operator\n\n\n\nWe can convert a to a numeric value. To convert from character to numeric, we use as.numeric()\n\n\nb <- as.numeric(a)\nclass(b)\n\n[1] \"numeric\""
  },
  {
    "objectID": "R-introductionR.html#data-structures",
    "href": "R-introductionR.html#data-structures",
    "title": "Introduction to R",
    "section": "3.9 Data structures",
    "text": "3.9 Data structures\nPrevious slides discuss a single value, i.e., a scalar. When we deal with datasets, we will run into variables and data frames.\n\n\n\nFigure 3: Visualization of data structures"
  },
  {
    "objectID": "R-introductionR.html#vectors-creating-vectors",
    "href": "R-introductionR.html#vectors-creating-vectors",
    "title": "Introduction to R",
    "section": "4.1 Vectors: creating vectors",
    "text": "4.1 Vectors: creating vectors\n\n4.1.1 Creating vectors: c()\nVector can be created using the command c().\n\nx <- c(1, 3, 5, 10)\nx\n\n[1]  1  3  5 10\n\nclass(x)\n\n[1] \"numeric\"\n\n\nVectors must contain elements of the same data type. Otherwise, it will convert elements into the same type.\n\nx <- c(1, \"intro\", TRUE)\n\nclass(x)\n\n[1] \"character\"\n\n\n\n\n4.1.2 Creating vectors: length()\nYou can measure the length of a vector using the command length()\n\nx <- c('R',' is', ' fun')\nlength(x)\n\n[1] 3\n\ny <- c()\nlength(y)\n\n[1] 0\n\n\n\n\n4.1.3 Creating vectors with patterns: seq() and rep()\nIt is also possible to easily create sequences\n\nmanually use colon :\n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\nuse seq() to create sequence with fixed steps\n\n\n# use seq()\nseq(from = 1, to = 2, by = 0.1)\n\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n\n\n\nuse seq.Date() to create a sequence of dates\n\n\nseq.Date(from = as.Date(\"2021-09-27\"), \n         to = as.Date(\"2021-10-01\"), \n         by = '1 days')\n\n[1] \"2021-09-27\" \"2021-09-28\" \"2021-09-29\" \"2021-09-30\" \"2021-10-01\"\n\n\n\nuse rep() to create repeated sequences\n\n\n# replication using rep()\nrep(\"A\", times = 5)\n\n[1] \"A\" \"A\" \"A\" \"A\" \"A\"\n\n\n\n\n4.1.4 Creating vectors: combine vectors\nYou can use c() to combine different vectors; this is very commonly used when concatenating vectors.\n\nx <- 1:3 # from 1 to 3\ny <- c(10, 15) # 10 and 15\nz <- c(x,y) # x first and then y \nz\n\n[1]  1  2  3 10 15"
  },
  {
    "objectID": "R-introductionR.html#vectors-subsetting",
    "href": "R-introductionR.html#vectors-subsetting",
    "title": "Introduction to R",
    "section": "4.2 Vectors: subsetting",
    "text": "4.2 Vectors: subsetting\nWe put the index of elements we would like to extract in a square bracket.\nNote that Python uses different ways to index and subset vectors and matrices.\n\nWhich element is in the second position?\n\n\nx <- c(1,3,8,7) \nx[2]\n\n[1] 3\n\n\n\nWhat are the first 2 elements?\n\n\nx[1:2] \n\n[1] 1 3\n\n\n\nWhat are the 1st, 3rd and 4th elements?\n\n\nx[c(1,3,4)] \n\n[1] 1 8 7"
  },
  {
    "objectID": "R-introductionR.html#vectors-relational-operations",
    "href": "R-introductionR.html#vectors-relational-operations",
    "title": "Introduction to R",
    "section": "4.3 Vectors: relational operations",
    "text": "4.3 Vectors: relational operations\n\nWe can compare a vector with a single scalar value\n\n\nx < 6 # is each element lower than 6?\n\n[1]  TRUE  TRUE FALSE FALSE\n\nx == 10 # is the element equal to 10?\n\n[1] FALSE FALSE FALSE FALSE\n\n\n\nFind the position of elements that satisfy certain conditions: which()\n\n\nwhich(x == 8) # which element equals 8 \n\n[1] 3\n\nwhich.max(x) # which is the max element \n\n[1] 3\n\nwhich.min(x)\n\n[1] 1\n\n\n\n\n\n\n\n\nExercise\n\n\n\nFind the minimum value of vector x\n\n\n\nSometimes, we may need to operation on multiple relational operations. For instance, we may want to find out elements that are smaller than 7 and larger than 3.\n\n\nT & F # and\n\n[1] FALSE\n\nT | F # or\n\n[1] TRUE\n\n!T # not\n\n[1] FALSE"
  },
  {
    "objectID": "R-introductionR.html#vectors-in",
    "href": "R-introductionR.html#vectors-in",
    "title": "Introduction to R",
    "section": "4.4 Vectors: %in%",
    "text": "4.4 Vectors: %in%\n\nA special relational operation is %in% in R, which tests whether an element exists in the object.\n\n\nx <- c(1,3,8,7) \n\n3 %in% x\n\n[1] TRUE\n\n4 %in% x\n\n[1] FALSE"
  },
  {
    "objectID": "R-introductionR.html#vectors-elementwise-operations",
    "href": "R-introductionR.html#vectors-elementwise-operations",
    "title": "Introduction to R",
    "section": "4.5 Vectors: elementwise operations",
    "text": "4.5 Vectors: elementwise operations\nR is a vectorized language, meaning by default it will do vector operation internally.\n\nx <- c(1,3,8,7)\nx+2\n\n[1]  3  5 10  9\n\nx-2\n\n[1] -1  1  6  5\n\nx*2\n\n[1]  2  6 16 14\n\nx^2\n\n[1]  1  9 64 49\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen the length of vectors do not match, R will still do it for your without reporting error but a warning message. As you can see, even if the length of vectors does not match, R can still return an output. It’s important to check the warning messages when there is any!\n\n\n\nx <- c(1,3,8,7)\n\ny <- c(1,3,4) # careful!!! does not report error\nx + y\n\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n\n\n[1]  2  6 12  8"
  },
  {
    "objectID": "R-introductionR.html#matrices-creating-matrices",
    "href": "R-introductionR.html#matrices-creating-matrices",
    "title": "Introduction to R",
    "section": "5.1 Matrices: creating matrices",
    "text": "5.1 Matrices: creating matrices\n\n5.1.1 Creating matrices: matrix()\n\nA matrix can be created using the command matrix()\n\nthe first argument is the vector to be converted into matrix\nthe second argument is the number of rows\nthe last argument is the number of cols (optional)\n\n\n\nmatrix(1:9, nrow = 3, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n\n\n\n\n\nImportant\n\n\n\nR by default inserts elements vertically by columns\n\n\n\nR will fill in the matrix by order and discard the remaining elements once fully filled\n\n\nmatrix(1:9, nrow = 3, ncol = 2)\n\nWarning in matrix(1:9, nrow = 3, ncol = 2): data length [9] is not a sub-\nmultiple or multiple of the number of columns [2]\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\nR will fill in the matrix by order and recycle to fill in the remaining elements\n\n\nmatrix(1:9, nrow = 3, ncol = 4)\n\nWarning in matrix(1:9, nrow = 3, ncol = 4): data length [9] is not a sub-\nmultiple or multiple of the number of columns [4]\n\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7    1\n[2,]    2    5    8    2\n[3,]    3    6    9    3\n\n\n\n\n5.1.2 Creating matrices: inserting by row\nHowever, we can ask R to insert by rows by setting the byrow argument.\n\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\n5.1.3 Creating matrices: concatenation of matrices cbind() and rbind()\nWe can use cbind() and rbind() to concatenate vectors and matrices into new matrices.\n\ncbind() does the column binding\n\n\nx <- cbind(1:3, 4:6) # column bind\nx\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\ncbind() can also operate on matrices.\n\n\ncbind(x,x)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    1    4\n[2,]    2    5    2    5\n[3,]    3    6    3    6\n\n\n\nrbind() does the row binding\n\n\nrbind(7:9, 10:12) # row bind\n\n     [,1] [,2] [,3]\n[1,]    7    8    9\n[2,]   10   11   12"
  },
  {
    "objectID": "R-introductionR.html#matrices-indexing-and-subsetting",
    "href": "R-introductionR.html#matrices-indexing-and-subsetting",
    "title": "Introduction to R",
    "section": "5.2 Matrices: indexing and subsetting",
    "text": "5.2 Matrices: indexing and subsetting\nMatrices have two dimensions: rows and columns. Therefore, to extract elements from a matrix, we just need to specify which row(s) and which column(s) we want.\n\nx\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\nExtract an element\n\n1 is specified for row index, so we will extract elements from the first row\n1 is specified for column index, so we will extract elements from the the second column\nAltogether, we extract the single element in row 1, column 2.\n\n\n\nx[1,2] # the element in the 1st row, 2nd column\n\n[1] 4\n\n\n\nIf we leave blank for a dimension, we extract all elements of that dimension.\n\n1 is specified for row index, so we will extract elements from the first row\nNothing is specified for column index, so we will extract all elements from all columns\nAltogether, we extract all elements in the first row\n\n\n\nx[1,] # all elements in the first row\n\n[1] 1 4\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nExtract all elements in the second column\nExtract all elements in the first and third rows"
  },
  {
    "objectID": "R-introductionR.html#matrices-operations",
    "href": "R-introductionR.html#matrices-operations",
    "title": "Introduction to R",
    "section": "5.3 Matrices: operations",
    "text": "5.3 Matrices: operations\nLet’s use 3 matrices x, y, and z:\n\nx <- matrix(1:6, nrow = 3)\ny <- matrix(1:6, byrow = T, nrow = 2)\n\n\nFunctions will be vectorized over all elements in a matrix\n\n\nx\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\nz<- x^2\nz\n\n     [,1] [,2]\n[1,]    1   16\n[2,]    4   25\n[3,]    9   36\n\n\n\n5.3.1 Matrices’ operations: matrix addition and multiplication\n\nIf the two matrices are of the same dimensions, they can do element-wise operations, including the *\n\n\nx + z   # elementwise addition\n\n     [,1] [,2]\n[1,]    2   20\n[2,]    6   30\n[3,]   12   42\n\nx * z\n\n     [,1] [,2]\n[1,]    1   64\n[2,]    8  125\n[3,]   27  216\n\n\n\nWe can also use %*% to indicate matrix multiplication\n\n\nx%*%y # matrix multiplication\n\n     [,1] [,2] [,3]\n[1,]   17   22   27\n[2,]   22   29   36\n[3,]   27   36   45\n\n\n\n\n5.3.2 Matrices’ operations: inverse and transpose\n\nWe use t() to do matrix transpose\n\n\nt(x) # transpose\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\nWe use solve() to get the inverse of an matrix\n\n\nsolve(t(x)%*%x) # inverse; must be on a square matrix\n\n           [,1]       [,2]\n[1,]  1.4259259 -0.5925926\n[2,] -0.5925926  0.2592593"
  },
  {
    "objectID": "R-introductionR.html#data-frames-creating-dataframe",
    "href": "R-introductionR.html#data-frames-creating-dataframe",
    "title": "Introduction to R",
    "section": "6.1 Data Frames: creating dataframe",
    "text": "6.1 Data Frames: creating dataframe\n\n6.1.1 Data Frames: create dataframe using data.frame()\n\nData Frame is the R object that we will deal with most of the time in the MSc program. You can think of data.frame as a spreadsheet in excel.\n\n\ndf <-  data.frame(id = 1:4,\n  name = c(\"David\", \"Yongdong\", \"Anil\", \"Wei\"),\n  wage = rnorm(n=4, mean = 10^5, sd = 10^3), \n  male = c(T, T, T, T)\n  )\ndf\n\n\n\n  \n\n\n\n\nData frames can also be created from external sources, e.g., from a csv file or database."
  },
  {
    "objectID": "R-introductionR.html#data-frames-basics",
    "href": "R-introductionR.html#data-frames-basics",
    "title": "Introduction to R",
    "section": "6.2 Data Frames: Basics",
    "text": "6.2 Data Frames: Basics\n\nEach row stands for an observation; each column stands for a variable.\nEach column should have a unique name.\nEach column must contain the same data type, but the different columns can store different data types.\n\ncompare with matrix?\n\nEach column must be of same length, because rows have the same length across variables."
  },
  {
    "objectID": "R-introductionR.html#data-frames-check-dimensions-and-variable-types",
    "href": "R-introductionR.html#data-frames-check-dimensions-and-variable-types",
    "title": "Introduction to R",
    "section": "6.3 Data Frames: check dimensions and variable types",
    "text": "6.3 Data Frames: check dimensions and variable types\n\nYou can verify the size of the data.frame using the command dim(); or nrow() and ncol()\n\n\ndim(df)\n\n[1] 4 4\n\nnrow(df)\n\n[1] 4\n\nncol(df)\n\n[1] 4\n\n\n\nYou can get the data type info using the command str()\n\n\nclass(df)\n\n[1] \"data.frame\"\n\nstr(df)\n\n'data.frame':   4 obs. of  4 variables:\n $ id  : int  1 2 3 4\n $ name: chr  \"David\" \"Yongdong\" \"Anil\" \"Wei\"\n $ wage: num  99066 99548 101591 98575\n $ male: logi  TRUE TRUE TRUE TRUE\n\n\n\nGet the variables names\n\n\nnames(df)\n\n[1] \"id\"   \"name\" \"wage\" \"male\""
  },
  {
    "objectID": "R-introductionR.html#data-frames-summary",
    "href": "R-introductionR.html#data-frames-summary",
    "title": "Introduction to R",
    "section": "6.4 Data Frames: summary",
    "text": "6.4 Data Frames: summary\n\nSummarize the data frame\n\n\nsummary(df)\n\n       id           name                wage          male        \n Min.   :1.00   Length:4           Min.   : 98575   Mode:logical  \n 1st Qu.:1.75   Class :character   1st Qu.: 98943   TRUE:4        \n Median :2.50   Mode  :character   Median : 99307                 \n Mean   :2.50                      Mean   : 99695                 \n 3rd Qu.:3.25                      3rd Qu.:100058                 \n Max.   :4.00                      Max.   :101591"
  },
  {
    "objectID": "R-introductionR.html#data-frames-subsetting",
    "href": "R-introductionR.html#data-frames-subsetting",
    "title": "Introduction to R",
    "section": "6.5 Data Frames: subsetting",
    "text": "6.5 Data Frames: subsetting\nSince a dataframe is essentially a matrix, all the subsetting syntax with matrices can be applied here.\n\ndf$name # subset a column\n\n[1] \"David\"    \"Yongdong\" \"Anil\"     \"Wei\"     \n\ndf[,c(2,3)] # can also subset like a matrix\n\n\n\n  \n\n\n\nWe are interesting in the cylinders and the weights of inefficient cars (lower than 15 miles per gallon).\n\npoll_cars <- mtcars[mtcars$mpg<15, c(\"cyl\", \"wt\")] # remember to assign the generated dataframe to a new name\npoll_cars"
  },
  {
    "objectID": "R-introductionR.html#arrays",
    "href": "R-introductionR.html#arrays",
    "title": "Introduction to R",
    "section": "7.1 Arrays",
    "text": "7.1 Arrays\n\nWe can use array() to generate a high-dimensional array\nJust like vectors and matrices, arrays can include only data types of the same kind.\nA 3D array is basically a combination of matrices each laid on top of other\n\n\nx <- 1:4\nx <- array(data = x, dim = c(2,3,2))\nx\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    1\n[2,]    2    4    2\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    3    1    3\n[2,]    4    2    4"
  },
  {
    "objectID": "R-introductionR.html#lists",
    "href": "R-introductionR.html#lists",
    "title": "Introduction to R",
    "section": "7.2 Lists",
    "text": "7.2 Lists\nA list is an R object that can contain anything. List is pretty useful when you need to store objects for latter use.\n\nx <- 1:2\ny <- c(\"a\", \"b\")\nL <- list( numbers = x, letters = y)"
  },
  {
    "objectID": "R-introductionR.html#lists-indexing-and-subsetting",
    "href": "R-introductionR.html#lists-indexing-and-subsetting",
    "title": "Introduction to R",
    "section": "7.3 Lists: indexing and subsetting",
    "text": "7.3 Lists: indexing and subsetting\nThere are many ways to extract a certain element from a list.\n\nby index\nby the name of the element\nby dollar sign $\n\n\nL[[1]] # extract the first element\n\n[1] 1 2\n\nL[['numbers']] # based on element name\n\n[1] 1 2\n\nL$numbers # extract the element called numbers\n\n[1] 1 2\n\n\nAfter extracting the element, we can work on the element further:\n\nL$numbers[1:3] > 2\n\n[1] FALSE FALSE    NA"
  },
  {
    "objectID": "R-introductionR.html#variables",
    "href": "R-introductionR.html#variables",
    "title": "Introduction to R",
    "section": "8.1 Variables",
    "text": "8.1 Variables\nIn programming, a variable denotes an object, i.e., a variable is a name that refers to an object in the memory. Variables in R programming can be used to store any R object discussed previously, including numbers, characters, matrices, and data frames.\nR is a dynamically programmed language, which means that unlike other programming languages (such as C++, which is a pain to debug), we do not have to declare the data type of a variable before we can use it in our program.\nFor a variable to be valid, it should follow these rules\n\nIt should contain letters, numbers, and only dot or underscore characters.\nIt should not start with a number (eg:- 2iota)\nIt should not start with a dot followed by a number (eg:- .2iota)\nIt should not start with an underscore (eg:- _iota)\nIt should not be a reserved keyword."
  },
  {
    "objectID": "R-introductionR.html#ifelse",
    "href": "R-introductionR.html#ifelse",
    "title": "Introduction to R",
    "section": "8.2 if/else",
    "text": "8.2 if/else\nSometimes, you want to run your code based on different conditions. For instance, if the observation is a missing value, then use the population average to impute the missing value. This is where if/else kicks in.\nif (condition == TRUE) {\n  action 1\n} else if (condition == TRUE ){\n  action 2\n} else {\n  action 3\n}\nExample 1:\n\na <- 15\n\nif (a > 10) {\nlarger_than_10 <- TRUE  \n} else {\n  larger_than_10 <- FALSE\n}\n\nlarger_than_10  \n\n[1] TRUE\n\n\nExample 2:\n\nx <- -5\nif(x > 0){\n  print(\"x is a non-negative number\")\n} else {\n  print(\"x is a negative number\")\n}\n\n[1] \"x is a negative number\""
  },
  {
    "objectID": "R-introductionR.html#loops",
    "href": "R-introductionR.html#loops",
    "title": "Introduction to R",
    "section": "8.3 Loops",
    "text": "8.3 Loops\nAs the name suggests, in a loop the program repeats a set of instructions many times, until the stopping criteria is met.\nLoop is very useful for repetitive jobs.\n\nfor (i in 1:10){ # i is the iterator\n  # loop body: gets executed each time\n  # the value of i changes with each iteration\n}"
  },
  {
    "objectID": "R-introductionR.html#nested-loops",
    "href": "R-introductionR.html#nested-loops",
    "title": "Introduction to R",
    "section": "8.4 Nested loops",
    "text": "8.4 Nested loops\nWe can also nest loops into other loops.\n\nx <- cbind(1:3, 4:6) # column bind\nx\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\ny <- cbind(7:9, 10:12) # row bind\ny\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n\nz <- x\n\nfor (i in 1:nrow(x)) {\n  for (j in 1:ncol(x)){\n    z[i,j] <- x[i,j] + y[i,j]\n  }\n}\n\nz\n\n     [,1] [,2]\n[1,]    8   14\n[2,]   10   16\n[3,]   12   18"
  },
  {
    "objectID": "R-introductionR.html#functions",
    "href": "R-introductionR.html#functions",
    "title": "Introduction to R",
    "section": "8.5 Functions",
    "text": "8.5 Functions\nA function takes the argument as input, run some specified actions, and then return the result to us.\nFunctions are very useful. When we would like to test different ideas, we can combine functions with loops: We can write a function which takes different parameters as input, and we can use a loop to go through all the possible combinations of parameters.\n\n8.5.1 User-defined function syntax\nHere is how to define a function in general:\n\nfunction_name <- function(arg1 ,arg2 = default_value){\n  # write the actions to be done with arg1 and arg2\n  # you can have any number of arguments, with or without defaults\n  return() # the last line is to return some value \n}\n\nExample:\n\nmagic <- function( x, y){\n  return(x^2 + y)\n}\n\nmagic(1,3)\n\n[1] 4"
  },
  {
    "objectID": "R-introductionR.html#a-comprehensive-example",
    "href": "R-introductionR.html#a-comprehensive-example",
    "title": "Introduction to R",
    "section": "8.6 A comprehensive example",
    "text": "8.6 A comprehensive example\nTask: write a function, which takes a vector as input, and returns the max value of the vector\n\nget_max <- function(input){\n  max_value <- input[1]\n  for (i in 2:length(input) ) {\n    if (input[i] > max_value) {\n      max <- input[i]\n    }\n  }\n  \n  return(max)\n}\n\nget_max(c(-1,3,2))\n\n[1] 2\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWrite your own version of which.max() function"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "2 Course Objective\nMarketing analytics addresses how to utilize the right analytics tools to guide marketing tactics and strategies in a scientific manner. Driven by recent advances in information and communication technologies, the very nature of marketing analytics has evolved. This module provides students with systematic and practical training in causal inference, predictive analytics, and programming tools in solving real-life marketing problems.2\nIn week 1, students will learn the concept of marketing process and how to compute customer lifetime value using R. In week 2, students will start building up dataset cleaning and manipulation skills with the dplyr package.\nFrom week 3 to week 6, students will learn causal inference tools, which help marketers correctly measure the causal effects of marketing initiatives on marketing outcomes. Students will get hands-on training of A-B testing (randomized controlled trials), instrumental variable, difference-in-differences, and regression discontinuity designs. Through a series of case studies each week, students will learn how to apply these causal inference techniques in optimizing marketing mix such as promotion and pricing.\nIn the remaining weeks, students will learn predictive analytics and how to apply machine learning models for segmentation, targeting, and customer relationship management.\nAt the end of the module, students will be able to carry out independent marketing research for their dissertation projects and their future jobs.\n\n\n3 Course Structure (tentative)\n\n\n\n4 Office Hours\nWe will create a Microsoft Teams channel for the module at the beginning of term. It is a good practice to utilize the Microsoft Teams Q&A channels as an interactive place to promote peer-to-peer learning. For any questions, please first check the Teams channels and see if the questions are already posted and answered by any of your classmates there. If not, please post your questions in the Teams channels. I will monitor and summarize the questions posted on Teams channels and provide answers in class.\nYou can also ask questions during my office hours. I am happy to answer any questions you may have about this module (of course excluding how to solve assignment problem sets). To make an appointment, please use this link.\n\n\n5 Textbook\nSince the marketing field is evolving rapidly, we aim to cover the latest marketing analytics techniques; therefore, we will not rely on any specific textbook in this module. All classes will be based on the lecture notes and supplementary readings I have prepared for you.\nNevertheless, if you would like to further enrich your learning journey and extend your knowledge of marketing analytics, I recommend “Handbook of Marketing Analytics”. This book is free for download at UCL’s E-library.\n\n\n6 Programming with R\nWe will use an open-source programming language R throughout the module. R is one of the most commonly used programming languages by data scientists, economists, and statisticians, and is sometimes called the “golden child” of data science. R is cross-platform compatible on Windows, Mac, and Linux, with thousands of packages ready for use. Undoubtedly, it has one of the richest ecosystems to perform data analytics tasks. More importantly, it is free of charge compared with other commercial software!\nIf you have little prior exposure to R before joining MSc Business Analytics, it is highly advised that you should self-study this tutorial, “Introduction to R”, before attending the induction week. Focus on Chapters 1, 2, 3, 5, and 6.\n\n\n7 Assignments and Grading policy\nThere will be no exams in this module. Learning outcomes will be examined through three individual assignments. Your final grade in this module will be a weighted average of the following:\n\nFirst assignment, 30% weight, 1500 words\nSecond assignment, 40% weight, 2000 words\nThird assignment, 30% weight, 1500 words\n\nDetailed assignment descriptions will be given in due course.\n\nAcademic integrity: You will receive training in Student Academic Misconduct Procedure in the induction week, in which you will learn how to properly reference your work and avoid plagiarism. As all assignments in this module are individual assignments, you should NOT work with other students in any way. Note that it will be a severe violation of academic integrity if you look for solutions on the Internet or even outsource the assignments to any agency. You may risk failing this module if such a violation is found and investigated by the University.\nWord count: You should follow the word limit. Otherwise, your marks may be reduced. Therefore, try to keep your answer concise and to the point.\nSubmission Please double check (or even triple check) whether the file to be uploaded is the correct, finalized answer sheet before submission. The final marks will be ONLY based on the file you submit, even though you may be able to show evidence that a wrong file is uploaded.\nAssistance with submission: Neither I nor the TAs are authorized to handle ECs or any emergencies related to assignment submission. Please directly contact the MSc program admin here for any assistance.\n\n\n\n8 Copyright\nAll of the materials in this module are copyrighted, either purchased by UCL or written by me. Please refrain from uploading any materials (including uploading assignments to unauthorized websites for answers) in the module to other external websites or sharing any materials with anyone unauthorized. A copyright violation may be investigated by the school.\n\n\n\n\n\nFootnotes\n\n\nWei is pronounced as “way”, which means jade in Mandarin; Miao is my surname name, which is exactly pronounced as “meow”.↩︎\nJust a little heads up – unlike undergrad marketing modules where you mainly learn marketing strategies and concepts, this module focuses on “analytics” (which comes first) and its application in .↩︎"
  }
]