{
  "hash": "c27045fad9de1a5b548b6d0403e6b160",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R\"\nauthor: Wei Miao\naffiliation: UCL School of Management\ndate: \"Fri, 12 Aug 2022\"\nformat:\n    html:\n      number-sections: true\n      df-print: paged\n      self-contained: true\n      page-layout: full\n      toc-depth: 2\n      code-line-numbers: false\n      code-copy: hover\n      \nknitr:\n  opts_chunk:\n    echo: true\n    warning: true\n    message: true\n    error: true\nexecute: \n  cache: true\n  freeze: auto\n---\n\n\n# Class Objective\n\n-   Setup R and Rstudio\n\n-   Install and load packages in R; comment codes\n\n-   Learn R data types and common functions for each data type\n\n    -   scalar, vector, matrix, data frame, list\n\n-   Learn R programming basics\n\n    -   variables, conditional statement, loops, and user-defined functions\n\n# Install and Setup R\n\n## What is R\n\n-   R is both a programming language and software environment for statistical computing, which is free and open-source (<https://www.r-project.org/about.html>).\n\n-   The R Project was initiated by Robert Gentleman and Ross Ihaka (University of Auckland) in the early 1990s as a different implementation of the S language, which was developed at Bell Laboratories. Since 1997, R has been developed by the R Development Core Team.\n\n## What is R used for?\n\nR can do almost anything you can think of! Below is a list of what I use R for for my research and daily work.\n\n-   Super powerful data analytics\n\n    -   statistics and econometrics\n    -   data manipulation and wrangling\n    -   machine learning models\n\n-   Write research report and prepare presentations slides using `quarto` developed by RStudio team.\n\n-   Build and maintain my own webpage. I build and maintain my [personal website](http://miaowei.netlify.app) with the `blogdown` package; this course website is built with `quarto` package.\n\n## Why Learn R at MSc BA.\n\n1.  R is one of the most popular programming languages used by statisticians, economists, and data analysts. Below is the popularity index of different languages by [tiobe.com](https://www.tiobe.com). Your future colleagues will likely be using R.\n\n![Trend of R](images/R%20ranking.png){#fig-trend-of-R}\n\n2.  Economists and statisticians prefer R, so there are many powerhouse packages exclusive to R, such as the state-of-the-art causal machine learning [`grf`](https://grf-labs.github.io/grf/articles/grf.html) package.\n\n3.  R versus Python\n\n## Install and Setup R: Step 1\n\n**Step 1**: Download R from the official website [CRAN](https://www.r-project.org).\n\n-   Note that R version is updated on a regular basis, to fix bugs or add new features. It's good to keep your R up to date.\n    -   However, be mindful that sometimes across major versions, some R's base functions may be depreciated and cause breaks in your code, so it's important to read the R News after each update, so that you understand what's been updated in the latest version and if there will be any breaks in your previous code. For a deeper understanding of this issue, please refer to this [article](http://datacolada.org/95) regarding reproducible research with R.\n-   For Windows users, remember to download and install the `RTools` as well.\n\n## Install and Setup R on your computers: Step 2\n\n**Step 2**: Download and install Rstudio from [Rstudio's website](https://www.rstudio.com/products/rstudio/download/).\n\nFor a introduction to the Rstudio IDE, refer to this [cheat sheet](https://github.com/rstudio/cheatsheets/raw/master/rstudio-ide.pdf).\n\n## Glossary for RStudio\n\n-   ***script***: (top left) where you write codes a text-readable file (E.g., 'test.R', 'test.Rmd', etc.), each separated by a new line.\n\n-   ***console***: (bottom left) where you can type commands interactively with R and get the results immediately\n\n-   ***environment***: (top right) a list of named variables/objects that we have generated; can be checked on the 'environment' panel.\n\n-   ***history***: (top right) the list of past commands that we have used\n\n-   ***help***: (bottom right) a documentation of all the functions available in R (the user manual)\n\n-   ***package***: (bottom right) a collection of additional functions and dataset\n\n## Comment your codes\n\nYou can put a \"\\#\" before any line of code, to indicate that this line is your comment, and this line will turn green and not run by R.\n\nIt's a good practice to often comment your codes, so that you can help the future you to remember what you were trying to achieve.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-1_5729de33667558605176106483e0f4e3'}\n\n```{.r .cell-code}\n# print(\"David is handsome\")\n```\n:::\n\n\n## Packages management: the coventional way\n\nTo achieve certain tasks, for instance, to run a regression analysis, we can definitely write our own code from scratch. However, it may take much time if we would like to build everything from zero. That's when the packages/libraries can help us to improve our efficiency by a large margin.\n\nOne of the best things about R is that it has tens of thousands of extremely useful packages/libraries. And some are even exclusive to R, for instance, the `grf` package that runs the causal forest model, which I have used for my research.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-2_8be4986a444714192d0d9fd29201c31e'}\n\n```{.r .cell-code}\n# install.packages('dplyr') # install the package\nlibrary('dplyr') # load the package\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\n## Libraries and packages management: a simpler way\n\nIn R, there is a package called `pacman`, which stands for package management and is probably the most convenient way to manage R packages.\n\n**Task:** Load `ggplot2` and `data.table` packages; if they are not installed, install them and then load them.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-3_7b855729e9e104a05501015b82ab338c'}\n\n```{.r .cell-code}\n# if you have not yet installed pacman package, run the following code to install it.\n\n# install.packages('pacman')\n\npacman::p_load(data.table,ggplot2)\n```\n:::\n\n\n## To learn functions in a package: Use `help()`\n\nWhenever you don't know how to use a function from a package, you can either\n\n-   use `help()`. Enter the command `help(log)` in R console\n\n\n::: {.cell hash='R-introductionR_cache/html/help_93114041308f28463a0bf1eaa69960ac'}\n\n```{.r .cell-code}\n?log\nhelp(log)\n```\n:::\n\n\n-   or you can directly search for the function in RStudio help panel.\n\n![Example of function help](images/help.png){#fig-help}\n\n# Scalars\n\n## Use R as a calculator\n\nWe can do the basic mathematical calculation in R as follows:\n\n\n::: {.cell hash='R-introductionR_cache/html/calculator1_6904bc2a8b3ea7ba298259af52639d4e'}\n\n```{.r .cell-code}\n8+8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n\n```{.r .cell-code}\n8-8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n8*8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 64\n```\n:::\n\n```{.r .cell-code}\n2/2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nCommon mathematical operations/functions can also be used in R.\n\n\n::: {.cell hash='R-introductionR_cache/html/calculator2_12296c30dffc22f1cedd15b9e13b341d'}\n\n```{.r .cell-code}\nlog(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nexp(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.718282\n```\n:::\n\n```{.r .cell-code}\nlog(exp(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nsqrt(25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n## Assign value\n\nIn R, we normally use the left arrow to assign a value to an object `<-`\n\n\n::: {.cell hash='R-introductionR_cache/html/assign_a3dd5f70da3940ac3332a47066a96edb'}\n\n```{.r .cell-code}\nx <- log(2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6931472\n```\n:::\n:::\n\n\nYou can also use equal sign `=` without issues, but it's recommended to stick with R's tradition.\n\n## Data types\n\n-   Numeric/Double (e.g. 2.5, 1/5, 1.0, etc.)\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-4_4d13e7dbba4a6b809bcff82437e69e25'}\n\n```{.r .cell-code}\n# Numeric Vector \nnum2 <- c(1, 2, 3.4, 5, 5.9)\n```\n:::\n\n\n-   Complex (e.g. 1 + 2i, etc.)\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-5_3219fc6e0b5e11a6b4b108b060b04388'}\n\n```{.r .cell-code}\n# Complex\ncom5 <- c(2+3i, 3+5i, 4+5i)\n```\n:::\n\n\n-   Logical (e.g. TRUE, FALSE)\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-6_be7334690ecaa0bff10da9c420684308'}\n\n```{.r .cell-code}\n# Logical Vector \nlog4 <- c(TRUE, FALSE, FALSE, T, F) \n```\n:::\n\n\n-   Character (e.g. \"Wei\", \"UCL\", \"1 + 1 = 3\", \"TRUE\", etc.)\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-7_db3e925b2ebd54816e7857a58d3fdce9'}\n\n```{.r .cell-code}\n# Character Vector\nstr1 <- c(\"R\",\"Python\",\"Java\",\"Scala\",\"Julia\")\n```\n:::\n\n\n-   Factor (\"male\", \"female\", etc.); this is an important class for describing categories. We will discuss in more detail later in the module.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-8_14f57f9de85a6de484bf5ec4253e3fd2'}\n\n```{.r .cell-code}\ncountry <- c('UK','Spain','Italy','Multiverse')\n\nfactor(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] UK         Spain      Italy      Multiverse\nLevels: Italy Multiverse Spain UK\n```\n:::\n:::\n\n\n## Special data types: `NA`\n\n`NA` stands for missing values; this is a very tricky type that needs additional attention.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-9_744141cdedf96168af5aa6ec543a9bbb'}\n\n```{.r .cell-code}\nmissing <- c(1,NA,2,NA)\n```\n:::\n\n\n-   The following will return `NA`, because we haven't told R how to deal with missing values\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-10_c89a71362f97016aad22548f4e614eb9'}\n\n```{.r .cell-code}\nmean(missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n-   If we tell R to remove missing values, we get what we want\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-11_ba945735b9cd5d8d13a9afa42e793213'}\n\n```{.r .cell-code}\nmean(missing,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5\n```\n:::\n:::\n\n\n::: callout-important\nWhen cleaning data using `sum()`, `mean()`, `sd()`, etc., always put `na.rm = T` at the end !\n:::\n\n-   Commonly used functions to check missing values\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-12_8ea7bfe599dc8f03225d50596c4391c0'}\n\n```{.r .cell-code}\n# check missing values\nis.na(missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nanyNA(missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nsum(is.na(missing))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n## Special data types: `Inf`\n\n-   `Inf` is infinity. You can have either positive or negative infinity.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-13_0b1b56318b983e309dfb47b421566fe8'}\n\n```{.r .cell-code}\na <- c(1/0,1,2) #Inf\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf   1   2\n```\n:::\n:::\n\n\n-   How to check for `Inf`\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-14_09ae8b924a18b8fc4fcb6f9e0ca1e8fc'}\n\n```{.r .cell-code}\nis.infinite(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n-   However, `Inf` **is not** a missing value!!\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-15_014013de647f8e7e8bd51e2a4286a63a'}\n\n```{.r .cell-code}\nis.na(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE\n```\n:::\n:::\n\n\n-   Therefore, if we take average, `na.rm = T` no longer works\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-16_62aa200290ac439031718a637a7a651e'}\n\n```{.r .cell-code}\nmean(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n\n```{.r .cell-code}\nmean(a, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n:::\n\n\n## Special data types: `NaN`\n\n-   `NaN` means \"Not a Number\". It's an undefined value.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-17_413a67769d3a2686873759e97ec2ad7f'}\n\n```{.r .cell-code}\nb <- c(0/0,1,2) #NaN\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN   1   2\n```\n:::\n:::\n\n\n-   How to check for `NaN`\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-18_c7d4e4aae2fb87d7bc4ee86291402db3'}\n\n```{.r .cell-code}\nis.nan(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n-   `NaN` **is** a missing value!\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-19_0b12aa945b58ea63ee8bfa923c253761'}\n\n```{.r .cell-code}\nis.na(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n-   Therefore, if we take average, `na.rm = T` works\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-20_dfb75b778b25fe6d1b792b070a92a31b'}\n\n```{.r .cell-code}\nmean(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN\n```\n:::\n\n```{.r .cell-code}\nmean(b,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5\n```\n:::\n:::\n\n\n## Data type: check data type using class()\n\nWe can use `class()` to check the type of an object in R.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-21_46f7b0dc080c2126883fa9a02ba9c6fa'}\n\n```{.r .cell-code}\na <- '1+1'\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-22_2c7d87caaf5df909cbfe6ad94831f55a'}\n\n```{.r .cell-code}\nb <- 1+1\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## Data type: conversion\n\nSometimes, data types of variables from raw data may not be what we want; we need to change the data type of a variable to the appropriate one, so that we can run some operations. See the following example:\n\n-   `a` is a string, and we cannot use mathematical operations on it, or R will report errors.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-23_a2bccef04563483ed6e41ed5cbeb55d9'}\n\n```{.r .cell-code}\na <- '1'\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\na + 1\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in a + 1: non-numeric argument to binary operator\n```\n:::\n:::\n\n\n-   We can convert `a` to a numeric value. To convert from character to numeric, we use `as.numeric()`\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-24_fbd344da4b269778ec20c67fb3f7a9ba'}\n\n```{.r .cell-code}\nb <- as.numeric(a)\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## Data structures\n\nPrevious slides discuss a single value, i.e., a scalar. When we deal with datasets, we will run into variables and data frames.\n\n![Visualization of data structures](images/r_data_structures.png){#fig-R-datastructure}\n\n# Vectors\n\n## Vectors: creating vectors\n\n### Creating vectors: c()\n\nVector can be created using the command `c()`.\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_base_b58ec680f3e9c050d19a4fec00a4de9f'}\n\n```{.r .cell-code}\nx <- c(1, 3, 5, 10)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  3  5 10\n```\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nVectors must contain elements of the same data type. Otherwise, it will convert elements into the same type.\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_type_4e3b8bfb0daa232c051945c7c6d317c5'}\n\n```{.r .cell-code}\nx <- c(1, \"intro\", TRUE)\n\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### Creating vectors: length()\n\nYou can measure the length of a **vector** using the command `length()`\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_length_d15caffb52137025fab9e89dfe0cd5d0'}\n\n```{.r .cell-code}\nx <- c('R',' is', ' fun')\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ny <- c()\nlength(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n### Creating vectors with patterns: seq() and rep()\n\nIt is also possible to easily create sequences\n\n-   manually use colon `:`\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_sequences_ba3148b434ea9108f78fa5559e446cb2'}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n-   use `seq()` to create sequence with fixed steps\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-25_cd8453a9b6e38bad1b00be80cb1a8e90'}\n\n```{.r .cell-code}\n# use seq()\nseq(from = 1, to = 2, by = 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n```\n:::\n:::\n\n\n-   use `seq.Date()` to create a sequence of dates\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-26_ed09a905184e1ed01e2d20fbb01f663b'}\n\n```{.r .cell-code}\nseq.Date(from = as.Date(\"2021-09-27\"), \n         to = as.Date(\"2021-10-01\"), \n         by = '1 days')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-09-27\" \"2021-09-28\" \"2021-09-29\" \"2021-09-30\" \"2021-10-01\"\n```\n:::\n:::\n\n\n-   use `rep()` to create repeated sequences\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-27_312a949ee31ec7d9113aee2185d2a466'}\n\n```{.r .cell-code}\n# replication using rep()\nrep(\"A\", times = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"A\" \"A\" \"A\" \"A\"\n```\n:::\n:::\n\n\n### Creating vectors: combine vectors\n\nYou can use `c()` to combine different vectors; this is very commonly used when concatenating vectors.\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_multiple_84eca7ce0d40163edda36d24f09c1881'}\n\n```{.r .cell-code}\nx <- 1:3 # from 1 to 3\ny <- c(10, 15) # 10 and 15\nz <- c(x,y) # x first and then y \nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  3 10 15\n```\n:::\n:::\n\n\n## Vectors: subsetting\n\nWe put the index of elements we would like to extract in a **square bracket**.\n\nNote that Python uses different ways to index and subset vectors and matrices.\n\n-   Which element is in the second position?\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_subset_b72673aba896098f9c5841fe281ddaf3'}\n\n```{.r .cell-code}\nx <- c(1,3,8,7) \nx[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n-   What are the first 2 elements?\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-28_a357e2323b53eb56359a2a2958f43f23'}\n\n```{.r .cell-code}\nx[1:2] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3\n```\n:::\n:::\n\n\n-   What are the 1st, 3rd and 4th elements?\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-29_380dfd4f3875e2f46e34295460890c83'}\n\n```{.r .cell-code}\nx[c(1,3,4)] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 8 7\n```\n:::\n:::\n\n\n## Vectors: relational operations\n\n-   We can compare a vector with a single scalar value\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_subset2_2501f87b6021789d0b2e6d8d153ff5ea'}\n\n```{.r .cell-code}\nx < 6 # is each element lower than 6?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nx == 10 # is the element equal to 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n-   Find the position of elements that satisfy certain conditions: `which()`\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-30_c4ca6f6262dc077563e2e322995575ad'}\n\n```{.r .cell-code}\nwhich(x == 8) # which element equals 8 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nwhich.max(x) # which is the max element \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nwhich.min(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n::: callout-note\n### Exercise\n\nFind the minimum value of vector `x`\n:::\n\n-   Sometimes, we may need to operation on multiple relational operations. For instance, we may want to find out elements that are smaller than 7 **and** larger than 3.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-31_78ca31b40a4d0e8f962f888ad1973e90'}\n\n```{.r .cell-code}\nT & F # and\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nT | F # or\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n!T # not\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Vectors: `%in%`\n\n-   A special relational operation is `%in%` in R, which tests whether an element exists in the object.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-32_5d01eb5977502273aa26f26974c07ee9'}\n\n```{.r .cell-code}\nx <- c(1,3,8,7) \n\n3 %in% x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4 %in% x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Vectors: elementwise operations\n\nR is a **vectorized** language, meaning by default it will do vector operation internally.\n\n\n::: {.cell hash='R-introductionR_cache/html/vectors_operations_6a42d61967eafed810cd62f3dd5439a7'}\n\n```{.r .cell-code}\nx <- c(1,3,8,7)\nx+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  5 10  9\n```\n:::\n\n```{.r .cell-code}\nx-2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1  1  6  5\n```\n:::\n\n```{.r .cell-code}\nx*2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 16 14\n```\n:::\n\n```{.r .cell-code}\nx^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  9 64 49\n```\n:::\n:::\n\n\n::: callout-important\nWhen the length of vectors do not match, R will still do it for your without reporting error but a warning message. As you can see, even if the length of vectors does not match, R can still return an output. It's important to check the warning messages when there is any!\n:::\n\n\n::: {.cell hash='R-introductionR_cache/html/Caveat_6ae848548c35f34c91378733ec0cd42a'}\n\n```{.r .cell-code}\nx <- c(1,3,8,7)\n\ny <- c(1,3,4) # careful!!! does not report error\nx + y\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 12  8\n```\n:::\n:::\n\n\n# Matrices\n\n## Matrices: creating matrices\n\n### Creating matrices: matrix()\n\n-   A matrix can be created using the command `matrix()`\n    -   the first argument is the vector to be converted into matrix\n    -   the second argument is the number of rows\n    -   the last argument is the number of cols (optional)\n\n\n::: {.cell hash='R-introductionR_cache/html/matrix_30c67457afd9144b71bff705f5086644'}\n\n```{.r .cell-code}\nmatrix(1:9, nrow = 3, ncol = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n:::\n\n\n::: callout-important\nR by default inserts elements **vertically** by **columns**\n:::\n\n-   R will fill in the matrix by order and discard the remaining elements once fully filled\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-33_f29e5ff4771d71f0c4050ab25c32386e'}\n\n```{.r .cell-code}\nmatrix(1:9, nrow = 3, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in matrix(1:9, nrow = 3, ncol = 2): data length [9] is not a sub-\nmultiple or multiple of the number of columns [2]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n:::\n\n\n-   R will fill in the matrix by order and recycle to fill in the remaining elements\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-34_571e86ce6c09476810721155840d703b'}\n\n```{.r .cell-code}\nmatrix(1:9, nrow = 3, ncol = 4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in matrix(1:9, nrow = 3, ncol = 4): data length [9] is not a sub-\nmultiple or multiple of the number of columns [4]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7    1\n[2,]    2    5    8    2\n[3,]    3    6    9    3\n```\n:::\n:::\n\n\n### Creating matrices: inserting by row\n\nHowever, we can ask R to insert by rows by setting the `byrow` argument.\n\n\n::: {.cell hash='R-introductionR_cache/html/matrix_byrow_757875077e0f3d4d9173b2a62cf20677'}\n\n```{.r .cell-code}\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n:::\n:::\n\n\n### Creating matrices: concatenation of matrices cbind() and rbind()\n\nWe can use `cbind()` and `rbind()` to concatenate vectors and matrices into new matrices.\n\n-   `cbind()` does the column binding\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-35_f6b04e09a8bfbe7b97b4d1f8eabc86f0'}\n\n```{.r .cell-code}\nx <- cbind(1:3, 4:6) # column bind\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n:::\n\n\n-   `cbind()` can also operate on matrices.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-36_67c246d50cc15257fbd08359d671cb7f'}\n\n```{.r .cell-code}\ncbind(x,x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    1    4\n[2,]    2    5    2    5\n[3,]    3    6    3    6\n```\n:::\n:::\n\n\n-   `rbind()` does the row binding\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-37_09e97fc8082daf62eece537c5ebec546'}\n\n```{.r .cell-code}\nrbind(7:9, 10:12) # row bind\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    7    8    9\n[2,]   10   11   12\n```\n:::\n:::\n\n\n## Matrices: indexing and subsetting\n\nMatrices have two dimensions: rows and columns. Therefore, to extract elements from a matrix, we just need to specify which row(s) and which column(s) we want.\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-38_a0af5f1274ea7071f5c1e789edb07ca3'}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n:::\n\n\n-   Extract an element\n    -   1 is specified for row index, so we will extract elements from the first row\n    -   1 is specified for column index, so we will extract elements from the the second column\n    -   Altogether, we extract the single element in row 1, column 2.\n\n\n::: {.cell hash='R-introductionR_cache/html/matrix_subset_4cc4ef18f08f0b6c47f046774c87c63c'}\n\n```{.r .cell-code}\nx[1,2] # the element in the 1st row, 2nd column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n-   If we leave blank for a dimension, we extract all elements of that dimension.\n    -   1 is specified for row index, so we will extract elements from the first row\n    -   Nothing is specified for column index, so we will extract all elements from all columns\n    -   Altogether, we extract all elements in the first row\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-39_db865ba8c02e3482ede1071ea3d3a248'}\n\n```{.r .cell-code}\nx[1,] # all elements in the first row\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4\n```\n:::\n:::\n\n\n::: callout-note\n### Exercise\n\n1.  Extract all elements in the second column\n\n2.  Extract all elements in the first and third rows\n:::\n\n## Matrices: operations\n\nLet's use 3 matrices `x`, `y`, and `z`:\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-40_6530a22d47e4554fa3328f793c48450a'}\n\n```{.r .cell-code}\nx <- matrix(1:6, nrow = 3)\ny <- matrix(1:6, byrow = T, nrow = 2)\n```\n:::\n\n\n-   Functions will be vectorized over all elements in a matrix\n\n\n::: {.cell hash='R-introductionR_cache/html/matrix_operations1_1eeb2edf1e04eb28fe560a2fd16a8808'}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n\n```{.r .cell-code}\nz<- x^2\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1   16\n[2,]    4   25\n[3,]    9   36\n```\n:::\n:::\n\n\n### Matrices' operations: matrix addition and multiplication\n\n-   If the two matrices are of the same dimensions, they can do element-wise operations, including the `*`\n\n\n::: {.cell hash='R-introductionR_cache/html/matrix_operations2_c14d37827bb81b4c5169813610808d98'}\n\n```{.r .cell-code}\nx + z   # elementwise addition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2   20\n[2,]    6   30\n[3,]   12   42\n```\n:::\n\n```{.r .cell-code}\nx * z\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1   64\n[2,]    8  125\n[3,]   27  216\n```\n:::\n:::\n\n\n-   We can also use `%*%` to indicate matrix multiplication\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-41_f37e912501ac20f61841ccafa727b84d'}\n\n```{.r .cell-code}\nx%*%y # matrix multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   17   22   27\n[2,]   22   29   36\n[3,]   27   36   45\n```\n:::\n:::\n\n\n### Matrices' operations: inverse and transpose\n\n-   We use `t()` to do matrix transpose\n\n\n::: {.cell hash='R-introductionR_cache/html/matrix_operations3_1f7af897246adf7439be115f52fdc5cd'}\n\n```{.r .cell-code}\nt(x) # transpose\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n:::\n:::\n\n\n-   We use `solve()` to get the inverse of an matrix\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-42_cee58d388845bac0d7e682f25b4ef561'}\n\n```{.r .cell-code}\nsolve(t(x)%*%x) # inverse; must be on a square matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]       [,2]\n[1,]  1.4259259 -0.5925926\n[2,] -0.5925926  0.2592593\n```\n:::\n:::\n\n\n# Data Frames\n\n## Data Frames: creating dataframe\n\n### Data Frames: create dataframe using data.frame()\n\n-   Data Frame is the R object that we will deal with most of the time in the MSc program. You can think of `data.frame` as a spreadsheet in excel.\n\n\n::: {.cell hash='R-introductionR_cache/html/dataframe_75a8ee86fd14d4b0a41697189610de5b'}\n\n```{.r .cell-code}\ndf <-  data.frame(id = 1:4,\n  name = c(\"David\", \"Yongdong\", \"Anil\", \"Wei\"),\n  wage = rnorm(n=4, mean = 10^5, sd = 10^3), \n  male = c(T, T, T, T)\n  )\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"wage\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"male\"],\"name\":[4],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"David\",\"3\":\"99065.96\",\"4\":\"TRUE\"},{\"1\":\"2\",\"2\":\"Yongdong\",\"3\":\"99547.62\",\"4\":\"TRUE\"},{\"1\":\"3\",\"2\":\"Anil\",\"3\":\"101591.15\",\"4\":\"TRUE\"},{\"1\":\"4\",\"2\":\"Wei\",\"3\":\"98574.72\",\"4\":\"TRUE\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n-   Data frames can also be created from external sources, e.g., from a csv file or database.\n\n## Data Frames: Basics\n\n-   Each row stands for an `observation`; each column stands for a `variable`.\n\n-   Each column should have a **unique** name.\n\n-   Each column must contain the same data type, but the different columns can store different data types.\n\n    -   compare with matrix?\n\n-   Each column must be of same length, because rows have the same length across variables.\n\n## Data Frames: check dimensions and variable types\n\n-   You can verify the size of the `data.frame` using the command `dim()`; or `nrow()` and `ncol()`\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-43_c8be6e76455f4377381309f74f4836fa'}\n\n```{.r .cell-code}\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 4\n```\n:::\n\n```{.r .cell-code}\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n-   You can get the data type info using the command `str()`\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-44_8a7fc801daae42bdc110102aa33e0a2b'}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4 obs. of  4 variables:\n $ id  : int  1 2 3 4\n $ name: chr  \"David\" \"Yongdong\" \"Anil\" \"Wei\"\n $ wage: num  99066 99548 101591 98575\n $ male: logi  TRUE TRUE TRUE TRUE\n```\n:::\n:::\n\n\n-   Get the variables names\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-45_aa45d6acbfb3a1a8d114328bcf672508'}\n\n```{.r .cell-code}\nnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"id\"   \"name\" \"wage\" \"male\"\n```\n:::\n:::\n\n\n## Data Frames: summary\n\n-   Summarize the data frame\n\n\n::: {.cell hash='R-introductionR_cache/html/dataframe_subset2_e9a35f0449f540b457553e6dde6bbe8f'}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id           name                wage          male        \n Min.   :1.00   Length:4           Min.   : 98575   Mode:logical  \n 1st Qu.:1.75   Class :character   1st Qu.: 98943   TRUE:4        \n Median :2.50   Mode  :character   Median : 99307                 \n Mean   :2.50                      Mean   : 99695                 \n 3rd Qu.:3.25                      3rd Qu.:100058                 \n Max.   :4.00                      Max.   :101591                 \n```\n:::\n:::\n\n\n## Data Frames: subsetting\n\nSince a dataframe is essentially a matrix, all the subsetting syntax with matrices can be applied here.\n\n\n::: {.cell hash='R-introductionR_cache/html/dataframe_subset_03b69ddab682a8424aa1ec151ad84c2c'}\n\n```{.r .cell-code}\ndf$name # subset a column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"David\"    \"Yongdong\" \"Anil\"     \"Wei\"     \n```\n:::\n\n```{.r .cell-code}\ndf[,c(2,3)] # can also subset like a matrix\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"wage\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"David\",\"2\":\"99065.96\"},{\"1\":\"Yongdong\",\"2\":\"99547.62\"},{\"1\":\"Anil\",\"2\":\"101591.15\"},{\"1\":\"Wei\",\"2\":\"98574.72\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe are interesting in the cylinders and the weights of inefficient cars (lower than 15 miles per gallon).\n\n\n::: {.cell hash='R-introductionR_cache/html/dataframe_subset_mtcars_5cb30379124097cea20817895d1b21d3'}\n\n```{.r .cell-code}\npoll_cars <- mtcars[mtcars$mpg<15, c(\"cyl\", \"wt\")] # remember to assign the generated dataframe to a new name\npoll_cars\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"cyl\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"8\",\"2\":\"3.570\",\"_rn_\":\"Duster 360\"},{\"1\":\"8\",\"2\":\"5.250\",\"_rn_\":\"Cadillac Fleetwood\"},{\"1\":\"8\",\"2\":\"5.424\",\"_rn_\":\"Lincoln Continental\"},{\"1\":\"8\",\"2\":\"5.345\",\"_rn_\":\"Chrysler Imperial\"},{\"1\":\"8\",\"2\":\"3.840\",\"_rn_\":\"Camaro Z28\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n# Other data structures (Optional)\n\n## Arrays\n\n-   We can use `array()` to generate a high-dimensional array\n\n-   Just like vectors and matrices, arrays can include only data types of the same kind.\n\n-   A 3D array is basically a combination of matrices each laid on top of other\n\n\n::: {.cell hash='R-introductionR_cache/html/arrays_128fbe2befeb2190a354ed83ba33fcf9'}\n\n```{.r .cell-code}\nx <- 1:4\nx <- array(data = x, dim = c(2,3,2))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    1\n[2,]    2    4    2\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    3    1    3\n[2,]    4    2    4\n```\n:::\n:::\n\n\n## Lists\n\nA list is an R object that can contain anything. List is pretty useful when you need to store objects for latter use.\n\n\n::: {.cell hash='R-introductionR_cache/html/list_9f73b56907e55e35de8e843a3fa2268d'}\n\n```{.r .cell-code}\nx <- 1:2\ny <- c(\"a\", \"b\")\nL <- list( numbers = x, letters = y)\n```\n:::\n\n\n## Lists: indexing and subsetting\n\nThere are many ways to extract a certain element from a list.\n\n-   by index\n-   by the name of the element\n-   by dollar sign `$`\n\n\n::: {.cell hash='R-introductionR_cache/html/list_subsetting_bf3a0c8ba832292308f3d52718893af8'}\n\n```{.r .cell-code}\nL[[1]] # extract the first element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n\n```{.r .cell-code}\nL[['numbers']] # based on element name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n\n```{.r .cell-code}\nL$numbers # extract the element called numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n:::\n\n\nAfter extracting the element, we can work on the element further:\n\n\n::: {.cell hash='R-introductionR_cache/html/list_subsetting2_f8d6cd313bae7b88a8e29837285165d6'}\n\n```{.r .cell-code}\nL$numbers[1:3] > 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE    NA\n```\n:::\n:::\n\n\n# Programming Basics\n\n## Variables\n\nIn programming, a variable denotes an object, i.e., a variable is a name that refers to an object in the memory. Variables in R programming can be used to store any R object discussed previously, including numbers, characters, matrices, and data frames.\n\nR is a **dynamically programmed language**, which means that unlike other programming languages (such as C++, which is a pain to debug), we do not have to declare the data type of a variable before we can use it in our program.\n\nFor a variable to be valid, it should follow these rules\n\n-   It should contain letters, numbers, and only dot or underscore characters.\n-   It should not start with a number (eg:- 2iota)\n-   It should not start with a dot followed by a number (eg:- .2iota)\n-   It should not start with an underscore (eg:- \\_iota)\n-   It should not be a reserved keyword.\n\n## if/else\n\nSometimes, you want to run your code based on different conditions. For instance, if the observation is a missing value, then use the population average to impute the missing value. This is where `if/else` kicks in.\n\n    if (condition == TRUE) {\n      action 1\n    } else if (condition == TRUE ){\n      action 2\n    } else {\n      action 3\n    }\n\nExample 1:\n\n\n::: {.cell hash='R-introductionR_cache/html/controlflow_1c155c85dc8500ffd194bfe23222853b'}\n\n```{.r .cell-code}\na <- 15\n\nif (a > 10) {\nlarger_than_10 <- TRUE  \n} else {\n  larger_than_10 <- FALSE\n}\n\nlarger_than_10  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nExample 2:\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-46_bf034d7f9deba2c88546647df63be1e8'}\n\n```{.r .cell-code}\nx <- -5\nif(x > 0){\n  print(\"x is a non-negative number\")\n} else {\n  print(\"x is a negative number\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is a negative number\"\n```\n:::\n:::\n\n\n## Loops\n\nAs the name suggests, in a loop the program repeats a set of instructions many times, until the stopping criteria is met.\n\nLoop is very useful for repetitive jobs.\n\n\n::: {.cell hash='R-introductionR_cache/html/loops_21e39fabf5be1fd1fd287c8867009c38'}\n\n```{.r .cell-code}\nfor (i in 1:10){ # i is the iterator\n  # loop body: gets executed each time\n  # the value of i changes with each iteration\n}\n```\n:::\n\n\n## Nested loops\n\nWe can also nest loops into other loops.\n\n\n::: {.cell hash='R-introductionR_cache/html/loops3_c1e38f604b307b95494fecb7a05d6bb0'}\n\n```{.r .cell-code}\nx <- cbind(1:3, 4:6) # column bind\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n\n```{.r .cell-code}\ny <- cbind(7:9, 10:12) # row bind\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n```\n:::\n\n```{.r .cell-code}\nz <- x\n\nfor (i in 1:nrow(x)) {\n  for (j in 1:ncol(x)){\n    z[i,j] <- x[i,j] + y[i,j]\n  }\n}\n\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    8   14\n[2,]   10   16\n[3,]   12   18\n```\n:::\n:::\n\n\n## Functions\n\nA function takes the argument as input, run some specified actions, and then return the result to us.\n\nFunctions are very useful. When we would like to test different ideas, we can combine functions with loops: We can write a function which takes different parameters as input, and we can use a loop to go through all the possible combinations of parameters.\n\n### User-defined function syntax\n\nHere is how to define a function in general:\n\n\n::: {.cell hash='R-introductionR_cache/html/functions_dd56bb813ce9b08979f811ce95210326'}\n\n```{.r .cell-code}\nfunction_name <- function(arg1 ,arg2 = default_value){\n  # write the actions to be done with arg1 and arg2\n  # you can have any number of arguments, with or without defaults\n  return() # the last line is to return some value \n}\n```\n:::\n\n\nExample:\n\n\n::: {.cell hash='R-introductionR_cache/html/functions2_f50caa4af31175fce3cb57d19e4e5188'}\n\n```{.r .cell-code}\nmagic <- function( x, y){\n  return(x^2 + y)\n}\n\nmagic(1,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n## A comprehensive example\n\nTask: write a function, which takes a vector as input, and returns the max value of the vector\n\n\n::: {.cell hash='R-introductionR_cache/html/unnamed-chunk-47_2ace6bff75c00bfbc626e04ee231b78d'}\n\n```{.r .cell-code}\nget_max <- function(input){\n  max_value <- input[1]\n  for (i in 2:length(input) ) {\n    if (input[i] > max_value) {\n      max <- input[i]\n    }\n  }\n  \n  return(max)\n}\n\nget_max(c(-1,3,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n::: callout-note\n### Exercise\n\nWrite your own version of `which.max()` function\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}