---
author: Dr Wei Miao
date: "`r (lubridate::ymd('20231004') + lubridate::dweeks(1))`"
date-format: long
institute: UCL School of Management
title: "Class 4 Data Wrangling with R Part I"
df-print: paged
colorlinks: true
code-line-numbers: true
format:
  html: 
    toc: true
    number-sections: true
    page-layout: full
    toc-depth: 2
    code-line-numbers: true
    code-copy: hover
  beamer: 
    toc: false
    toc-title: ""
    slide-level: 2
    section-titles: true
    theme: Frankfurt
    colortheme: beaver
    fonttheme: structurebold
    navigation: horizontal
    tbl-colwidths: auto
    fontsize: 9pt
knitr:
  opts_chunk:
    echo: true
    warning: true
    message: true
    error: true
execute: 
  freeze: auto
---

# Overview

## Class Objectives

-   Understand the major steps to conduct data analytics

-   **Data collection:** Learn how to collect first-hand data

-   **Data cleaning:** Learn how to use the `dplyr` package to collect, load, and clean data

-   **Data analysis:** Learn how to conduct descriptive analytics

# Data Analytics Workflow

## Overview

```{r, echo=FALSE,out.width="100%", fig.align='center'}
library(knitr)
include_graphics(path = "images/DataAnalyticsSteps.png")
```

## Collect Data

-   **Primary Data:** Data that are generated by the researcher himself/herself, surveys, interviews, experiments, specially designed for understanding and solving the research problem at hand.

-   **Secondary Data:** Existing data generated by the company's or consumer's past activities, as part of organizational record keeping.

```{r, echo=FALSE,out.width="50%", fig.align='center'}
  include_graphics(path = "images/class4_ComparisonOfData.png")
```

## Collect Data: Marketing Surveys

-   In a marketing survey, we typically would like to solicit the following

    -   purchase intention

    -   willingness to pay (WTP)

    -   shopping basket

    -   share of wallet (SoW)

    -   demographics

-   **Let's see an example of how to design a simple marketing survey!**

-   Useful supplementary readings if you need to design marketing surveys

    -   [The quick start guide on how to conduct market research](https://www.surveymonkey.co.uk/mp/market-research-surveys/)

# Data Wrangling with R

## Data Frames

-   Data Frame is the R object that we will deal with most of the time in the MSc program. You can think of `data.frame` as a spreadsheet in excel

-   Each row stands for an `observation`

-   Each column stands for a `variable`; each column should have a **unique** name.

    -   Each column must contain the same data type, but the different columns can store different data types.

        -   compare with matrix?

-   Each column must be of same length, because rows have the same length across variables.

## Install and Load the `dplyr` package

-   In R, we will be using the `dplyr` package for data cleaning and manipulation.

```{r}
#| eval: false
install.packages("dplyr")
```

-   Load the package

```{r}
#| message: false
library(dplyr)
```

-   Load a built-in dataset called `mtcars` using `data()`

```{r}
data("mtcars")
```

-   To browse the whole dataset, we can simply click the dataset in the environment

    -   It may takes time to view a huge dataset

## Subset Rows Based on Conditions: `filter`

-   **We can use `filter()` to extract rows that meet logical criteria.**

    -   We can also add multiple criteria separated by comma

```{r}
# show all cars with more than 4 gears
filter(mtcars, gear == 4 )
```

## The Pipe Operator %\>%

::: block
### Pipe Operator

%\>%, or pipe operator, will forward a value, or the result of an expression, into the next function call/expression.
:::

```{r}
#| eval: false
mtcars %>% filter(gear == 4) %>% head()
```

## Sort Rows: `arrange`

**`arrange()` orders the rows of a data frame by the values of selected columns.**

-   The default is by ascending order; for descending order, put a minus sign before the variable.

```{r}
# reorder mtcar based on hp
mtcars %>% 
  arrange(hp) %>%
  head()

```

## Generate New Variables: `mutate`

**`mutate()` adds new variables and preserves existing ones**

```{r}
mtcars %>%
  mutate(sqrt_mpg = sqrt(mpg))%>%
  head()
```

## Important Tips

-   Each dplyr operation does not overwrite the original data frame, therefore, we **must assign the object back** if we wish to overwrite the previous data frame.
-   Exercises:
    -   find car models with `gear` equal to 4 and `mpg` larger than 15

    -   reorder the above dataset by `wt` from large to small.

    -   generate a new column which computes the ratio of `mpg` to `wt`

## After-Class Exercise

-   Data camp dplyr exercise

-   Read "Preliminary Customer Analyses" dataset, and try to solve the case questions using the techniques learned today
